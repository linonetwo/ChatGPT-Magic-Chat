{"tiddlers":{"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tiddlywiki5.js":{"text":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus,\n   and the original author of this mode is PMario(https://github.com/pmario) */\n(function(mod) {\n    if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n        mod(require(\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\"));\n    else if (typeof define == \"function\" && define.amd) // AMD\n        define([\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\"], mod);\n    else // Plain browser env\n        mod(CodeMirror);\n})(function(CodeMirror) {\n    \"use strict\";\n\n    CodeMirror.defineMode(\"tiddlywiki5\", function(cmCfg, modeCfg) {\n        var styleSheet = {\n            'rainbow': ['keyword', 'variable-2', 'variable-3']\n        };\n\n        var macroKeywords = {\n            \"changecount\": true,\n            \"colour\": true,\n            \"colour-picker\": true,\n            \"contrastcolour\": true,\n            \"copy-to-clipboard\": true,\n            \"csvtiddlers\": true,\n            \"datauri\": true,\n            \"dumpvariables\": true,\n            \"image-picker\": true,\n            \"jsontiddler\": true,\n            \"jsontiddlers\": true,\n            \"lingo\": true,\n            \"list-links\": true,\n            \"list-links-draggable\": true,\n            \"list-tagged-draggable\": true,\n            \"list-thumbnails\": true,\n            \"makedatauri\": true,\n            \"now\": true,\n            \"qualify\": true,\n            \"resolvepath\": true,\n            \"box-shadow\": true,\n            \"filter\": true,\n            \"transition\": true,\n            \"background-linear-gradient\": true,\n            \"transform-origin\": true,\n            \"toc\": true,\n            \"toc-expandable\": true,\n            \"toc-selective-expandable\": true,\n            \"toc-tabbed-internal-nav\": true,\n            \"toc-tabbed-external-nav\": true,\n            \"tabs\": true,\n            \"tag\": true,\n            \"tag-picker\": true,\n            \"tag-pill\": true,\n            \"thumbnail\": true,\n            \"timeline\": true,\n            \"tree\": true,\n            \"unusedtitle\": true,\n            \"version\": true\n        };\n\n        function getMode(name) {\n            if (CodeMirror.findModeByName) {\n                var found = CodeMirror.findModeByName(name);\n                if (found) name = found.mime || found.mimes[0];\n            }\n            var mode_ = CodeMirror.getMode(cmCfg, name);\n            return mode_.name == \"null\" ? null : mode_;\n        }\n\n        if (modeCfg.fencedCodeBlockHighlighting === undefined)\n            modeCfg.fencedCodeBlockHighlighting = true;\n\n        if (modeCfg.fencedCodeBlockDefaultMode === undefined)\n            modeCfg.fencedCodeBlockDefaultMode = 'text/plain';\n\n        var reHR = /^\\-\\-\\-+$/, // <hr>\n            reBlockQuote = /^<<</,\n            rePreStart = /^```[ \\t]*([\\w\\/+#-]*)[^\\n`]*$/,\n            rePreEnd = /^```$/;\n\n        function chain(stream, state, f) {\n            state.tokenize = f;\n            return f(stream, state);\n        }\n\n        function onNewLine(state) {\n            state.line++;\n            state.listLevel = 0;\n            state.boldLine = false;\n        }\n\n        function tokenBase(stream, state) {\n            var sol = stream.sol();\n            // 解析\n            var tokens = tokenBaseBald(sol, stream, state);\n            if (tokens == null) tokens = '';\n            // 后缀\n            if (state.quoteLevel > 0 && sol) {\n                tokens += ' line-cm-quote-line quote-' + state.quoteLevel;\n            }\n            if (state.codeBlockModeState != null) {\n                tokens += ' comment';\n            }\n            if (state.listLevel > 0) {\n                tokens += ' list ' + styleSheet.rainbow[state.listLevel % styleSheet.rainbow.length];\n            }\n            if (state.boldLine) {\n                tokens += ' strong';\n            }\n            return tokens.trim();\n        }\n\n        function tokenBaseBald(sol, stream, state) {\n            var ch = stream.peek(); // Returns the next character in the stream without advancing it. Will return a null at the end of the line.\n\n            // 检查是不是block的开头\n            // 两个条件：1.在行首 2.以</*{}-`开头\n            if (sol && /[<\\/\\*{}\\-`]/.test(ch)) {\n                // <<<引用block\n                if (stream.match(reBlockQuote)) {\n                    return twTokenQuote(stream, state);\n                }\n\n                // 分割线\n                if (stream.match(reHR))\n                    return 'hr';\n\n                // 代码块\n                var match = null;\n                if (match = stream.match(rePreStart, false))\n                    return twTokenPre(stream, state, match);\n            }\n\n            // 其他情况\n            var matched = null;\n            if (sol && (matched = stream.match(/^\\s*([\\/\\*!#;:>|])/))) {\n                ch = matched[1];\n                // 标题\n                if (ch === \"!\") {\n                    var countOfHeaderLevel = 1;\n                    while (stream.eat('!'))\n                        countOfHeaderLevel++;\n                    stream.skipToEnd();\n                    return 'header h' + countOfHeaderLevel;\n                }\n\n                // 列表\n                if (/[\\*#;:]/.test(ch)) {\n                    var countOfListLevel = 1;\n                    var past_ch = ch;\n                    while (ch = stream.eat(/[\\*#;:]/)) {\n                        countOfListLevel++;\n                        past_ch = ch;\n                    }\n                    state.boldLine = past_ch === \";\";\n                    state.listLevel = countOfListLevel;\n                    return 'list ' + styleSheet.rainbow[countOfListLevel % styleSheet.rainbow.length] + (past_ch === \";\" ? ' strong' : '');\n                }\n                if (ch === \">\") { // single line quote\n                    stream.eatWhile(\">\");\n                    return \"quote\";\n                }\n                if (ch === \"|\")\n                    return 'header';\n            }\n\n            stream.next();\n\n            // 外部链接\n            // rudimentary html:// file:// link matching. TW knows much more ...\n            if (/[hf]/i.test(ch) &&\n                /[ti]/i.test(stream.peek()) &&\n                stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i, true))\n                return 'externallink link';\n\n            // LaTeX 公式\n            if (ch == '$' && stream.match(\"$\", false) && !stream.match(\"$$\", false)) {\n                stream.next();\n                return twTokenFormula(stream, state);\n            }\n\n            // `xx`等宽\n            if (ch == '`') {\n                return chain(stream, state, twTokenMonospace);\n            }\n\n            // 斜体\n            if (ch == \"/\" && stream.eat(\"/\")) {\n                return chain(stream, state, twTokenEm);\n            }\n\n            //\n            if (ch == \"{\" && stream.eat(\"{\"))\n                return chain(stream, state, twTranslclude);\n\n            // wikilink 或 图片\n            if (ch == \"[\" && stream.eat(\"[\"))\n                return chain(stream, state, twInternalLink);\n\n            // 下划线\n            if (ch == \"_\" && stream.eat(\"_\"))\n                return chain(stream, state, twTokenUnderline);\n\n            // 上角标\n            if (ch == \"^\" && stream.eat(\"^\"))\n                return chain(stream, state, twSuperscript);\n\n            // 下角标\n            if (ch == \",\" && stream.eat(\",\"))\n                return chain(stream, state, twSubscript);\n\n            // 删除线\n            if (ch == \"~\" && stream.eat(\"~\")) {\n                return chain(stream, state, twTokenStrike);\n            }\n\n            // 粗体\n            if (ch == \"'\" && stream.eat(\"'\"))\n                return chain(stream, state, twTokenStrong);\n\n            // 宏\n            if (ch == \"<\" && stream.eat(\"<\"))\n                return chain(stream, state, twTokenMacro);\n\n            return null;\n        }\n\n        // 粗体\n        function twTokenStrong(stream, state) {\n            var maybeEnd = false,\n                ch;\n            while (ch = stream.next()) {\n                if (ch == \"'\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \"'\");\n            }\n            return \"strong\";\n        }\n\n        // `xx`等宽\n        function twTokenMonospace(stream, state) {\n            var ch;\n            while (ch = stream.next()) {\n                if (ch == \"`\") {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n            }\n            return \"comment\";\n        }\n\n        // 斜体\n        function twTokenEm(stream, state) {\n            var maybeEnd = false,\n                ch;\n            while (ch = stream.next()) {\n                if (ch == \"/\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \"/\");\n            }\n            return \"em\";\n        }\n\n        // 包含\n        function twTranslclude(stream, state) {\n            state.tokenize = function(stream_, state_) {\n                var ch;\n                while (ch = stream_.next()) {\n                    if (ch === \"}\" && stream_.peek() === \"}\") {\n                        stream_.backUp(1);\n                        state_.tokenize = function(stream__, state__) {\n                            stream__.match(\"}}\");\n                            state__.tokenize = tokenBase;\n                            return \"builtin\";\n                        };\n                        break;\n                    }\n                }\n                return \"builtin internallink\";\n            };\n            return \"builtin\";\n        }\n\n        // tw internal links\n        function twInternalLink(stream, state) {\n            // 开头 [[\n            if (stream.current() == '[[') {\n                state.pastDivider = false;\n                return 'link';\n            }\n            // 结尾 ]]\n            if (stream.peek() == ']') {\n                stream.next();\n                if (stream.next() == ']') {\n                    state.tokenize = tokenBase;\n                    return 'link';\n                }\n            }\n            var pastDivider = state.pastDivider,\n                ch;\n            while (ch = stream.peek()) {\n                if (!pastDivider && ch == '|') {\n                    stream.next();\n                    state.pastDivider = true;\n                    return 'internallink link';\n                }\n                if (ch == \"]\" && stream.peek() == \"]\") {\n                    return 'internallink link';\n                }\n                ch = stream.next();\n                if (/[hf]/i.test(ch) &&\n                    /[ti]/i.test(stream.peek()) &&\n                    stream.match(/\\b(ttps?|tp|ile):\\/\\/[\\-A-Z0-9+&@#\\/%?=~_|$!:,.;]*[A-Z0-9+&@#\\/%=~_|$]/i, true)) {\n                    return 'externallink link';\n                }\n                stream.eatWhile(/[^|\\]]/);\n            }\n            return null;\n        }\n\n        // tw underlined text\n        function twTokenUnderline(stream, state) {\n            var maybeEnd = false,\n                ch;\n            while (ch = stream.next()) {\n                if (ch == \"_\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \"_\");\n            }\n            return \"underlined\";\n        }\n\n        function twSubscript(stream, state) {\n            var maybeEnd = false,\n                ch;\n\n            while (ch = stream.next()) {\n                if (ch == \",\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \",\");\n            }\n            return \"string subscript\";\n        }\n\n        function twSuperscript(stream, state) {\n            var maybeEnd = false,\n                ch;\n\n            while (ch = stream.next()) {\n                if (ch == \"^\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \"^\");\n            }\n            return \"string superscript\";\n        }\n\n        function twTokenStrike(stream, state) {\n            var maybeEnd = false,\n                ch;\n\n            while (ch = stream.next()) {\n                if (ch == \"~\" && maybeEnd) {\n                    state.tokenize = tokenBase;\n                    break;\n                }\n                maybeEnd = (ch == \"~\");\n            }\n            return \"strikethrough\";\n        }\n\n        // LaTeX公式\n        function twTokenFormula(stream, state) {\n            state.tokenize = tokenBase;\n            var innerMode = modeCfg.fencedCodeBlockHighlighting && getMode(\"text/x-latex\");\n            state.LaTeXModeState = !innerMode ? 'unknown' : {\n                mode: innerMode,\n                state: CodeMirror.startState(innerMode),\n                start: state.line\n            };\n            return \"comment\";\n        }\n\n        function twTokenPre(stream, state, match) {\n            state.tokenize = function(stream_, state_) {\n                state_.tokenize = tokenBase;\n                var innerMode = modeCfg.fencedCodeBlockHighlighting &&\n                    getMode(match[1] || modeCfg.fencedCodeBlockDefaultMode);\n                state_.codeBlockModeState = !innerMode ? 'unknown' : {\n                    mode: innerMode,\n                    state: CodeMirror.startState(innerMode),\n                    start: state.line\n                };\n                if (match[1]) {\n                    stream_.skipToEnd();\n                    return \"tag\";\n                } else {\n                    return null;\n                }\n            };\n            stream.match('```');\n            return \"comment\";\n        }\n\n        function twTokenQuote(stream, state) {\n            var level = 1;\n            while (stream.match(reBlockQuote))\n                level++;\n            if (state.quoteLevel == level) {\n                state.quoteLevel--;\n            } else if (state.quoteLevel < level) {\n                state.quoteHead = true;\n                state.quoteLevel = level;\n                state.tokenize = function(stream_, state_) {\n                    state_.quoteHead = false;\n                    state_.tokenize = tokenBase;\n                    if (!stream_.sol()) {\n                        stream_.skipToEnd();\n                        return \"tag\";\n                    } else {\n                        return null;\n                    }\n                };\n            } else {\n                state.quoteLevel = level - 1;\n            }\n            return \"quote line-cm-quote-line\";\n        }\n\n        function twTokenMacro(stream, state) {\n            if (stream.current() == '<<') {\n                return 'macro';\n            }\n\n            var ch = stream.next();\n            if (!ch) {\n                state.tokenize = tokenBase;\n                return null;\n            }\n            if (ch == \">\") {\n                if (stream.peek() == '>') {\n                    stream.next();\n                    state.tokenize = tokenBase;\n                    return \"macro\";\n                }\n            }\n\n            stream.eatWhile(/[\\w\\$_]/);\n            return macroKeywords.propertyIsEnumerable(stream.current()) ? \"keyword\" : \"macro\";\n        }\n\n        // Interface\n        var mode = {\n            blankLine: function(stream) {\n                onNewLine(stream);\n                return \"\";\n            },\n            closeBrackets: \"()[]{}''\\\"\\\"``\",\n            startState: function() {\n                return {\n                    tokenize: tokenBase, // 当前解析器\n                    curStream: null,\n                    line: 0,\n                    quoteLevel: 0,\n                    quoteHead: false,\n                    listLevel: 0,\n                    boldLine: false,\n                    codeBlockModeState: null,\n                    LaTeXModeState: null\n                };\n            },\n            copyState: function(oldState) {\n                var newState = {};\n                for (var key in oldState) newState[key] = oldState[key];\n                if (oldState.codeBlockModeState && typeof oldState.codeBlockModeState == 'object')\n                    newState.codeBlockModeState = {\n                        mode: oldState.codeBlockModeState.mode,\n                        state: CodeMirror.copyState(oldState.codeBlockModeState.mode, oldState.codeBlockModeState.state),\n                        start: oldState.start\n                    };\n                if (oldState.LaTeXModeState)\n                    newState.LaTeXModeState = {\n                        mode: oldState.LaTeXModeState.mode,\n                        state: CodeMirror.copyState(oldState.LaTeXModeState.mode, oldState.LaTeXModeState.state),\n                        start: oldState.start\n                    };\n            },\n            token: function(stream, state) {\n                // 新的一行\n                if (stream != state.curStream) {\n                    onNewLine(state);\n                    state.curStream = stream;\n                }\n\n                // ```代码块\n                if (state.codeBlockModeState != null) {\n                    // 代码块的结束\n                    if (stream.match(rePreEnd)) {\n                        state.codeBlockModeState = null;\n                        return \"comment\";\n                    }\n                    if (typeof state.codeBlockModeState === \"string\") {\n                        stream.skipToEnd();\n                        return \"comment line-background-cm-code-block-line\";\n                    }\n                    // 否则，就是用对应的mode来做\n                    return state.codeBlockModeState.mode.token(stream, state.codeBlockModeState.state) + \" line-background-cm-code-block-line\";\n                }\n\n                // LaTeX公式块\n                if (state.LaTeXModeState != null) {\n                    // 公式块的结束\n                    if (stream.match('$$')) {\n                        state.LaTeXModeState = null;\n                        return \"comment\";\n                    }\n                    if (typeof state.LaTeXModeState === \"string\") {\n                        stream.skipToEnd();\n                        return \"comment latex\";\n                    }\n                    // 否则，就是用对应的mode来做\n                    return state.LaTeXModeState.mode.token(stream, state.LaTeXModeState.state) + \" latex\";\n                }\n\n                // 读掉空行 / 行末的空白\n                if (stream.match(/^\\s+$/, true) || stream.match(/\\s+$/, true)) return null;\n                else return state.tokenize(stream, state);\n            },\n            innerMode: function(state) {\n                if (state.codeBlockModeState != null && typeof state.codeBlockModeState === \"object\") {\n                    return state.codeBlockModeState;\n                }\n                if (state.LaTeXModeState != null && typeof state.LaTeXModeState === \"object\") {\n                    return state.LaTeXModeState;\n                }\n                return {\n                    state: state,\n                    mode: mode\n                };\n            },\n            indent: function(state, textAfter, line) {\n                if (state.codeBlockModeState != null &&\n                    typeof state.codeBlockModeState === \"object\" &&\n                    typeof state.codeBlockModeState.mode.indent == 'function') {\n                    return state.codeBlockModeState.mode.indent(state.codeBlockModeState.state, textAfter, line);\n                }\n                return CodeMirror.Pass;\n            },\n        };\n        return mode;\n    });\n\n    CodeMirror.defineMIME(\"text/vnd.tiddlywiki\", \"tiddlywiki5\");\n    CodeMirror.defineMIME(\"\", \"tiddlywiki5\");\n});\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tiddlywiki5.js","module-type":"codemirror","type":"application/javascript"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/style.css":{"text":".CodeMirror-hints {\n  /* Floating above tiddlers */\n  z-index: 800 !important;\n}\n\n.CodeMirror-hint {\n  width: 400px !important;\n}\n\nli.cm-hacked-hint {\n  display: flex;\n  justify-content: space-between;\n  white-space: nowrap;\n}\n\nli.cm-hacked-hint > span.hint-title {\n  overflow: hidden;\n  text-overflow: ellipsis;\n}\n\nli.cm-hacked-hint > span.hint-title > span.hint-title-highlighted {\n  background: yellow;\n}\n\nli.cm-hacked-hint > span.hint-type {\n  padding-left: 10px;\n  font-weight: bold;\n  opacity: 0.5;\n}\n\n.CodeMirror-hints-append {\n  max-height: 20em !important;\n  width: 300px !important;\n  color: black;\n  resize: both;\n}\n\nspan.cm-underlined {\n  text-decoration-line: underline;\n}\n\n/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\nspan.cm-superscript {\n  vertical-align: super;\n  font-size: 0.7em;\n  line-height: 0.1em;\n}\n\nspan.cm-subscript {\n  font-size: 0.7em;\n  line-height: 0.5;\n}\n\npre.cm-quote-line {\n  padding-left: 0.4em !important;\n  border-left: #444 solid 0.2em !important;\n}\n\n.cm-code-block-line,\n.latex {\n  background: rgba(0, 0, 0, 0.2);\n}\n\nspan.cm-h1 {\n  font-weight: 700;\n  font-size: 1.383em;\n  line-height: 1.802em;\n}\n\nspan.cm-h2 {\n  font-weight: 600;\n  font-size: 1.296em;\n  line-height: 1.602em;\n}\n\nspan.cm-h3 {\n  font-weight: 500;\n  font-size: 1.215em;\n  line-height: 1.424em;\n}\n\nspan.cm-h4 {\n  font-weight: 400;\n  font-size: 1.138em;\n  line-height: 1.266em;\n}\n\nspan.cm-h5 {\n  font-weight: 400;\n  font-size: 1.067em;\n  line-height: 1.125em;\n}\n\nspan.cm-h6 {\n  font-weight: 400;\n}\n\nspan.cm-link {\n  cursor: pointer;\n}\n\nspan.cm-internallink,\nspan.cm-externallink {\n  cursor: pointer;\n  font-weight: 800;\n}\n\nspan.cm-internallink {\n  text-decoration: none;\n}\n","type":"text/css","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/style.css","tags":"$:/tags/Stylesheet"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tex.js":{"text":"// CodeMirror, copyright (c) by Marijn Haverbeke and others\n// Distributed under an MIT license: https://codemirror.net/LICENSE\n\n/*\n * Author: Constantin Jucovschi (c.jucovschi@jacobs-university.de)\n * Licence: MIT\n */\n\n(function(mod) {\n    if (typeof exports == \"object\" && typeof module == \"object\") // CommonJS\n        mod(require(\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\"));\n    else if (typeof define == \"function\" && define.amd) // AMD\n        define([\"$:/plugins/tiddlywiki/codemirror/lib/codemirror.js\"], mod);\n    else // Plain browser env\n        mod(CodeMirror);\n})(function(CodeMirror) {\n    \"use strict\";\n\n    CodeMirror.defineMode(\"tex\", function(_config, parserConfig) {\n        function pushCommand(state, command) {\n            state.cmdState.push(command);\n        }\n\n        function peekCommand(state) {\n            if (state.cmdState.length > 0) {\n                return state.cmdState[state.cmdState.length - 1];\n            } else {\n                return null;\n            }\n        }\n\n        function popCommand(state) {\n            var plug = state.cmdState.pop();\n            if (plug) {\n                plug.closeBracket();\n            }\n        }\n\n        // returns the non-default plugin closest to the end of the list\n        function getMostPowerful(state) {\n            var context = state.cmdState;\n            for (var i = context.length - 1; i >= 0; i--) {\n                var plug = context[i];\n                if (plug.name == \"DEFAULT\") {\n                    continue;\n                }\n                return plug;\n            }\n            return {\n                styleIdentifier: function() {\n                    return null;\n                }\n            };\n        }\n\n        function addPluginPattern(pluginName, cmdStyle, styles) {\n            return function() {\n                this.name = pluginName;\n                this.bracketNo = 0;\n                this.style = cmdStyle;\n                this.styles = styles;\n                this.argument = null; // \\begin and \\end have arguments that follow. These are stored in the plugin\n\n                this.styleIdentifier = function() {\n                    return this.styles[this.bracketNo - 1] || null;\n                };\n                this.openBracket = function() {\n                    this.bracketNo++;\n                    return \"bracket\";\n                };\n                this.closeBracket = function() {};\n            };\n        }\n\n        var plugins = {};\n\n        plugins[\"importmodule\"] = addPluginPattern(\"importmodule\", \"tag\", [\"string\", \"builtin\"]);\n        plugins[\"documentclass\"] = addPluginPattern(\"documentclass\", \"tag\", [\"\", \"atom\"]);\n        plugins[\"usepackage\"] = addPluginPattern(\"usepackage\", \"tag\", [\"atom\"]);\n        plugins[\"begin\"] = addPluginPattern(\"begin\", \"tag\", [\"atom\"]);\n        plugins[\"end\"] = addPluginPattern(\"end\", \"tag\", [\"atom\"]);\n\n        plugins[\"label\"] = addPluginPattern(\"label\", \"tag\", [\"atom\"]);\n        plugins[\"ref\"] = addPluginPattern(\"ref\", \"tag\", [\"atom\"]);\n        plugins[\"eqref\"] = addPluginPattern(\"eqref\", \"tag\", [\"atom\"]);\n        plugins[\"cite\"] = addPluginPattern(\"cite\", \"tag\", [\"atom\"]);\n        plugins[\"bibitem\"] = addPluginPattern(\"bibitem\", \"tag\", [\"atom\"]);\n        plugins[\"Bibitem\"] = addPluginPattern(\"Bibitem\", \"tag\", [\"atom\"]);\n        plugins[\"RBibitem\"] = addPluginPattern(\"RBibitem\", \"tag\", [\"atom\"]);\n\n        plugins[\"DEFAULT\"] = function() {\n            this.name = \"DEFAULT\";\n            this.style = \"tag\";\n\n            this.styleIdentifier = this.openBracket = this.closeBracket = function() {};\n        };\n\n        function setState(state, f) {\n            state.f = f;\n        }\n\n        // called when in a normal (no environment) context\n        function normal(source, state) {\n            var plug;\n            // Do we look like '\\command' ?  If so, attempt to apply the plugin 'command'\n            if (source.match(/^\\\\[a-zA-Z@]+/)) {\n                var cmdName = source.current().slice(1);\n                plug = plugins.hasOwnProperty(cmdName) ? plugins[cmdName] : plugins[\"DEFAULT\"];\n                plug = new plug();\n                pushCommand(state, plug);\n                setState(state, beginParams);\n                return plug.style;\n            }\n\n            // escape characters\n            if (source.match(/^\\\\[$&%#{}_]/)) {\n                return \"tag\";\n            }\n\n            // white space control characters\n            if (source.match(/^\\\\[,;!\\/\\\\]/)) {\n                return \"tag\";\n            }\n\n            // find if we're starting various math modes\n            if (source.match(\"\\\\[\")) {\n                setState(state, function(source, state) {\n                    return inMathMode(source, state, \"\\\\]\");\n                });\n                return \"keyword\";\n            }\n            if (source.match(\"\\\\(\")) {\n                setState(state, function(source, state) {\n                    return inMathMode(source, state, \"\\\\)\");\n                });\n                return \"keyword\";\n            }\n            if (source.match(\"$$\")) {\n                setState(state, function(source, state) {\n                    return inMathMode(source, state, \"$$\");\n                });\n                return \"keyword\";\n            }\n            if (source.match(\"$\")) {\n                setState(state, function(source, state) {\n                    return inMathMode(source, state, \"$\");\n                });\n                return \"keyword\";\n            }\n\n            var ch = source.next();\n            if (ch == \"%\") {\n                source.skipToEnd();\n                return \"comment\";\n            } else if (ch == '}' || ch == ']') {\n                plug = peekCommand(state);\n                if (plug) {\n                    plug.closeBracket(ch);\n                    setState(state, beginParams);\n                } else {\n                    return \"error\";\n                }\n                return \"bracket\";\n            } else if (ch == '{' || ch == '[') {\n                plug = plugins[\"DEFAULT\"];\n                plug = new plug();\n                pushCommand(state, plug);\n                return \"bracket\";\n            } else if (/\\d/.test(ch)) {\n                source.eatWhile(/[\\w.%]/);\n                return \"atom\";\n            } else {\n                source.eatWhile(/[\\w\\-_]/);\n                plug = getMostPowerful(state);\n                if (plug.name == 'begin') {\n                    plug.argument = source.current();\n                }\n                return plug.styleIdentifier();\n            }\n        }\n\n        function inMathMode(source, state, endModeSeq) {\n            if (source.eatSpace()) {\n                return null;\n            }\n            if (endModeSeq && source.match(endModeSeq)) {\n                setState(state, normal);\n                return \"keyword\";\n            }\n            if (source.match(/^\\\\[a-zA-Z@]+/)) {\n                return \"tag\";\n            }\n            if (source.match(/^[a-zA-Z]+/)) {\n                return \"variable-2\";\n            }\n            // escape characters\n            if (source.match(/^\\\\[$&%#{}_]/)) {\n                return \"tag\";\n            }\n            // white space control characters\n            if (source.match(/^\\\\[,;!\\/]/)) {\n                return \"tag\";\n            }\n            // special math-mode characters\n            if (source.match(/^[\\^_&]/)) {\n                return \"tag\";\n            }\n            // non-special characters\n            if (source.match(/^[+\\-<>|=,\\/@!*:;'\"`~#?]/)) {\n                return null;\n            }\n            if (source.match(/^(\\d+\\.\\d*|\\d*\\.\\d+|\\d+)/)) {\n                return \"number\";\n            }\n            var ch = source.next();\n            if (ch == \"{\" || ch == \"}\" || ch == \"[\" || ch == \"]\" || ch == \"(\" || ch == \")\") {\n                return \"bracket\";\n            }\n\n            if (ch == \"%\") {\n                source.skipToEnd();\n                return \"comment\";\n            }\n            return \"error\";\n        }\n\n        function beginParams(source, state) {\n            var ch = source.peek(),\n                lastPlug;\n            if (ch == '{' || ch == '[') {\n                lastPlug = peekCommand(state);\n                lastPlug.openBracket(ch);\n                source.eat(ch);\n                setState(state, normal);\n                return \"bracket\";\n            }\n            if (/[ \\t\\r]/.test(ch)) {\n                source.eat(ch);\n                return null;\n            }\n            setState(state, normal);\n            popCommand(state);\n\n            return normal(source, state);\n        }\n\n        return {\n            startState: function() {\n                var f = parserConfig.inMathMode ? function(source, state) {\n                    return inMathMode(source, state);\n                } : normal;\n                return {\n                    cmdState: [],\n                    f: f\n                };\n            },\n            copyState: function(s) {\n                return {\n                    cmdState: s.cmdState.slice(),\n                    f: s.f\n                };\n            },\n            token: function(stream, state) {\n                return state.f(stream, state);\n            },\n            blankLine: function(state) {\n                state.f = normal;\n                state.cmdState.length = 0;\n            },\n            lineComment: \"%\"\n        };\n    });\n\n    CodeMirror.defineMIME(\"text/x-stex\", \"tex\");\n    CodeMirror.defineMIME(\"text/x-latex\", \"tex\");\n});\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/mode/tex.js","module-type":"codemirror"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/readme":{"text":"<$wikify name=\"rendered\" text={{{[cmei18n[readme]]}}} output=html><<rendered>></$wikify>\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/readme"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/LICENSE":{"text":"MIT License\n\nCopyright (c) 2021 Ke Wang (Gk0Wk in GitHub)\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/LICENSE"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/core.js":{"text":"var CodeMirrorEnhanced = (function (CodeMirror) {\n    'use strict';\n\n    function _interopNamespace(e) {\n        if (e && e.__esModule) return e;\n        var n = Object.create(null);\n        if (e) {\n            Object.keys(e).forEach(function (k) {\n                if (k !== 'default') {\n                    var d = Object.getOwnPropertyDescriptor(e, k);\n                    Object.defineProperty(n, k, d.get ? d : {\n                        enumerable: true,\n                        get: function () { return e[k]; }\n                    });\n                }\n            });\n        }\n        n[\"default\"] = e;\n        return Object.freeze(n);\n    }\n\n    var CodeMirror__namespace = /*#__PURE__*/_interopNamespace(CodeMirror);\n\n    function loadTiddler(tiddler) {\n        try {\n            switch ($tw.wiki.getTiddler(tiddler).fields.type) {\n                case 'application/javascript':\n                    // eslint-disable-next-line security-node/detect-non-literal-require-calls, security/detect-non-literal-require\n                    return require(tiddler);\n                case 'application/json':\n                    return JSON.parse($tw.wiki.getTiddlerText(tiddler));\n                case 'application/x-tiddler-dictionary':\n                    return $tw.utils.parseFields($tw.wiki.getTiddlerText(tiddler));\n                default:\n                    return undefined;\n            }\n        }\n        catch (error) {\n            console.error(error);\n            return undefined;\n        }\n    }\n\n    function getOriginalShadowTiddler(tiddler) {\n        var source = $tw.wiki.getShadowSource(tiddler);\n        if (source === undefined)\n            return undefined;\n        var plugin = $tw.wiki.getPluginInfo(source);\n        if (plugin === undefined)\n            return undefined;\n        return plugin.tiddlers[tiddler];\n    }\n    function isOverrideCMEShadowTiddler(tiddler) {\n        return $tw.wiki.filterTiddlers('[field:title[$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json]is[shadow]]').length > 0;\n    }\n    function getOverridei18nShadowTiddler() {\n        return $tw.wiki.filterTiddlers('[!field:cmei18n[]!is[draft]is[shadow]]');\n    }\n    function mergeShadowAndTiddler(tiddler) {\n        // Get Override Shadow Tiddler\n        var overrideTiddlerObject = loadTiddler(tiddler);\n        if (overrideTiddlerObject === undefined)\n            $tw.wiki.deleteTiddler(tiddler);\n        // Get Original Shadow Tiddler\n        var plugin = $tw.wiki.getPluginInfo('$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced');\n        var shadowTiddlerObject;\n        try {\n            shadowTiddlerObject = JSON.parse(plugin.tiddlers[tiddler].text);\n        }\n        catch (error) {\n            console.error(error);\n            return undefined;\n        }\n        // Merge tiddler: shadow <- override\n        return new $tw.Tiddler($tw.wiki.getCreationFields(), $tw.wiki.getPluginInfo('$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced').tiddlers[tiddler], $tw.wiki.getTiddler(tiddler), {\n            text: JSON.stringify(Object.assign(shadowTiddlerObject, overrideTiddlerObject), null, 4),\n        }, $tw.wiki.getModificationFields());\n    }\n    function checkIncomingTiddler(tiddler) {\n        var temporaryTiddler = tiddler;\n        if (temporaryTiddler.fields.title !== undefined &&\n            (temporaryTiddler.fields.title === '$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json' || temporaryTiddler.fields.cmei18n !== undefined))\n            temporaryTiddler = mergeShadowAndTiddler(tiddler.fields.title);\n        return temporaryTiddler;\n    }\n    function init$5() {\n        // Merge config file\n        if (isOverrideCMEShadowTiddler()) {\n            var mergedTiddler = mergeShadowAndTiddler('$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json');\n            if (mergedTiddler !== undefined)\n                $tw.wiki.addTiddler(mergedTiddler);\n            else\n                $tw.wiki.deleteTiddler('$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json');\n        }\n        // Merge i18n files\n        for (var _i = 0, _a = getOverridei18nShadowTiddler(); _i < _a.length; _i++) {\n            var i18nShadowTiddler = _a[_i];\n            var mergedTiddler = mergeShadowAndTiddler(i18nShadowTiddler);\n            if (mergedTiddler !== undefined)\n                $tw.wiki.addTiddler(mergedTiddler);\n            else\n                $tw.wiki.deleteTiddler(i18nShadowTiddler);\n        }\n        $tw.hooks.addHook('th-saving-tiddler', checkIncomingTiddler);\n        $tw.hooks.addHook('th-importing-tiddler', checkIncomingTiddler);\n        return {\n            getOriginalShadowTiddler: getOriginalShadowTiddler,\n            isOverrideCMEShadowTiddler: isOverrideCMEShadowTiddler,\n        };\n    }\n\n    var activatedEditor;\n    function currentEditor() {\n        if (activatedEditor === undefined)\n            return undefined;\n        var wrapper = activatedEditor.getWrapperElement();\n        if (!wrapper.ownerDocument.contains(wrapper))\n            activatedEditor = undefined;\n        return activatedEditor;\n    }\n    function insertToCurrentEditor(text) {\n        var editor = currentEditor();\n        if (editor === undefined)\n            return false;\n        editor.replaceRange(text, editor.getCursor(), editor.getCursor(), 'input');\n        return true;\n    }\n    function getCurrentSelections() {\n        var editor = currentEditor();\n        if (editor === undefined)\n            return [];\n        return editor.getSelections();\n    }\n    function replaceCurrentSelections(textArray) {\n        var editor = currentEditor();\n        if (editor === undefined)\n            return;\n        editor.replaceSelections(textArray);\n    }\n    function init$4() {\n        // When new editor instance is created, update addons and hook service\n        CodeMirror__namespace.defineInitHook(function (editor) {\n            editor.on('focus', function (editor_) {\n                activatedEditor = editor_;\n            });\n        });\n        return {\n            currentEditor: currentEditor,\n            insertToCurrentEditor: insertToCurrentEditor,\n            getCurrentSelections: getCurrentSelections,\n            replaceCurrentSelections: replaceCurrentSelections,\n        };\n    }\n\n    var InnerService = /** @class */ (function () {\n        function InnerService(bald) {\n            this.name = bald.name;\n            this.tag = bald.tag !== undefined ? bald.tag : undefined;\n            this.onLoad = bald.onLoad;\n            this.onHook = bald.onHook;\n            this.addons = {};\n            this.isLoad = false;\n            this.lastAddonsUpdateTime = new Date(0);\n        }\n        return InnerService;\n    }());\n    var services = {};\n    var api$1 = {};\n    function updateService() {\n        for (var name_1 in services) {\n            var service = services[name_1];\n            // Update add-ons\n            if (service.tag === undefined)\n                return;\n            var tiddlers = $tw.wiki.filterTiddlers(\"[all[tiddlers+shadows]tag[\" + service.tag + \"]!is[draft]]\");\n            // register each existing addon tiddler\n            for (var index = 0, length_1 = tiddlers.length; index < length_1; index++) {\n                var tiddler = tiddlers[index];\n                if (!(tiddler in service.addons)) {\n                    // load add-on not loaded before\n                    var addon = loadTiddler(tiddler);\n                    if (addon !== undefined)\n                        service.addons[tiddler] = addon;\n                }\n                else {\n                    // reload add-on updated after last check\n                    var tiddlerData = $tw.wiki.getTiddler(tiddler);\n                    if (tiddlerData !== undefined &&\n                        ((tiddlerData.fields.modified !== undefined && tiddlerData.fields.modified >= service.lastAddonsUpdateTime) ||\n                            (tiddlerData.fields.created !== undefined && tiddlerData.fields.created >= service.lastAddonsUpdateTime))) {\n                        var addon = loadTiddler(tiddler);\n                        if (addon !== undefined)\n                            service.addons[tiddler] = addon;\n                        // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                        else\n                            delete service.addons[tiddler];\n                    }\n                }\n            }\n            // Unregister tiddlers already without tag\n            for (var tiddler in service.addons) {\n                if (!tiddlers.includes(tiddler)) {\n                    // eslint-disable-next-line @typescript-eslint/no-dynamic-delete\n                    delete service.addons[tiddler];\n                }\n            }\n            // Update add-on update time\n            service.lastAddonsUpdateTime = new Date();\n        }\n    }\n    function registerService(service) {\n        services[service.name] = new InnerService(service);\n        if (service.api !== undefined)\n            api$1[service.name] = service.api;\n    }\n    function getAddons(name) {\n        return services[name].addons;\n    }\n    function init$3(cme) {\n        // When new editor instance is created, update addons and hook service\n        CodeMirror__namespace.defineInitHook(function (editor) {\n            updateService();\n            for (var name_2 in services) {\n                var service = services[name_2];\n                if (!service.isLoad)\n                    service.onLoad(cme);\n                service.onHook(editor, cme);\n            }\n        });\n        return api$1;\n    }\n\n    function getOption(key) {\n        return $tw.wiki.filterTiddlers(\"[[$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json]getindex[\" + key + \"]]\")[0];\n    }\n    function getBoolean(key, defaultValue) {\n        var optionText = getOption(key);\n        return optionText !== undefined ? optionText.toLowerCase() === 'true' : defaultValue;\n    }\n    var Options = /** @class */ (function () {\n        function Options() {\n        }\n        Object.defineProperty(Options, \"clickableService\", {\n            get: function () {\n                return getBoolean('clickable-links', false);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Options, \"realtimeHint\", {\n            get: function () {\n                return getBoolean('realtime-hint', false);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        Object.defineProperty(Options, \"hintPreview\", {\n            get: function () {\n                return getBoolean('hint-preview', false);\n            },\n            enumerable: false,\n            configurable: true\n        });\n        return Options;\n    }());\n\n    var functionKey = /macintosh|mac os x/i.test(navigator.userAgent) ? 'metaKey' : 'ctrlKey';\n    function init$2() {\n        registerService({\n            name: 'ClickableToken',\n            tag: '$:/CodeMirrorEnhanced/ClickableToken',\n            onLoad: function (cme) {\n                // Do nothing\n            },\n            onHook: function (editor, cme) {\n                editor.on('mousedown', function (cm, event) {\n                    if (event[functionKey] && Options.clickableService) {\n                        var addons = getAddons('ClickableToken');\n                        for (var key in addons) {\n                            if (addons[key].handler(editor, event, cme))\n                                break;\n                        }\n                    }\n                });\n            },\n        });\n    }\n\n    /*! *****************************************************************************\r\n    Copyright (c) Microsoft Corporation.\r\n\r\n    Permission to use, copy, modify, and/or distribute this software for any\r\n    purpose with or without fee is hereby granted.\r\n\r\n    THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\n    REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\n    AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\n    INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\n    LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\n    OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\n    PERFORMANCE OF THIS SOFTWARE.\r\n    ***************************************************************************** */\r\n\r\n    function __awaiter(thisArg, _arguments, P, generator) {\r\n        function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n        return new (P || (P = Promise))(function (resolve, reject) {\r\n            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n            function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n            function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n            step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n        });\r\n    }\r\n\r\n    function __generator(thisArg, body) {\r\n        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n        return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n        function verb(n) { return function (v) { return step([n, v]); }; }\r\n        function step(op) {\r\n            if (f) throw new TypeError(\"Generator is already executing.\");\r\n            while (_) try {\r\n                if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n                if (y = 0, t) op = [op[0] & 2, t.value];\r\n                switch (op[0]) {\r\n                    case 0: case 1: t = op; break;\r\n                    case 4: _.label++; return { value: op[1], done: false };\r\n                    case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                    case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                    default:\r\n                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                        if (t[2]) _.ops.pop();\r\n                        _.trys.pop(); continue;\r\n                }\r\n                op = body.call(thisArg, _);\r\n            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n        }\r\n    }\n\n    function globalHintRender(hintNode, hints, currentHint) {\n        var _a, _b, _c, _d;\n        var ownerDocument = hintNode.ownerDocument;\n        // Render (left side) [title]\n        var titlePartNode = ownerDocument.createElement('span');\n        hintNode.append(titlePartNode);\n        titlePartNode.className = 'hint-title';\n        if (currentHint.render_ !== undefined) {\n            currentHint.render_(titlePartNode, hints, currentHint);\n        }\n        else {\n            var text_1 = (_b = (_a = currentHint.displayText) !== null && _a !== void 0 ? _a : currentHint.text) !== null && _b !== void 0 ? _b : '';\n            if (currentHint.hintMatch !== undefined) {\n                var textList_1 = [];\n                try {\n                    currentHint.hintMatch.sort(function (a, b) {\n                        return a.from - b.from;\n                    });\n                    var pointer_1 = 0;\n                    currentHint.hintMatch.forEach(function (range) {\n                        if (range.from > pointer_1) {\n                            textList_1.push(text_1.substring(pointer_1, range.from));\n                        }\n                        pointer_1 = range.to;\n                        textList_1.push(\"<span class=\\\"hint-title-highlighted\\\">\" + text_1.substring(range.from, pointer_1) + \"</span>\");\n                    });\n                    if (text_1.length > pointer_1)\n                        textList_1.push(text_1.substring(pointer_1));\n                    text_1 = textList_1.join('');\n                }\n                catch (_e) {\n                    text_1 = (_d = (_c = currentHint.displayText) !== null && _c !== void 0 ? _c : currentHint.text) !== null && _d !== void 0 ? _d : '';\n                }\n            }\n            titlePartNode.innerHTML = text_1;\n        }\n        // Render (right side) [type]\n        var typeString = currentHint.type;\n        if (typeString !== undefined) {\n            var typePartNode = ownerDocument.createElement('span');\n            hintNode.append(typePartNode);\n            typePartNode.className = 'hint-type';\n            typePartNode.append(ownerDocument.createTextNode(typeString));\n        }\n    }\n    function init$1() {\n        var _this = this;\n        registerService({\n            name: 'RealtimeHint',\n            tag: '$:/CodeMirrorEnhanced/RealtimeHint',\n            onLoad: function (cme) {\n                CodeMirror__namespace.registerHelper('hint', 'tiddlywiki5', function (editor, options) { return __awaiter(_this, void 0, void 0, function () {\n                    var addons, getHintAsyncTasks, _loop_1, addonTiddler, hintsList, result_1, previewBoxNode_1, closePreview_1, error_1;\n                    return __generator(this, function (_a) {\n                        switch (_a.label) {\n                            case 0:\n                                _a.trys.push([0, 2, , 3]);\n                                addons = getAddons('RealtimeHint');\n                                getHintAsyncTasks = [];\n                                _loop_1 = function (addonTiddler) {\n                                    var addon = addons[addonTiddler];\n                                    getHintAsyncTasks.push(new Promise(function (resolve) {\n                                        // TODO: do some check here to make sure it is HintAddon\n                                        var hintAddon = addon;\n                                        try {\n                                            var hints_1 = hintAddon.hint(editor, options, cme);\n                                            var tmplist_1 = [];\n                                            var minPos_1 = editor.getCursor();\n                                            if (typeof hints_1 === 'object') {\n                                                if (hints_1.from !== undefined && CodeMirror__namespace.cmpPos(minPos_1, hints_1.from) > 0)\n                                                    minPos_1 = hints_1.from;\n                                                hints_1.list.forEach(function (hint) {\n                                                    if (typeof hint === 'string') {\n                                                        if (hints_1.from !== undefined && hints_1.to !== undefined)\n                                                            tmplist_1.push({\n                                                                text: hint,\n                                                                from: hints_1.from,\n                                                                to: hints_1.to,\n                                                                render_: hints_1.render,\n                                                                render: globalHintRender,\n                                                                renderPreview: hints_1.renderPreview,\n                                                                hint: hints_1.hint,\n                                                                type: hints_1.type,\n                                                                className: 'cm-hacked-hint',\n                                                            });\n                                                    }\n                                                    else {\n                                                        var _from = hint.from === undefined ? hints_1.from : hint.from;\n                                                        var _to = hint.to === undefined ? hints_1.to : hint.to;\n                                                        if (_from !== undefined && _to !== undefined)\n                                                            tmplist_1.push({\n                                                                text: hint.text,\n                                                                displayText: hint.displayText,\n                                                                from: _from,\n                                                                to: _to,\n                                                                render_: hint.render === undefined ? hints_1.render : hint.render,\n                                                                render: globalHintRender,\n                                                                renderPreview: hint.renderPreview === undefined ? hints_1.renderPreview : hint.renderPreview,\n                                                                hintMatch: hint.hintMatch === undefined ? hints_1.hintMatch : hint.hintMatch,\n                                                                hint: hint.hint === undefined ? hints_1.hint : hint.hint,\n                                                                type: hint.type === undefined ? hints_1.type : hint.type,\n                                                                renderCache: hint.renderCache,\n                                                                className: 'cm-hacked-hint',\n                                                            });\n                                                        if (hint.from !== undefined && CodeMirror__namespace.cmpPos(minPos_1, hint.from) > 0)\n                                                            minPos_1 = hint.from;\n                                                    }\n                                                });\n                                            }\n                                            resolve({\n                                                from: minPos_1,\n                                                list: tmplist_1,\n                                                to: editor.getCursor(),\n                                            });\n                                        }\n                                        catch (error) {\n                                            console.error(\"Error occured by tiddler \" + addonTiddler + \":\");\n                                            console.error(error);\n                                            // eslint-disable-next-line unicorn/no-useless-undefined\n                                            resolve(undefined);\n                                        }\n                                    }));\n                                };\n                                for (addonTiddler in addons) {\n                                    _loop_1(addonTiddler);\n                                }\n                                return [4 /*yield*/, Promise.all(getHintAsyncTasks)];\n                            case 1:\n                                hintsList = _a.sent();\n                                result_1 = {\n                                    from: editor.getCursor(),\n                                    list: [],\n                                    to: editor.getCursor(),\n                                };\n                                hintsList.forEach(function (hints) {\n                                    if (hints === undefined)\n                                        return;\n                                    hints.list.forEach(function (hint) {\n                                        result_1.list.push(hint);\n                                    });\n                                    if (CodeMirror__namespace.cmpPos(result_1.from, hints.from) > 0)\n                                        result_1.from = hints.from;\n                                });\n                                closePreview_1 = function () {\n                                    var _a;\n                                    if (((_a = previewBoxNode_1 === null || previewBoxNode_1 === void 0 ? void 0 : previewBoxNode_1.ownerDocument.body) === null || _a === void 0 ? void 0 : _a.contains(previewBoxNode_1)) === true)\n                                        previewBoxNode_1 === null || previewBoxNode_1 === void 0 ? void 0 : previewBoxNode_1.remove();\n                                };\n                                if (result_1.list.length > 0) {\n                                    // perform action to dom node when a hint is selected\n                                    CodeMirror__namespace.on(result_1, 'select', function (selectedData_, selectedNode_) {\n                                        var selectedData = selectedData_;\n                                        var selectedNode = selectedNode_;\n                                        if (Options.hintPreview) {\n                                            var parentNode = selectedNode.parentNode;\n                                            var appendId = parentNode.id + '-hint-append';\n                                            previewBoxNode_1 = selectedNode.ownerDocument.querySelector(\"#\" + appendId);\n                                            var shouldCreate = previewBoxNode_1 === null || previewBoxNode_1 === undefined;\n                                            if (shouldCreate) {\n                                                previewBoxNode_1 = selectedNode.ownerDocument.createElement('div');\n                                                previewBoxNode_1.id = appendId;\n                                                previewBoxNode_1.className =\n                                                    'CodeMirror-hints CodeMirror-hints-append ' + (editor.getOption('theme') === undefined ? '' : editor.getOption('theme'));\n                                                previewBoxNode_1.style.left = parentNode.offsetLeft + parentNode.offsetWidth + \"px\";\n                                                previewBoxNode_1.style.top = parentNode.offsetTop + \"px\";\n                                            }\n                                            var shouldDisplay = false;\n                                            try {\n                                                if (typeof selectedData.renderCache === 'string') {\n                                                    previewBoxNode_1.innerHTML = selectedData.renderCache;\n                                                    shouldDisplay = true;\n                                                }\n                                                else if (typeof selectedData.renderPreview === 'function') {\n                                                    shouldDisplay = selectedData.renderPreview(previewBoxNode_1, selectedData, selectedNode);\n                                                    if (shouldDisplay && previewBoxNode_1.innerHTML.trim() === '')\n                                                        shouldDisplay = false;\n                                                }\n                                            }\n                                            catch (error) {\n                                                previewBoxNode_1.textContent = String(error);\n                                                console.error(error);\n                                            }\n                                            if (shouldDisplay) {\n                                                if (shouldCreate) {\n                                                    CodeMirror__namespace.on(result_1, 'close', closePreview_1);\n                                                    CodeMirror__namespace.on(editor, 'endCompletion', closePreview_1);\n                                                    var closingOnBlur_1;\n                                                    editor.on('blur', function () {\n                                                        closingOnBlur_1 = setTimeout(closePreview_1, 100);\n                                                    });\n                                                    editor.on('focus', function () { return clearTimeout(closingOnBlur_1); });\n                                                    selectedNode.ownerDocument.body.append(previewBoxNode_1);\n                                                }\n                                            }\n                                            else if (selectedNode.ownerDocument.body.contains(previewBoxNode_1))\n                                                previewBoxNode_1 === null || previewBoxNode_1 === void 0 ? void 0 : previewBoxNode_1.remove();\n                                        }\n                                    });\n                                }\n                                else {\n                                    // If empty, close previous preview box.\n                                    closePreview_1();\n                                }\n                                return [2 /*return*/, result_1];\n                            case 2:\n                                error_1 = _a.sent();\n                                console.error(error_1);\n                                // eslint-disable-next-line unicorn/no-null\n                                return [2 /*return*/, null];\n                            case 3: return [2 /*return*/];\n                        }\n                    });\n                }); });\n            },\n            onHook: function (editor, cme) {\n                // Hint when text change\n                editor.on('change', function (cm, event) {\n                    // Check if hint is open and hint function exists\n                    // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access\n                    if (cm.state.completeActive && typeof cm.showHint !== 'function')\n                        return;\n                    // Check if auto hint switch on\n                    if (!Options.realtimeHint)\n                        return;\n                    // If user type something\n                    if (event.origin === '+input') {\n                        if (cm.getDoc().modeOption === 'text/vnd.tiddlywiki') {\n                            // Check if cursor point to any stop words\n                            // If writting tw text\n                            if (/[,;]$/.test(event.text[0]))\n                                return;\n                        }\n                        else {\n                            // If writting other text\n                            if (/[(),;[\\]{}]$/.test(event.text[0]))\n                                return;\n                        }\n                        // Check if just break the line\n                        if (event.text[0].trim() === '') {\n                            if (event.text.length > 1) {\n                                if (event.text[1].trim() === '')\n                                    return;\n                            }\n                            else\n                                return;\n                        }\n                    }\n                    // If user delete something\n                    else if (event.origin === '+delete') {\n                        // If delete nothing or to much thing(2+ lines)\n                        if (event.removed === undefined || event.removed.length > 2 || event.removed[0] === '')\n                            return;\n                        // If cursor point to the line head\n                        if (event.to.ch < 2)\n                            return;\n                        // If text of line before the cursor is blank\n                        var theLine = cm.getDoc().getLine(event.to.line);\n                        if (theLine.length === 0 || theLine.substr(0, event.to.ch - 1).trim() === '')\n                            return;\n                    }\n                    else {\n                        // paste cut undo\n                        return;\n                    }\n                    // If not above, show hint\n                    cm.showHint({\n                        // If there is oly one hint suggestion, don't complete automatically, or can be awful.\n                        completeSingle: false,\n                        // Close when pick one of hints\n                        closeOnPick: true,\n                    });\n                });\n            },\n            api: {\n                makeLiteralHintMatch: function (text, search, times) {\n                    var hintMatch = [];\n                    if (times === 0 || text.length === 0 || search.length === 0)\n                        return hintMatch;\n                    var counter = 0;\n                    var to = 0;\n                    // eslint-disable-next-line no-unmodified-loop-condition\n                    while (times === undefined || counter++ < times) {\n                        var from = text.indexOf(search, to);\n                        if (from < 0)\n                            break;\n                        to = from + search.length;\n                        hintMatch.push({ from: from, to: to });\n                    }\n                    return hintMatch;\n                },\n            },\n        });\n    }\n\n    function getSnippetsList() {\n        return getAddons('SnippetsList');\n    }\n    function init() {\n        registerService({\n            name: 'SnippetsList',\n            tag: '$:/CodeMirrorEnhanced/SnippetsList',\n            onLoad: function (cme) {\n                // Do nothing\n            },\n            onHook: function (editor, cme) {\n                // Do nothing\n            },\n            api: {\n                getSnippetsList: getSnippetsList,\n            },\n        });\n    }\n\n    // CodeMirror\n    var api = {};\n    api.CodeMirror = CodeMirror__namespace;\n    api.tiddlerMerge = init$5();\n    api.editor = init$4();\n    api.service = init$3(api);\n    init$2();\n    init$1();\n    init();\n    // Get global\n    var selfGlobal = (window === undefined ? globalThis : window);\n    selfGlobal.$cme = api;\n\n    return api;\n\n})(CodeMirror);\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/core.js","module-type":"codemirror"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-tiddler.js":{"text":"/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\n(function(mod) {\n    if (typeof exports === 'object' && typeof module === 'object')\n        // CommonJS\n        module.exports = mod();\n    else if (typeof define === 'function' && define.amd)\n        // AMD\n        define([], mod);\n    // Plain browser env\n    else mod();\n})(function() {\n    'use strict';\n\n    function hintTiddler(editor, options, cme) {\n        const current = editor.getCursor();\n        var currentLine = editor.getLine(current.line);\n        var pointer = current.ch;\n        var end = current.ch;\n        var max_length = 30;\n\n        // wikilink match\n        // look forward from cursor to [{|\"\n        // if meet ]}.> or line head, stop\n        var escapeChars = ['.', ']', '}', '>'];\n        var stopChars = ['[', '{', '|', '\"'];\n        while (pointer) {\n            var ch = currentLine.charAt(pointer - 1);\n            if (end - pointer > max_length || escapeChars.includes(ch)) {\n                return undefined;\n            }\n            if (!stopChars.includes(ch)) {\n                pointer--;\n            } else {\n                break;\n            }\n        }\n        if (pointer == 0) return undefined;\n        var curWord = pointer !== end && currentLine.slice(pointer, end);\n\n        var tiddlerList = [];\n        var filteredTiddler =\n            currentLine.charAt(pointer) === '$' ?\n            $tw.wiki.filterTiddlers('[all[tiddlers]search:title:literal[' + curWord + ']!prefix[$:/state]]') :\n            $tw.wiki.filterTiddlers('[all[tiddlers]!is[system]search:title:literal[' + curWord + ']!prefix[$:/state]]');\n        filteredTiddler.forEach(function(tiddler) {\n            tiddlerList.push({\n                text: tiddler,\n                hintMatch: cme.service.RealtimeHint.makeLiteralHintMatch(tiddler, curWord),\n            });\n        });\n\n        return {\n            from: cme.CodeMirror.Pos(current.line, pointer),\n            to: cme.CodeMirror.Pos(current.line, end),\n            renderPreview: function(domNode, selectedData, selectedNode) {\n                selectedNode.renderCache = domNode.innerHTML = $tw.wiki.renderTiddler('text/html', selectedData.text);\n                return true;\n            },\n            type: 'tiddler',\n            list: tiddlerList,\n        };\n    }\n\n    return {\n        hint: hintTiddler,\n    };\n});\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-tiddler.js","tags":"$:/CodeMirrorEnhanced/RealtimeHint","module-type":"library"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-snippet.js":{"text":"(function (mod) {\n  if (typeof exports === 'object' && typeof module === 'object')\n    // CommonJS\n    module.exports = mod();\n  else if (typeof define === 'function' && define.amd)\n    // AMD\n    define(mod);\n  // Plain browser env\n  else mod();\n})(function () {\n  'use strict';\n\n  function getSnippetName(tiddler) {\n    let name = tiddler.fields['snippet-name'];\n    if (!name) {\n      const splits = tiddler.fields.title.split('/');\n      name = splits[splits.length - 1];\n    }\n    return name;\n  }\n\n  function hintSnippet(editor, options, cme) {\n    const current = editor.getCursor();\n    const currentLine = editor.getLine(current.line);\n    let pointer = current.ch;\n    const end = current.ch;\n    const max_length = 30;\n\n    // Match /xxxx\n    while (pointer) {\n      const ch = currentLine.charAt(pointer - 1);\n      if (end - pointer > max_length && !/[\\w./\\-]/i.test(ch)) {\n        return undefined;\n      }\n      if (ch !== '/') {\n        pointer--;\n      } else {\n        break;\n      }\n    }\n    if (pointer == 0) return undefined;\n    const currentWord = currentLine.slice(pointer, end);\n\n    const hints = [];\n    /** $:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/snippetslist/tw5-snippets.json: (7) [{…}, {…}, {…}, {…}, {…}, {…}, {…}] */\n    const snippetsList = cme.service.SnippetsList.getSnippetsList();\n    Object.entries(cme.service.SnippetsList.getSnippetsList()).forEach(([snippetFileName, snippets]) => {\n      snippets.forEach((snippet) => {\n        try {\n          if (snippet.id.includes(currentWord)) {\n            if (snippet.i18n) {\n              // cannot use ... syntax here, for backward compatibility\n              snippet = Object.assign(snippet, {\n                name: $tw.wiki.filterTiddlers(`[cmei18n[${snippet.name}]]`)[0],\n                preview: $tw.wiki.filterTiddlers(`[cmei18n[${snippet.preview}]]`)[0],\n              });\n            }\n            const displayText = snippet.name + \"  /\" + snippet.id;\n            hints.push({\n              /** pass full snippet object to hint service */\n              text: snippet,\n              displayText: displayText,\n              hintMatch: cme.service.RealtimeHint.makeLiteralHintMatch(displayText, currentWord),\n            });\n          }\n        } catch (error) {\n          console.error(error);\n        }\n      });\n    });\n\n    // Load tw5 snippet\n    $tw.wiki.filterTiddlers('[all[tiddlers+shadows]tag[$:/tags/TextEditor/Snippet]]').forEach(function (snippetTiddler) {\n      const snippet = $tw.wiki.getTiddler(snippetTiddler);\n      const name = getSnippetName(snippet);\n      if (name.includes(currentWord)) {\n        hints.push({\n          text: {\n            snippet: snippet.fields.text,\n            preview: '!! ' + snippet.fields.caption + (snippet.fields['snippet-description'] ? '\\n\\n' + snippet.fields['snippet-description'] : ''),\n          },\n          displayText: name,\n          hintMatch: cme.service.RealtimeHint.makeLiteralHintMatch(name, currentWord),\n        });\n      }\n    });\n\n    // Load KaTeX snippet\n    $tw.wiki.filterTiddlers('[all[tiddlers+shadows]tag[$:/tags/KaTeX/Snippet]]').forEach(function (snippetTiddler) {\n      const snippet = $tw.wiki.getTiddler(snippetTiddler);\n      const name = getSnippetName(snippet);\n      if (name.includes(currentWord)) {\n        hints.push({\n          text: {\n            snippet: snippet.fields.text,\n            preview: snippet.fields.text,\n          },\n          displayText: name,\n          hintMatch: cme.service.RealtimeHint.makeLiteralHintMatch(name, currentWord),\n        });\n      }\n    });\n\n    return {\n      from: cme.CodeMirror.Pos(current.line, pointer - 1),\n      to: cme.CodeMirror.Pos(current.line, end),\n      renderPreview: function (domNode, selectedData, selectedNode) {\n        selectedNode.renderCache = domNode.innerHTML = $tw.wiki.renderText(\n          'text/html',\n          'text/vnd.tiddlywiki',\n          selectedData.text.preview ? selectedData.text.preview.replaceAll(/(\\$\\d+)/g, '') : '',\n        );\n        return true;\n      },\n      hint: function (editor_, hints_, hint_) {\n        // Snippet text replace\n        const replaceText = hint_.text.snippet.replaceAll(/(\\$\\d+)/g, '');\n        editor_.replaceRange(replaceText, hint_.from || hints_.from, hint_.to || hints_.to, 'complete');\n        // Relocate cursor to placeholder\n        const current_ = editor_.getCursor();\n        let col = current_.ch;\n        let row = current_.line;\n        const parts = hint_.text.snippet.split(/(\\$\\d+)/, 3);\n        if (parts[2]) {\n          const splits = parts[2].split(/\\n/);\n          if (splits.length > 1) {\n            row -= splits.length - 1;\n            col = editor.getLine(row).length - splits[0].length;\n          } else {\n            col -= parts[2].length;\n          }\n          editor_.setCursor(row, col);\n        }\n      },\n      type: 'snippet',\n      list: hints,\n    };\n  }\n\n  return {\n    hint: hintSnippet,\n  };\n});\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/hint/hint-tw5-snippet.js","tags":"$:/CodeMirrorEnhanced/RealtimeHint","module-type":"library"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/snippetslist/tw5-snippets.json":{"text":"[\n  {\n    \"i18n\": true,\n    \"id\": \"blockquoteSingleline\",\n    \"name\": \"tw-snippet.blockquoteSingleline.name\",\n    \"preview\": \"tw-snippet.blockquoteSingleline.preview\",\n    \"snippet\": \"> $1\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"blockquote\",\n    \"name\": \"tw-snippet.blockquote.name\",\n    \"preview\": \"tw-snippet.blockquote.preview\",\n    \"snippet\": \"<<<\\n$1\\n<<<\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"blockquoteWithCSSClass\",\n    \"name\": \"tw-snippet.blockquoteWithCSSClass.name\",\n    \"preview\": \"tw-snippet.blockquoteWithCSSClass.preview\",\n    \"snippet\": \"<<<$1\\n$2\\n<<<\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"blockquoteCitation\",\n    \"name\": \"tw-snippet.blockquoteCitation.name\",\n    \"preview\": \"tw-snippet.blockquoteCitation.preview\",\n    \"snippet\": \"<<<\\n$1\\n<<< $2\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"codeblock\",\n    \"name\": \"tw-snippet.codeblock.name\",\n    \"preview\": \"tw-snippet.codeblock.preview\",\n    \"snippet\": \"```$1\\n$2\\n```\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"image\",\n    \"name\": \"tw-snippet.image.name\",\n    \"preview\": \"tw-snippet.image.preview\",\n    \"snippet\": \"[img[$1]]\"\n  },\n  {\n    \"i18n\": true,\n    \"id\": \"center\",\n    \"name\": \"tw-snippet.center.name\",\n    \"preview\": \"tw-snippet.center.preview\",\n    \"snippet\": \"<center>$1</center>\"\n  }\n]\n","type":"application/json","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/snippetslist/tw5-snippets.json","tags":"$:/CodeMirrorEnhanced/SnippetsList"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/clickable/clickable-link.js":{"text":"/* Enhance from and specially thank to https://github.com/adithya-badidey/TW5-codemirror-plus */\n(function (mod) {\n  if (typeof exports === 'object' && typeof module === 'object')\n    // CommonJS\n    module.exports = mod();\n  else if (typeof define === 'function' && define.amd)\n    // AMD\n    define(mod);\n  // Plain browser env\n  else mod();\n})(function () {\n  'use strict';\n\n  function handler(editor, event, cme) {\n    if (event.target.classList.contains('cm-externallink')) {\n      window.open(event.target.innerText);\n      return true;\n    } else if (event.target.classList.contains('cm-internallink')) {\n      new $tw.Story().navigateTiddler(event.target.innerText);\n      return true;\n    } else {\n      return false;\n    }\n  }\n\n  return {\n    handler: handler,\n  };\n});\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/clickable/clickable-link.js","tags":"$:/CodeMirrorEnhanced/ClickableToken","module-type":"library"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/filters/cmei18n.js":{"text":"(function () {\n  'use strict';\n\n  // Load tiddler object\n  function loadTiddler(tiddler, tw) {\n    try {\n      switch (tw.wiki.filterTiddlers('[[' + tiddler + ']get[type]]')[0]) {\n          case 'application/javascript':\n              return require(tiddler);\n          case 'application/json':\n              return JSON.parse(tw.wiki.filterTiddlers('[[' + tiddler + ']get[text]]')[0]);\n          case 'application/x-tiddler-dictionary':\n              return tw.utils.parseFields(tw.wiki.filterTiddlers('[[' + tiddler + ']get[text]]')[0]);\n          default:\n              return {};\n      }\n    } catch (error) {\n      console.error(error);\n      return {};\n    }\n  }\n\n  // i18n message cache\n  const cache = {};\n\n  exports.cmei18n = function (source, operator, options) {\n    // Get language\n    let language = options.wiki.filterTiddlers('[[$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json]getindex[language]]')[0];\n    if (!language || language === 'system') {\n      language = options.wiki.getTiddlerText('$:/language').substring(13);\n    }\n\n    // ParseMessage\n    const messages = operator.operand.split(':', 2);\n    let message = messages.length > 1 ? messages[1] : messages[0];\n    const namespace = messages.length > 1 ? messages[0] : 'core';\n\n    // Fetch languages\n    const exactLanguage = language;\n    const majorLanguage = language.split('-')[0];\n    const languageFallbackList = [undefined, undefined, undefined];\n    options.wiki.filterTiddlers('[all[tiddlers+shadows]!field:cmei18n[]!is[draft]cmei18n-namespace[' + namespace + ']]').forEach(function (tiddler) {\n      const i18n = options.wiki.filterTiddlers('[[' + tiddler + ']get[cmei18n]]')[0];\n      if (i18n.includes(exactLanguage)) languageFallbackList[0] = tiddler;\n      if (i18n.includes(majorLanguage)) languageFallbackList[1] = tiddler;\n      if (i18n.includes('default')) languageFallbackList[2] = tiddler;\n    });\n\n    for (let index = 0; index < 3; index++) {\n      if (!languageFallbackList[index]) continue;\n      let node = loadTiddler(languageFallbackList[index], options);\n      const subpaths = message.split('.');\n      for (const index_ in subpaths) {\n        node = node[subpaths[index_]];\n        if (!node) break;\n      }\n      if (typeof node === 'string') {\n        cache[message] = node;\n        message = node;\n        break;\n      } else if (Array.isArray(node)) {\n        cache[message] = node.join('\\n');\n        message = cache[message];\n        break;\n      } else if (cache[message]) {\n        message = cache[message];\n        break;\n      }\n    }\n    return [message];\n  };\n})();\n","type":"application/javascript","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/filters/cmei18n.js","module-type":"filteroperator"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/ControlPanel":{"text":"!! <$text text={{{[cmei18n[control-panel.language.title]]}}}/>\n\n<$wikify name=\"rendered\" text={{{[cmei18n[control-panel.language.description]]}}} output=html><<rendered>></$wikify>\n\n<$select tiddler=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json\" index=\"language\">\n    <$list filter=\"[[system]] [all[tiddlers+shadows]!is[draft]!field:cmei18n[]get[cmei18n]split[ ]!is[blank]regexp[\\w+-\\w+]]\">\n        <option value=<<currentTiddler>>><$view field=\"title\"/></option>\n    </$list>\n</$select>\n\n---\n\n!! <$text text={{{[cmei18n[control-panel.realtime-hint.title]]}}}/>\n\n<$wikify name=\"rendered\" text={{{[cmei18n[control-panel.realtime-hint.description]]}}} output=html><<rendered>></$wikify>\n\n: <$checkbox tiddler=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json\" index=\"realtime-hint\" field=\"text\" checked=\"true\" unchecked=\"false\" default=\"true\">\n    <$reveal type=\"match\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"realtime-hint\" text=\"true\"><$text text={{{[cmei18n[control-panel.realtime-hint.button-on]]}}}/></$reveal>\n    <$reveal type=\"nomatch\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"realtime-hint\" text=\"true\"><$text text={{{[cmei18n[control-panel.realtime-hint.button-off]]}}}/></$reveal>\n</$checkbox>\n\n---\n\n!! <$text text={{{[cmei18n[control-panel.clickable-links.title]]}}}/>\n\n<$wikify name=\"rendered\" text={{{[cmei18n[control-panel.clickable-links.description]]}}} output=html><<rendered>></$wikify>\n\n: <$checkbox tiddler=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json\" index=\"clickable-links\" field=\"text\" checked=\"true\" unchecked=\"false\" default=\"true\">\n    <$reveal type=\"match\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"clickable-links\" text=\"true\"><$text text={{{[cmei18n[control-panel.clickable-links.button-on]]}}}/></$reveal>\n    <$reveal type=\"nomatch\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"clickable-links\" text=\"true\"><$text text={{{[cmei18n[control-panel.clickable-links.button-off]]}}}/></$reveal>\n</$checkbox>\n\n---\n\n!! <$text text={{{[cmei18n[control-panel.hint-preview.title]]}}}/>\n\n<$wikify name=\"rendered\" text={{{[cmei18n[control-panel.hint-preview.description]]}}} output=html><<rendered>></$wikify>\n\n: <$checkbox tiddler=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json\" index=\"hint-preview\" field=\"text\" checked=\"true\" unchecked=\"false\" default=\"true\">\n    <$reveal type=\"match\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"hint-preview\" text=\"true\"><$text text={{{[cmei18n[control-panel.hint-preview.button-on]]}}}/></$reveal>\n    <$reveal type=\"nomatch\" stateTitle=\"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config\" stateIndex=\"hint-preview\" text=\"true\"><$text text={{{[cmei18n[control-panel.hint-preview.button-off]]}}}/></$reveal>\n</$checkbox>\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/ControlPanel"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json":{"text":"{\n  \"language\": \"system\",\n  \"realtime-hint\": \"true\",\n  \"clickable-links\": \"true\",\n  \"hint-preview\": \"true\"\n}\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/config.json","type":"application/json"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/i18n/zh-Hans.json":{"text":"{\n  \"readme\": [\n    \"如想了解更多，请关注我们的[[GitHub Repo|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced]]。\",\n    \"\",\n    \"为TiddlyWiki的CodeMirror编辑器提供一个灵活而丰富的扩展框架(包括高亮、补全、预览等功能)，任何人都可以使用此框架为编辑器编写扩展插件！目前基于此框架实现的功能有：\",\n    \"\",\n    \"* TiddlyWiki5(`text/vnd.tiddlywiki`)语法高亮；\",\n    \"* Wiki链接自动提示；\",\n    \"* Tiddler预览；\",\n    \"* 可点击链接；\",\n    \"\",\n    \"更多功能正在开发中，欢迎你的加入！\"\n  ],\n  \"control-panel\": {\n    \"language\": {\n      \"title\": \"当前插件所使用的语言\",\n      \"description\": [\n        \"选择适合你的语言，`system`代表跟随系统偏好。\",\n        \"如果没有适合你的语言，请在[[Issue|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced/issues]]中提出，欢迎任何人贡献代码！\"\n      ]\n    },\n    \"realtime-hint\": {\n      \"title\": \"实时代码补全\",\n      \"description\": \"无需<kbd>Ctrl</kbd>+<kbd>Space</kbd>，像VSCode一样，在输入时实时进行补全提示(现只支持WikiLink)。\",\n      \"button-on\": \"实时代码补全已开启\",\n      \"button-off\": \"实时代码补全已关闭\"\n    },\n    \"clickable-links\": {\n      \"title\": \"可点击的链接\",\n      \"description\": \"WikiLinks和URL是否可以点击。\",\n      \"button-on\": \"可点击链接已开启\",\n      \"button-off\": \"可点击链接补全已关闭\"\n    },\n    \"hint-preview\": {\n      \"title\": \"补全时预览\",\n      \"description\": \"自动补全时，根据所选建议条目，在补全框右侧弹出小的文档/预览框。\",\n      \"button-on\": \"补全时预览已开启\",\n      \"button-off\": \"补全时预览已关闭\"\n    }\n  },\n  \"tw-snippet\": {\n    \"blockquoteSingleline\": {\n      \"name\": \"单行块引用\",\n      \"preview\": \"!! 单行块引用\\n> 引用的文本\\n> 另一行引号文本\\n!! 你也可以像这样嵌套引号\\n> 一个引文\\n>> 一个副引文\\n> 另一个引文\\n!! 你也可以将块状引号与其他列表项混合\\n* 清单一\\n** 清单二\\n**> 一个引文\\n**> 另一个引文\\n*清单三\"\n    },\n    \"blockquote\": {\n      \"name\": \"块引用\",\n      \"preview\": \"!! 多行块引用\\n\\n<<<\\n这是一个块引用段落\\n\\n写了两行中文\\n<<<\"\n    },\n    \"blockquoteWithCSSClass\": {\n      \"name\": \"带CSS类的块引用\",\n      \"preview\": \"!! CSS 类也可以加到引用里\\n\\n<<<.tc-big-quote\\n一个戏剧性的引用\\n<<< 一个重要的人\"\n    },\n    \"blockquoteCitation\": {\n      \"name\": \"带引文来源的块引用\",\n      \"preview\": \"!! 一个引文来源也可以加到引用里\\n\\n<<<\\n计算机就像我们思想的自行车\\n<<< 史蒂夫-乔布斯\"\n    },\n    \"codeblock\": {\n      \"name\": \"代码块\",\n      \"preview\": \"!! 你可以使用三个反斜线<code>&#96;&#96;&#96;</code>来标记代码块\\n\\n```\\n这将是以等宽字体显示的。\\n```\\n\\n为了正确显示，这三个反斜线需要在行的开头，并紧跟一个换行。\\n\\n请注意，任何前面的段落内容也应该用双倍的换行符来适当终止。因此，下面这个例子是错误的。\\n<pre>\\n这是一个普通的段落\\n&#96;&#96;&#96;\\n这将是以等宽字体显示的。\\n&#96;&#96;&#96;\\n</pre>\\n\\n正确的版本是。\\n<pre>\\n这是一个普通的段落\\n\\n&#96;&#96;&#96;\\n这将是以等宽字体显示的。\\n&#96;&#96;&#96;\\n</pre>\\n\\n注意，有些键盘布局将反斜线视为[[死键|https://en.wikipedia.org/wiki/Dead_key]]，使其难以输入。诀窍是输入三个反斜线，然后是一个空格。或者，一次性输入所有六个回车键，然后是一个空格，然后将光标向后移动三个字符来输入或粘贴内容。\\n\\n\"\n    },\n    \"image\": {\n      \"name\": \"图片\",\n      \"preview\": \"!! 插入图片\\n\\n[img[$:/favicon.ico]]\"\n    },\n    \"center\": {\n      \"name\": \"居中\",\n      \"preview\": \"!! 居中元素\\n\\n<center>就像这样</center>\"\n    }\n  }\n}\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/i18n/zh-Hans.json","type":"application/json","cmei18n":"zh-Hans zh","cmei18n-namespace":"core"},"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/i18n/en-GB.json":{"text":"{\n  \"readme\": [\n    \"View more on [[GitHub Repo|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced]].\",\n    \"\",\n    \"CodeMirror editor for TiddlyWiki provides a flexible and rich extension framework (including highlighting, completion, preview and other features), anyone can use this framework to write extension plug-ins for the editor! Currently based on this framework to achieve the following features.\",\n    \"\",\n    \"* TiddlyWiki5 (`text/vnd.tiddlywiki`) syntax highlighting.\",\n    \"* Wiki link auto-tip; * Tiddler preview; * TiddlyWiki5 (`text/vnd.tiddlywiki`)\",\n    \"* Tiddler preview; * Tiddler preview.\",\n    \"* Clickable links.\",\n    \"\",\n    \"More features are in development, welcome to join!\"\n  ],\n  \"control-panel\": {\n    \"language\": {\n      \"title\": \"Current language used by the plugin\",\n      \"description\": [\n        \"Choose the language that suits you, `system` stands for follow the system preference.\",\n        \"If there is no language that suits you, please ask in [[Issue|https://github.com/Gk0Wk/TW5-CodeMirror-Enhanced/issues]], anyone is welcome to contribute code!\"\n      ]\n    },\n    \"realtime-hint\": {\n      \"title\": \"Realtime-hint when typing\",\n      \"description\": \"Real-time code completion hints like VSCode while typing (currently only ~WikiLink completion is implemented) and no need to activate with <kbd>Ctrl</kbd>+<kbd>Space</kbd>.\",\n      \"button-on\": \"Real-time code completion is enabled\",\n      \"button-off\": \"Real-time code completion is disabled\"\n    },\n    \"clickable-links\": {\n      \"title\": \"Clickable links\",\n      \"description\": \"Whethere WikiLinks and URLs are clickable.\",\n      \"button-on\": \"Clickable links is enabled\",\n      \"button-off\": \"Clickable links is disabled\"\n    },\n    \"hint-preview\": {\n      \"title\": \"Hint preview\",\n      \"description\": \"When auto-completion is performed, a small document/preview box pops up to the right of the completion box based on the selected suggestion entry.\",\n      \"button-on\": \"Hint preview is enabled\",\n      \"button-off\": \"Hint preview is disabled\"\n    }\n  },\n  \"tw-snippet\": {\n    \"blockquoteSingleline\": {\n      \"name\": \"single line blockquote\",\n      \"preview\": \"!! Single-line Block Quotes\\n\\n> Quoted text\\n> Another line of quoted text\\n\\n!! You can also nest quotes like this:\\n\\n> A top quote\\n>> A subquote\\n> Another top quote\\n\\n!! You can also mix block quotes with other list items. For example:\\n\\n* List One\\n** List Two\\n**> A quote\\n**> Another quote\\n* List Three\"\n    },\n    \"blockquote\": {\n      \"name\": \"blockquote\",\n      \"preview\": \"!! Multi-line block quotes\\n\\n<<<\\nThis is a block quoted paragraph\\n\\nwritten in English\\n<<<\"\n    },\n    \"blockquoteWithCSSClass\": {\n      \"name\": \"blockquoteWithCSSClass\",\n      \"preview\": \"!! CSS classes can be added to a block quote\\n\\n<<<.tc-big-quote\\nA dramatic quote\\n<<< Somebody Important\"\n    },\n    \"blockquoteCitation\": {\n      \"name\": \"blockquoteCitation\",\n      \"preview\": \"!! A citation can be added to the quote like this\\n\\n<<<\\nComputers are like a bicycle for our minds\\n<<< Steve Jobs\"\n    },\n    \"codeblock\": {\n      \"name\": \"codeblock\",\n      \"preview\": \"!! You can use triple backticks <code>&#96;&#96;&#96;</code> to mark code blocks\\n\\n```\\nThis will be monospaced\\n```\\n\\nTo be interpreted correctly, the three backticks need to be at the start of the line and immediately followed by a line-break.\\n\\nBe aware that any preceding paragraph content should be properly terminated with a double line break, too. So, this example is wrong:\\n\\n<pre>\\nThis is an ordinary paragraph\\n&#96;&#96;&#96;\\nThis will be monospaced\\n&#96;&#96;&#96;\\n</pre>\\n\\nThe correct version is:\\n\\n<pre>\\nThis is an ordinary paragraph\\n\\n&#96;&#96;&#96;\\nThis will be monospaced\\n&#96;&#96;&#96;\\n</pre>\\n\\nNote that some keyboard layouts treat the backtick as a [[dead key|https://en.wikipedia.org/wiki/Dead_key]], making it hard to type. The trick is to type three backticks followed by a space. Alternatively, type all six backticks in one go, then a space, and then move the cursor back three characters to type or paste the content.\\n\\n\"\n    },\n    \"image\": {\n      \"name\": \"image\",\n      \"preview\": \"!! Insert a image.\\n\\n[img[$:/favicon.ico]]\"\n    },\n    \"center\": {\n      \"name\": \"center\",\n      \"preview\": \"!! Centralize elements.\\n\\n<center>like this</center>\"\n    }\n  }\n}\n","title":"$:/plugins/Gk0Wk/TW5-CodeMirror-Enhanced/i18n/en-GB.json","type":"application/json","cmei18n":"en-GB en default","cmei18n-namespace":"core"}}}