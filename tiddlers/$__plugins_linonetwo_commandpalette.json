{"tiddlers":{"$:/plugins/linonetwo/commandpalette/CommandPaletteHistory":{"text":"{\n  \"history\": [\n    \"Explorer\",\n    \"Clone Tiddler\",\n    \"See Drafts\",\n    \"Refresh Server\",\n    \"Permaview\",\n    \"See Themes\",\n    \"Refresh Command Palette\",\n    \"See Shadows Tiddlers\",\n    \"See Orphans Tiddlers\",\n    \"Remove tag\",\n    \"Add tag to tiddler\",\n    \"Delete Tiddler\",\n    \"Close Tiddler\",\n    \"Recent Tiddlers\",\n    \"New Task with Title\",\n    \"Edit Tiddler\",\n    \"See Mising Tiddlers\",\n    \"Show CommandTiddlers\",\n    \"See untagged Tiddlers\",\n    \"See Languages\",\n    \"See Plugins\",\n    \"New Command Wizard\",\n    \"Cancel Tiddler\",\n    \"Save Tiddler\",\n    \"Close other Tiddlers\",\n    \"Permalink\",\n    \"Create Command\",\n    \"Unfold All Tiddlers\",\n    \"Fold All Tiddlers\",\n    \"Print\",\n    \"Close All Tiddlers\",\n    \"Save Wiki\",\n    \"Home\",\n    \"Toggle Fullscreen\",\n    \"New Tiddler\"\n  ]\n}\n","type":"application/json","created":"20200603153247010","modified":"20200610112340290","title":"$:/plugins/linonetwo/commandpalette/CommandPaletteHistory"},"$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps":{"text":"{\n  \"steps\": [\n    {\n      \"filter\": \"[list[$:/StoryList]pinyinfuse[]]\",\n      \"caret\": \"30\",\n      \"filterFallback\": \"[list[$:/StoryList]search[]]\",\n      \"caretFallback\": \"26\",\n      \"hint\": \"历史记录\"\n    },\n    { \"filter\": \"[!is[system]pinyinfuse:title[]]\", \"caret\": \"29\", \"filterFallback\": \"[!is[system]search:title[]]\", \"caretFallback\": \"25\", \"hint\": \"在标题中\" },\n    {\n      \"filter\": \"[all[system+shadows]pinyinfuse:title[]]\",\n      \"caret\": \"37\",\n      \"filterFallback\": \"[all[system+shadows]search:title[]]\",\n      \"caretFallback\": \"33\",\n      \"hint\": \"在标题中 (系统)\"\n    },\n    { \"filter\": \"[!is[system]pinyinfuse[]]\", \"caret\": \"23\", \"filterFallback\": \"[!is[system]search[]]\", \"caretFallback\": \"19\", \"hint\": \"全局搜索\" },\n    { \"filter\": \"[all[shadows]pinyinfuse[]]\", \"caret\": \"24\", \"filterFallback\": \"[all[shadows]search[]]\", \"caretFallback\": \"20\", \"hint\": \"shadows\" }\n  ]\n}\n","type":"application/json","title":"$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps"},"$:/plugins/linonetwo/commandpalette/CommandPaletteSettings":{"text":"{\n  \"maxResults\": \"30\",\n  \"maxResultHintSize\": 45,\n  \"neverBasic\": \"false\",\n  \"smoothScroll\": \"false\"\n}\n","type":"application/json","created":"20200604160432063","modified":"20200610112626066","title":"$:/plugins/linonetwo/commandpalette/CommandPaletteSettings"},"$:/plugins/linonetwo/commandpalette/CommandPaletteWidget.js":{"title":"$:/plugins/linonetwo/commandpalette/CommandPaletteWidget.js","text":"'use strict';\n\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n/** Detect free variable `global` from Node.js. */\n\nvar freeGlobal$1 = typeof commonjsGlobal == 'object' && commonjsGlobal && commonjsGlobal.Object === Object && commonjsGlobal;\nvar _freeGlobal = freeGlobal$1;\nvar freeGlobal = _freeGlobal;\n/** Detect free variable `self`. */\n\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n/** Used as a reference to the global object. */\n\nvar root$5 = freeGlobal || freeSelf || Function('return this')();\nvar _root = root$5;\nvar root$4 = _root;\n/** Built-in value references. */\n\nvar Symbol$2 = root$4.Symbol;\nvar _Symbol = Symbol$2;\nvar Symbol$1 = _Symbol;\n/** Used for built-in method references. */\n\nvar objectProto$4 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$3 = objectProto$4.hasOwnProperty;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString$1 = objectProto$4.toString;\n/** Built-in value references. */\n\nvar symToStringTag$1 = Symbol$1 ? Symbol$1.toStringTag : undefined;\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\n\nfunction getRawTag$1(value) {\n  var isOwn = hasOwnProperty$3.call(value, symToStringTag$1),\n      tag = value[symToStringTag$1];\n\n  try {\n    value[symToStringTag$1] = undefined;\n    var unmasked = true;\n  } catch (e) {}\n\n  var result = nativeObjectToString$1.call(value);\n\n  if (unmasked) {\n    if (isOwn) {\n      value[symToStringTag$1] = tag;\n    } else {\n      delete value[symToStringTag$1];\n    }\n  }\n\n  return result;\n}\n\nvar _getRawTag = getRawTag$1;\n/** Used for built-in method references. */\n\nvar objectProto$3 = Object.prototype;\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\n\nvar nativeObjectToString = objectProto$3.toString;\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\n\nfunction objectToString$1(value) {\n  return nativeObjectToString.call(value);\n}\n\nvar _objectToString = objectToString$1;\nvar Symbol = _Symbol,\n    getRawTag = _getRawTag,\n    objectToString = _objectToString;\n/** `Object#toString` result references. */\n\nvar nullTag = '[object Null]',\n    undefinedTag = '[object Undefined]';\n/** Built-in value references. */\n\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\n\nfunction baseGetTag$2(value) {\n  if (value == null) {\n    return value === undefined ? undefinedTag : nullTag;\n  }\n\n  return symToStringTag && symToStringTag in Object(value) ? getRawTag(value) : objectToString(value);\n}\n\nvar _baseGetTag = baseGetTag$2;\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\n\nfunction isObject$4(value) {\n  var type = typeof value;\n  return value != null && (type == 'object' || type == 'function');\n}\n\nvar isObject_1 = isObject$4;\nvar baseGetTag$1 = _baseGetTag,\n    isObject$3 = isObject_1;\n/** `Object#toString` result references. */\n\nvar asyncTag = '[object AsyncFunction]',\n    funcTag = '[object Function]',\n    genTag = '[object GeneratorFunction]',\n    proxyTag = '[object Proxy]';\n/**\n * Checks if `value` is classified as a `Function` object.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a function, else `false`.\n * @example\n *\n * _.isFunction(_);\n * // => true\n *\n * _.isFunction(/abc/);\n * // => false\n */\n\nfunction isFunction$1(value) {\n  if (!isObject$3(value)) {\n    return false;\n  } // The use of `Object#toString` avoids issues with the `typeof` operator\n  // in Safari 9 which returns 'object' for typed arrays and other constructors.\n\n\n  var tag = baseGetTag$1(value);\n  return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;\n}\n\nvar isFunction_1 = isFunction$1;\nvar root$3 = _root;\n/** Used to detect overreaching core-js shims. */\n\nvar coreJsData$1 = root$3['__core-js_shared__'];\nvar _coreJsData = coreJsData$1;\nvar coreJsData = _coreJsData;\n/** Used to detect methods masquerading as native. */\n\nvar maskSrcKey = function () {\n  var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');\n  return uid ? 'Symbol(src)_1.' + uid : '';\n}();\n/**\n * Checks if `func` has its source masked.\n *\n * @private\n * @param {Function} func The function to check.\n * @returns {boolean} Returns `true` if `func` is masked, else `false`.\n */\n\n\nfunction isMasked$1(func) {\n  return !!maskSrcKey && maskSrcKey in func;\n}\n\nvar _isMasked = isMasked$1;\n/** Used for built-in method references. */\n\nvar funcProto$1 = Function.prototype;\n/** Used to resolve the decompiled source of functions. */\n\nvar funcToString$1 = funcProto$1.toString;\n/**\n * Converts `func` to its source code.\n *\n * @private\n * @param {Function} func The function to convert.\n * @returns {string} Returns the source code.\n */\n\nfunction toSource$1(func) {\n  if (func != null) {\n    try {\n      return funcToString$1.call(func);\n    } catch (e) {}\n\n    try {\n      return func + '';\n    } catch (e) {}\n  }\n\n  return '';\n}\n\nvar _toSource = toSource$1;\nvar isFunction = isFunction_1,\n    isMasked = _isMasked,\n    isObject$2 = isObject_1,\n    toSource = _toSource;\n/**\n * Used to match `RegExp`\n * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).\n */\n\nvar reRegExpChar = /[\\\\^$.*+?()[\\]{}|]/g;\n/** Used to detect host constructors (Safari). */\n\nvar reIsHostCtor = /^\\[object .+?Constructor\\]$/;\n/** Used for built-in method references. */\n\nvar funcProto = Function.prototype,\n    objectProto$2 = Object.prototype;\n/** Used to resolve the decompiled source of functions. */\n\nvar funcToString = funcProto.toString;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$2 = objectProto$2.hasOwnProperty;\n/** Used to detect if a method is native. */\n\nvar reIsNative = RegExp('^' + funcToString.call(hasOwnProperty$2).replace(reRegExpChar, '\\\\$&').replace(/hasOwnProperty|(function).*?(?=\\\\\\()| for .+?(?=\\\\\\])/g, '$1.*?') + '$');\n/**\n * The base implementation of `_.isNative` without bad shim checks.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a native function,\n *  else `false`.\n */\n\nfunction baseIsNative$1(value) {\n  if (!isObject$2(value) || isMasked(value)) {\n    return false;\n  }\n\n  var pattern = isFunction(value) ? reIsNative : reIsHostCtor;\n  return pattern.test(toSource(value));\n}\n\nvar _baseIsNative = baseIsNative$1;\n/**\n * Gets the value at `key` of `object`.\n *\n * @private\n * @param {Object} [object] The object to query.\n * @param {string} key The key of the property to get.\n * @returns {*} Returns the property value.\n */\n\nfunction getValue$1(object, key) {\n  return object == null ? undefined : object[key];\n}\n\nvar _getValue = getValue$1;\nvar baseIsNative = _baseIsNative,\n    getValue = _getValue;\n/**\n * Gets the native function at `key` of `object`.\n *\n * @private\n * @param {Object} object The object to query.\n * @param {string} key The key of the method to get.\n * @returns {*} Returns the function if it's native, else `undefined`.\n */\n\nfunction getNative$3(object, key) {\n  var value = getValue(object, key);\n  return baseIsNative(value) ? value : undefined;\n}\n\nvar _getNative = getNative$3;\nvar getNative$2 = _getNative;\n/* Built-in method references that are verified to be native. */\n\nvar nativeCreate$4 = getNative$2(Object, 'create');\nvar _nativeCreate = nativeCreate$4;\nvar nativeCreate$3 = _nativeCreate;\n/**\n * Removes all key-value entries from the hash.\n *\n * @private\n * @name clear\n * @memberOf Hash\n */\n\nfunction hashClear$1() {\n  this.__data__ = nativeCreate$3 ? nativeCreate$3(null) : {};\n  this.size = 0;\n}\n\nvar _hashClear = hashClear$1;\n/**\n * Removes `key` and its value from the hash.\n *\n * @private\n * @name delete\n * @memberOf Hash\n * @param {Object} hash The hash to modify.\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction hashDelete$1(key) {\n  var result = this.has(key) && delete this.__data__[key];\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _hashDelete = hashDelete$1;\nvar nativeCreate$2 = _nativeCreate;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED$2 = '__lodash_hash_undefined__';\n/** Used for built-in method references. */\n\nvar objectProto$1 = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty$1 = objectProto$1.hasOwnProperty;\n/**\n * Gets the hash value for `key`.\n *\n * @private\n * @name get\n * @memberOf Hash\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction hashGet$1(key) {\n  var data = this.__data__;\n\n  if (nativeCreate$2) {\n    var result = data[key];\n    return result === HASH_UNDEFINED$2 ? undefined : result;\n  }\n\n  return hasOwnProperty$1.call(data, key) ? data[key] : undefined;\n}\n\nvar _hashGet = hashGet$1;\nvar nativeCreate$1 = _nativeCreate;\n/** Used for built-in method references. */\n\nvar objectProto = Object.prototype;\n/** Used to check objects for own properties. */\n\nvar hasOwnProperty = objectProto.hasOwnProperty;\n/**\n * Checks if a hash value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf Hash\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction hashHas$1(key) {\n  var data = this.__data__;\n  return nativeCreate$1 ? data[key] !== undefined : hasOwnProperty.call(data, key);\n}\n\nvar _hashHas = hashHas$1;\nvar nativeCreate = _nativeCreate;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED$1 = '__lodash_hash_undefined__';\n/**\n * Sets the hash `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf Hash\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the hash instance.\n */\n\nfunction hashSet$1(key, value) {\n  var data = this.__data__;\n  this.size += this.has(key) ? 0 : 1;\n  data[key] = nativeCreate && value === undefined ? HASH_UNDEFINED$1 : value;\n  return this;\n}\n\nvar _hashSet = hashSet$1;\nvar hashClear = _hashClear,\n    hashDelete = _hashDelete,\n    hashGet = _hashGet,\n    hashHas = _hashHas,\n    hashSet = _hashSet;\n/**\n * Creates a hash object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction Hash$1(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `Hash`.\n\n\nHash$1.prototype.clear = hashClear;\nHash$1.prototype['delete'] = hashDelete;\nHash$1.prototype.get = hashGet;\nHash$1.prototype.has = hashHas;\nHash$1.prototype.set = hashSet;\nvar _Hash = Hash$1;\n/**\n * Removes all key-value entries from the list cache.\n *\n * @private\n * @name clear\n * @memberOf ListCache\n */\n\nfunction listCacheClear$1() {\n  this.__data__ = [];\n  this.size = 0;\n}\n\nvar _listCacheClear = listCacheClear$1;\n/**\n * Performs a\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * comparison between two values to determine if they are equivalent.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to compare.\n * @param {*} other The other value to compare.\n * @returns {boolean} Returns `true` if the values are equivalent, else `false`.\n * @example\n *\n * var object = { 'a': 1 };\n * var other = { 'a': 1 };\n *\n * _.eq(object, object);\n * // => true\n *\n * _.eq(object, other);\n * // => false\n *\n * _.eq('a', 'a');\n * // => true\n *\n * _.eq('a', Object('a'));\n * // => false\n *\n * _.eq(NaN, NaN);\n * // => true\n */\n\nfunction eq$1(value, other) {\n  return value === other || value !== value && other !== other;\n}\n\nvar eq_1 = eq$1;\nvar eq = eq_1;\n/**\n * Gets the index at which the `key` is found in `array` of key-value pairs.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} key The key to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction assocIndexOf$4(array, key) {\n  var length = array.length;\n\n  while (length--) {\n    if (eq(array[length][0], key)) {\n      return length;\n    }\n  }\n\n  return -1;\n}\n\nvar _assocIndexOf = assocIndexOf$4;\nvar assocIndexOf$3 = _assocIndexOf;\n/** Used for built-in method references. */\n\nvar arrayProto = Array.prototype;\n/** Built-in value references. */\n\nvar splice = arrayProto.splice;\n/**\n * Removes `key` and its value from the list cache.\n *\n * @private\n * @name delete\n * @memberOf ListCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction listCacheDelete$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$3(data, key);\n\n  if (index < 0) {\n    return false;\n  }\n\n  var lastIndex = data.length - 1;\n\n  if (index == lastIndex) {\n    data.pop();\n  } else {\n    splice.call(data, index, 1);\n  }\n\n  --this.size;\n  return true;\n}\n\nvar _listCacheDelete = listCacheDelete$1;\nvar assocIndexOf$2 = _assocIndexOf;\n/**\n * Gets the list cache value for `key`.\n *\n * @private\n * @name get\n * @memberOf ListCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction listCacheGet$1(key) {\n  var data = this.__data__,\n      index = assocIndexOf$2(data, key);\n  return index < 0 ? undefined : data[index][1];\n}\n\nvar _listCacheGet = listCacheGet$1;\nvar assocIndexOf$1 = _assocIndexOf;\n/**\n * Checks if a list cache value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf ListCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction listCacheHas$1(key) {\n  return assocIndexOf$1(this.__data__, key) > -1;\n}\n\nvar _listCacheHas = listCacheHas$1;\nvar assocIndexOf = _assocIndexOf;\n/**\n * Sets the list cache `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf ListCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the list cache instance.\n */\n\nfunction listCacheSet$1(key, value) {\n  var data = this.__data__,\n      index = assocIndexOf(data, key);\n\n  if (index < 0) {\n    ++this.size;\n    data.push([key, value]);\n  } else {\n    data[index][1] = value;\n  }\n\n  return this;\n}\n\nvar _listCacheSet = listCacheSet$1;\nvar listCacheClear = _listCacheClear,\n    listCacheDelete = _listCacheDelete,\n    listCacheGet = _listCacheGet,\n    listCacheHas = _listCacheHas,\n    listCacheSet = _listCacheSet;\n/**\n * Creates an list cache object.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction ListCache$1(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `ListCache`.\n\n\nListCache$1.prototype.clear = listCacheClear;\nListCache$1.prototype['delete'] = listCacheDelete;\nListCache$1.prototype.get = listCacheGet;\nListCache$1.prototype.has = listCacheHas;\nListCache$1.prototype.set = listCacheSet;\nvar _ListCache = ListCache$1;\nvar getNative$1 = _getNative,\n    root$2 = _root;\n/* Built-in method references that are verified to be native. */\n\nvar Map$1 = getNative$1(root$2, 'Map');\nvar _Map = Map$1;\nvar Hash = _Hash,\n    ListCache = _ListCache,\n    Map = _Map;\n/**\n * Removes all key-value entries from the map.\n *\n * @private\n * @name clear\n * @memberOf MapCache\n */\n\nfunction mapCacheClear$1() {\n  this.size = 0;\n  this.__data__ = {\n    'hash': new Hash(),\n    'map': new (Map || ListCache)(),\n    'string': new Hash()\n  };\n}\n\nvar _mapCacheClear = mapCacheClear$1;\n/**\n * Checks if `value` is suitable for use as unique object key.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is suitable, else `false`.\n */\n\nfunction isKeyable$1(value) {\n  var type = typeof value;\n  return type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean' ? value !== '__proto__' : value === null;\n}\n\nvar _isKeyable = isKeyable$1;\nvar isKeyable = _isKeyable;\n/**\n * Gets the data for `map`.\n *\n * @private\n * @param {Object} map The map to query.\n * @param {string} key The reference key.\n * @returns {*} Returns the map data.\n */\n\nfunction getMapData$4(map, key) {\n  var data = map.__data__;\n  return isKeyable(key) ? data[typeof key == 'string' ? 'string' : 'hash'] : data.map;\n}\n\nvar _getMapData = getMapData$4;\nvar getMapData$3 = _getMapData;\n/**\n * Removes `key` and its value from the map.\n *\n * @private\n * @name delete\n * @memberOf MapCache\n * @param {string} key The key of the value to remove.\n * @returns {boolean} Returns `true` if the entry was removed, else `false`.\n */\n\nfunction mapCacheDelete$1(key) {\n  var result = getMapData$3(this, key)['delete'](key);\n  this.size -= result ? 1 : 0;\n  return result;\n}\n\nvar _mapCacheDelete = mapCacheDelete$1;\nvar getMapData$2 = _getMapData;\n/**\n * Gets the map value for `key`.\n *\n * @private\n * @name get\n * @memberOf MapCache\n * @param {string} key The key of the value to get.\n * @returns {*} Returns the entry value.\n */\n\nfunction mapCacheGet$1(key) {\n  return getMapData$2(this, key).get(key);\n}\n\nvar _mapCacheGet = mapCacheGet$1;\nvar getMapData$1 = _getMapData;\n/**\n * Checks if a map value for `key` exists.\n *\n * @private\n * @name has\n * @memberOf MapCache\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction mapCacheHas$1(key) {\n  return getMapData$1(this, key).has(key);\n}\n\nvar _mapCacheHas = mapCacheHas$1;\nvar getMapData = _getMapData;\n/**\n * Sets the map `key` to `value`.\n *\n * @private\n * @name set\n * @memberOf MapCache\n * @param {string} key The key of the value to set.\n * @param {*} value The value to set.\n * @returns {Object} Returns the map cache instance.\n */\n\nfunction mapCacheSet$1(key, value) {\n  var data = getMapData(this, key),\n      size = data.size;\n  data.set(key, value);\n  this.size += data.size == size ? 0 : 1;\n  return this;\n}\n\nvar _mapCacheSet = mapCacheSet$1;\nvar mapCacheClear = _mapCacheClear,\n    mapCacheDelete = _mapCacheDelete,\n    mapCacheGet = _mapCacheGet,\n    mapCacheHas = _mapCacheHas,\n    mapCacheSet = _mapCacheSet;\n/**\n * Creates a map cache object to store key-value pairs.\n *\n * @private\n * @constructor\n * @param {Array} [entries] The key-value pairs to cache.\n */\n\nfunction MapCache$1(entries) {\n  var index = -1,\n      length = entries == null ? 0 : entries.length;\n  this.clear();\n\n  while (++index < length) {\n    var entry = entries[index];\n    this.set(entry[0], entry[1]);\n  }\n} // Add methods to `MapCache`.\n\n\nMapCache$1.prototype.clear = mapCacheClear;\nMapCache$1.prototype['delete'] = mapCacheDelete;\nMapCache$1.prototype.get = mapCacheGet;\nMapCache$1.prototype.has = mapCacheHas;\nMapCache$1.prototype.set = mapCacheSet;\nvar _MapCache = MapCache$1;\n/** Used to stand-in for `undefined` hash values. */\n\nvar HASH_UNDEFINED = '__lodash_hash_undefined__';\n/**\n * Adds `value` to the array cache.\n *\n * @private\n * @name add\n * @memberOf SetCache\n * @alias push\n * @param {*} value The value to cache.\n * @returns {Object} Returns the cache instance.\n */\n\nfunction setCacheAdd$1(value) {\n  this.__data__.set(value, HASH_UNDEFINED);\n\n  return this;\n}\n\nvar _setCacheAdd = setCacheAdd$1;\n/**\n * Checks if `value` is in the array cache.\n *\n * @private\n * @name has\n * @memberOf SetCache\n * @param {*} value The value to search for.\n * @returns {number} Returns `true` if `value` is found, else `false`.\n */\n\nfunction setCacheHas$1(value) {\n  return this.__data__.has(value);\n}\n\nvar _setCacheHas = setCacheHas$1;\nvar MapCache = _MapCache,\n    setCacheAdd = _setCacheAdd,\n    setCacheHas = _setCacheHas;\n/**\n *\n * Creates an array cache object to store unique values.\n *\n * @private\n * @constructor\n * @param {Array} [values] The values to cache.\n */\n\nfunction SetCache$1(values) {\n  var index = -1,\n      length = values == null ? 0 : values.length;\n  this.__data__ = new MapCache();\n\n  while (++index < length) {\n    this.add(values[index]);\n  }\n} // Add methods to `SetCache`.\n\n\nSetCache$1.prototype.add = SetCache$1.prototype.push = setCacheAdd;\nSetCache$1.prototype.has = setCacheHas;\nvar _SetCache = SetCache$1;\n/**\n * The base implementation of `_.findIndex` and `_.findLastIndex` without\n * support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} predicate The function invoked per iteration.\n * @param {number} fromIndex The index to search from.\n * @param {boolean} [fromRight] Specify iterating from right to left.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction baseFindIndex$1(array, predicate, fromIndex, fromRight) {\n  var length = array.length,\n      index = fromIndex + (fromRight ? 1 : -1);\n\n  while (fromRight ? index-- : ++index < length) {\n    if (predicate(array[index], index, array)) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nvar _baseFindIndex = baseFindIndex$1;\n/**\n * The base implementation of `_.isNaN` without support for number objects.\n *\n * @private\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.\n */\n\nfunction baseIsNaN$1(value) {\n  return value !== value;\n}\n\nvar _baseIsNaN = baseIsNaN$1;\n/**\n * A specialized version of `_.indexOf` which performs strict equality\n * comparisons of values, i.e. `===`.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction strictIndexOf$1(array, value, fromIndex) {\n  var index = fromIndex - 1,\n      length = array.length;\n\n  while (++index < length) {\n    if (array[index] === value) {\n      return index;\n    }\n  }\n\n  return -1;\n}\n\nvar _strictIndexOf = strictIndexOf$1;\nvar baseFindIndex = _baseFindIndex,\n    baseIsNaN = _baseIsNaN,\n    strictIndexOf = _strictIndexOf;\n/**\n * The base implementation of `_.indexOf` without `fromIndex` bounds checks.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @param {number} fromIndex The index to search from.\n * @returns {number} Returns the index of the matched value, else `-1`.\n */\n\nfunction baseIndexOf$1(array, value, fromIndex) {\n  return value === value ? strictIndexOf(array, value, fromIndex) : baseFindIndex(array, baseIsNaN, fromIndex);\n}\n\nvar _baseIndexOf = baseIndexOf$1;\nvar baseIndexOf = _baseIndexOf;\n/**\n * A specialized version of `_.includes` for arrays without support for\n * specifying an index to search from.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\n\nfunction arrayIncludes$1(array, value) {\n  var length = array == null ? 0 : array.length;\n  return !!length && baseIndexOf(array, value, 0) > -1;\n}\n\nvar _arrayIncludes = arrayIncludes$1;\n/**\n * This function is like `arrayIncludes` except that it accepts a comparator.\n *\n * @private\n * @param {Array} [array] The array to inspect.\n * @param {*} target The value to search for.\n * @param {Function} comparator The comparator invoked per element.\n * @returns {boolean} Returns `true` if `target` is found, else `false`.\n */\n\nfunction arrayIncludesWith$1(array, value, comparator) {\n  var index = -1,\n      length = array == null ? 0 : array.length;\n\n  while (++index < length) {\n    if (comparator(value, array[index])) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nvar _arrayIncludesWith = arrayIncludesWith$1;\n/**\n * Checks if a `cache` value for `key` exists.\n *\n * @private\n * @param {Object} cache The cache to query.\n * @param {string} key The key of the entry to check.\n * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.\n */\n\nfunction cacheHas$1(cache, key) {\n  return cache.has(key);\n}\n\nvar _cacheHas = cacheHas$1;\nvar getNative = _getNative,\n    root$1 = _root;\n/* Built-in method references that are verified to be native. */\n\nvar Set$2 = getNative(root$1, 'Set');\nvar _Set = Set$2;\n/**\n * This method returns `undefined`.\n *\n * @static\n * @memberOf _\n * @since 2.3.0\n * @category Util\n * @example\n *\n * _.times(2, _.noop);\n * // => [undefined, undefined]\n */\n\nfunction noop$1() {// No operation performed.\n}\n\nvar noop_1 = noop$1;\n/**\n * Converts `set` to an array of its values.\n *\n * @private\n * @param {Object} set The set to convert.\n * @returns {Array} Returns the values.\n */\n\nfunction setToArray$2(set) {\n  var index = -1,\n      result = Array(set.size);\n  set.forEach(function (value) {\n    result[++index] = value;\n  });\n  return result;\n}\n\nvar _setToArray = setToArray$2;\nvar Set$1 = _Set,\n    noop = noop_1,\n    setToArray$1 = _setToArray;\n/** Used as references for various `Number` constants. */\n\nvar INFINITY = 1 / 0;\n/**\n * Creates a set object of `values`.\n *\n * @private\n * @param {Array} values The values to add to the set.\n * @returns {Object} Returns the new set.\n */\n\nvar createSet$1 = !(Set$1 && 1 / setToArray$1(new Set$1([, -0]))[1] == INFINITY) ? noop : function (values) {\n  return new Set$1(values);\n};\nvar _createSet = createSet$1;\nvar SetCache = _SetCache,\n    arrayIncludes = _arrayIncludes,\n    arrayIncludesWith = _arrayIncludesWith,\n    cacheHas = _cacheHas,\n    createSet = _createSet,\n    setToArray = _setToArray;\n/** Used as the size to enable large array optimizations. */\n\nvar LARGE_ARRAY_SIZE = 200;\n/**\n * The base implementation of `_.uniqBy` without support for iteratee shorthands.\n *\n * @private\n * @param {Array} array The array to inspect.\n * @param {Function} [iteratee] The iteratee invoked per element.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new duplicate free array.\n */\n\nfunction baseUniq$1(array, iteratee, comparator) {\n  var index = -1,\n      includes = arrayIncludes,\n      length = array.length,\n      isCommon = true,\n      result = [],\n      seen = result;\n\n  if (comparator) {\n    isCommon = false;\n    includes = arrayIncludesWith;\n  } else if (length >= LARGE_ARRAY_SIZE) {\n    var set = iteratee ? null : createSet(array);\n\n    if (set) {\n      return setToArray(set);\n    }\n\n    isCommon = false;\n    includes = cacheHas;\n    seen = new SetCache();\n  } else {\n    seen = iteratee ? [] : result;\n  }\n\n  outer: while (++index < length) {\n    var value = array[index],\n        computed = iteratee ? iteratee(value) : value;\n    value = comparator || value !== 0 ? value : 0;\n\n    if (isCommon && computed === computed) {\n      var seenIndex = seen.length;\n\n      while (seenIndex--) {\n        if (seen[seenIndex] === computed) {\n          continue outer;\n        }\n      }\n\n      if (iteratee) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    } else if (!includes(seen, computed, comparator)) {\n      if (seen !== result) {\n        seen.push(computed);\n      }\n\n      result.push(value);\n    }\n  }\n\n  return result;\n}\n\nvar _baseUniq = baseUniq$1;\nvar baseUniq = _baseUniq;\n/**\n * Creates a duplicate-free version of an array, using\n * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons, in which only the first occurrence of each element\n * is kept. The order of result values is determined by the order they occur\n * in the array.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @returns {Array} Returns the new duplicate free array.\n * @example\n *\n * _.uniq([2, 1, 2]);\n * // => [2, 1]\n */\n\nfunction uniq(array) {\n  return array && array.length ? baseUniq(array) : [];\n}\n\nvar uniq_1 = uniq;\nvar root = _root;\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\n\nvar now$1 = function () {\n  return root.Date.now();\n};\n\nvar now_1 = now$1;\n/** Used to match a single whitespace character. */\n\nvar reWhitespace = /\\s/;\n/**\n * Used by `_.trim` and `_.trimEnd` to get the index of the last non-whitespace\n * character of `string`.\n *\n * @private\n * @param {string} string The string to inspect.\n * @returns {number} Returns the index of the last non-whitespace character.\n */\n\nfunction trimmedEndIndex$1(string) {\n  var index = string.length;\n\n  while (index-- && reWhitespace.test(string.charAt(index))) {}\n\n  return index;\n}\n\nvar _trimmedEndIndex = trimmedEndIndex$1;\nvar trimmedEndIndex = _trimmedEndIndex;\n/** Used to match leading whitespace. */\n\nvar reTrimStart = /^\\s+/;\n/**\n * The base implementation of `_.trim`.\n *\n * @private\n * @param {string} string The string to trim.\n * @returns {string} Returns the trimmed string.\n */\n\nfunction baseTrim$1(string) {\n  return string ? string.slice(0, trimmedEndIndex(string) + 1).replace(reTrimStart, '') : string;\n}\n\nvar _baseTrim = baseTrim$1;\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\n\nfunction isObjectLike$1(value) {\n  return value != null && typeof value == 'object';\n}\n\nvar isObjectLike_1 = isObjectLike$1;\nvar baseGetTag = _baseGetTag,\n    isObjectLike = isObjectLike_1;\n/** `Object#toString` result references. */\n\nvar symbolTag = '[object Symbol]';\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\n\nfunction isSymbol$1(value) {\n  return typeof value == 'symbol' || isObjectLike(value) && baseGetTag(value) == symbolTag;\n}\n\nvar isSymbol_1 = isSymbol$1;\nvar baseTrim = _baseTrim,\n    isObject$1 = isObject_1,\n    isSymbol = isSymbol_1;\n/** Used as references for various `Number` constants. */\n\nvar NAN = 0 / 0;\n/** Used to detect bad signed hexadecimal string values. */\n\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n/** Used to detect binary string values. */\n\nvar reIsBinary = /^0b[01]+$/i;\n/** Used to detect octal string values. */\n\nvar reIsOctal = /^0o[0-7]+$/i;\n/** Built-in method references without a dependency on `root`. */\n\nvar freeParseInt = parseInt;\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\n\nfunction toNumber$1(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n\n  if (isSymbol(value)) {\n    return NAN;\n  }\n\n  if (isObject$1(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject$1(other) ? other + '' : other;\n  }\n\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n\n  value = baseTrim(value);\n  var isBinary = reIsBinary.test(value);\n  return isBinary || reIsOctal.test(value) ? freeParseInt(value.slice(2), isBinary ? 2 : 8) : reIsBadHex.test(value) ? NAN : +value;\n}\n\nvar toNumber_1 = toNumber$1;\nvar isObject = isObject_1,\n    now = now_1,\n    toNumber = toNumber_1;\n/** Error message constants. */\n\nvar FUNC_ERROR_TEXT = 'Expected a function';\n/* Built-in method references for those with the same name as other `lodash` methods. */\n\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\n\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n\n  wait = toNumber(wait) || 0;\n\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time; // Start the timer for the trailing edge.\n\n    timerId = setTimeout(timerExpired, wait); // Invoke the leading edge.\n\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        timeWaiting = wait - timeSinceLastCall;\n    return maxing ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke) : timeWaiting;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime; // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n\n    return lastCallTime === undefined || timeSinceLastCall >= wait || timeSinceLastCall < 0 || maxing && timeSinceLastInvoke >= maxWait;\n  }\n\n  function timerExpired() {\n    var time = now();\n\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    } // Restart the timer.\n\n\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined; // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        clearTimeout(timerId);\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n\n    return result;\n  }\n\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\nvar debounce_1 = debounce;\n\nconst Widget = require('$:/core/modules/widgets/widget.js').widget;\n\nclass CommandPaletteWidget extends Widget {\n  constructor(parseTreeNode, options) {\n    super(parseTreeNode, options);\n    this.actions = [];\n    this.triggers = [];\n    this.currentResults = [];\n    this.typeField = 'command-palette-type';\n    /** 用于搜索的字段 */\n\n    this.nameField = 'command-palette-name';\n    /** 用于展示翻译内容的字段 */\n\n    this.captionField = 'command-palette-caption';\n    this.hintField = 'command-palette-hint';\n    this.modeField = 'command-palette-mode';\n    this.userInputField = 'command-palette-user-input';\n    this.caretField = 'command-palette-caret';\n    this.immediateField = 'command-palette-immediate';\n    this.triggerField = 'command-palette-trigger';\n    this.currentSelection = 0; //0 is nothing selected, 1 is first result,...\n\n    this.symbolProviders = {};\n    this.blockProviderChange = false;\n    this.defaultSettings = {\n      maxResults: 15,\n      maxResultHintSize: 45,\n      neverBasic: false,\n      showHistoryOnOpen: true,\n      escapeGoesBack: true,\n      alwaysPassSelection: false,\n      theme: '$:/plugins/linonetwo/commandpalette/Compact.css'\n    };\n    this.settings = {};\n    this.commandHistoryPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteHistory';\n    this.settingsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSettings';\n    this.searchStepsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps';\n    this.customCommandsTag = '$:/tags/CommandPaletteCommand';\n    this.themesTag = '$:/tags/CommandPaletteTheme';\n    /** current item's click/enter handler function */\n\n    this.currentResolver = () => {};\n    /** basically means defaultProvider */\n\n\n    this.currentProvider = () => {};\n\n    this.searchSteps = [];\n    /**\n     * Fix IME issue in https://segmentfault.com/a/1190000012490380\n     */\n\n    this.isIMEOpen = false;\n    this.initialise(parseTreeNode, options);\n    this.onInput = debounce_1(this.onInput, 300);\n  }\n\n  actionStringBuilder(text) {\n    return e => this.invokeActionString(text, this, e);\n  }\n\n  actionStringInput(action, hint, e) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n    this.hint.innerText = hint;\n    this.input.value = '';\n\n    this.currentProvider = () => {};\n\n    this.currentResolver = e => {\n      this.invokeActionString(action, this, e, {\n        commandpaletteinput: this.input.value\n      });\n      this.closePalette();\n    };\n\n    this.showResults([]);\n    this.onInput(this.input.value);\n  }\n\n  invokeFieldMangler(tiddler, message, param, e) {\n    let action = `<$fieldmangler tiddler=\"${tiddler}\">\n\t\t\t<$action-sendmessage $message=\"${message}\" $param=\"${param}\"/>\n\t\t\t</$fieldmangler>`;\n    this.invokeActionString(action, this, e);\n  }\n\n  tagOperation(event, hintTiddler, hintTag,\n  /** (tiddler, terms) => [tiddlers] */\n  filter, allowNoSelection, message) {\n    this.blockProviderChange = true;\n    if (allowNoSelection) this.allowInputFieldSelection = true;\n    this.currentProvider = this.historyProviderBuilder(hintTiddler);\n\n    this.currentResolver = e => {\n      if (this.currentSelection === 0) return;\n      let tiddler = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n\n      this.currentProvider = terms => {\n        this.currentSelection = 0;\n        this.hint.innerText = hintTag;\n\n        if (tiddler) {\n          let searches = filter(tiddler, terms);\n          this.showResults(searches.map(s => {\n            return {\n              name: s\n            };\n          }));\n        }\n      };\n\n      this.input.value = '';\n      this.onInput(this.input.value);\n\n      this.currentResolver = e => {\n        if (!allowNoSelection && this.currentSelection === 0) return;\n        let tag = this.input.value;\n\n        if (this.currentSelection !== 0) {\n          tag = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n        }\n\n        this.invokeFieldMangler(tiddler, message, tag, e);\n\n        if (!e.getModifierState('Shift')) {\n          this.closePalette();\n        } else {\n          this.onInput(this.input.value);\n        }\n      };\n    };\n\n    this.input.value = '';\n    this.onInput(this.input.value);\n  }\n\n  refreshThemes(e) {\n    this.themes = this.getTiddlersWithTag(this.themesTag);\n    let found = false;\n\n    for (let theme of this.themes) {\n      let themeName = theme.fields.title;\n\n      if (themeName === this.settings.theme) {\n        found = true;\n        this.addTagIfNecessary(themeName, '$:/tags/Stylesheet', e);\n      } else {\n        this.invokeFieldMangler(themeName, 'tm-remove-tag', '$:/tags/Stylesheet', e);\n      }\n    }\n\n    if (found) return;\n    this.addTagIfNecessary(this.defaultSettings.theme, '$:/tags/Stylesheet', e);\n  } //Re-adding an existing tag changes modification date\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\n\n\n  addTagIfNecessary(tiddler, tag, e) {\n    if (this.hasTag(tiddler, tag)) return;\n    this.invokeFieldMangler(tiddler, 'tm-add-tag', tag, e);\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\n\n\n  hasTag(tiddler, tag) {\n    var _a, _b, _c;\n\n    return !!((_c = (_b = (_a = $tw.wiki.getTiddler(tiddler)) === null || _a === void 0 ? void 0 : _a.fields) === null || _b === void 0 ? void 0 : _b.tags) === null || _c === void 0 ? void 0 : _c.includes(tag));\n  }\n\n  refreshCommands() {\n    var _a, _b, _c, _d, _e;\n\n    this.actions = [];\n    this.actions.push({\n      name: 'Refresh Command Palette',\n      action: e => {\n        this.refreshCommandPalette();\n        this.promptCommand('');\n      },\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Explorer',\n      action: e => this.explorer(e),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'History',\n      caption: '查看历史记录',\n      action: e => this.showHistory(),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'New Command Wizard',\n      caption: '交互式创建新命令',\n      action: e => this.newCommandWizard(),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Add tag to tiddler',\n      caption: '向条目添加标签',\n      action: e => this.tagOperation(e, '选择一个条目来添加标签', '选择一个标签来添加 (⇧⏎ 可以多次添加)', (tiddler, terms) => $tw.wiki.filterTiddlers(`[!is[system]tags[]] [is[system]tags[]] -[[${tiddler}]tags[]] +[${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${terms}]]`), true, 'tm-add-tag'),\n      keepPalette: true\n    });\n    this.actions.push({\n      name: 'Remove tag',\n      caption: '去除标签',\n      action: e => this.tagOperation(e, '选择一个条目来去除标签', '选择一个标签来去除 (⇧⏎ 可以去除多次)', (tiddler, terms) => $tw.wiki.filterTiddlers(`[[${tiddler}]tags[]] +[${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${terms}]]`), false, 'tm-remove-tag'),\n      keepPalette: true\n    });\n    let commandTiddlers = this.getTiddlersWithTag(this.customCommandsTag);\n\n    for (let tiddler of commandTiddlers) {\n      if (!tiddler.fields[this.typeField] === undefined) continue;\n      let name = tiddler.fields[this.nameField];\n      if (typeof name !== 'string') throw new Error(`命令菜单条目 ${tiddler.fields.title} 缺失 ${this.nameField} 字段`);\n      let caption = this.translateCaption(tiddler.fields[this.captionField]);\n      let type = tiddler.fields[this.typeField];\n      let text = this.translateCaption(tiddler.fields.text);\n      if (text === undefined) text = '';\n      let textFirstLine = ((_a = text.match(/^.*/)) !== null && _a !== void 0 ? _a : [''])[0];\n      let hint = this.translateCaption((_c = (_b = tiddler.fields[this.hintField]) !== null && _b !== void 0 ? _b : tiddler.fields[this.nameField]) !== null && _c !== void 0 ? _c : '');\n\n      if (type === 'shortcut') {\n        let trigger = tiddler.fields[this.triggerField];\n        if (trigger === undefined) continue;\n        this.triggers.push({\n          name,\n          caption,\n          trigger,\n          text,\n          hint\n        });\n        continue;\n      }\n\n      if (!tiddler.fields[this.nameField] === undefined) continue;\n\n      if (type === 'prompt') {\n        let immediate = !!tiddler.fields[this.immediateField];\n        let caret = (_d = Number(tiddler.fields[this.caretField])) !== null && _d !== void 0 ? _d : 0;\n        let action = {\n          name,\n          caption,\n          hint,\n          action: () => this.promptCommand(textFirstLine, caret),\n          keepPalette: !immediate,\n          immediate: immediate\n        };\n        this.actions.push(action);\n        continue;\n      }\n\n      if (type === 'prompt-basic') {\n        let caret = (_e = Number(tiddler.fields[this.caretField])) !== null && _e !== void 0 ? _e : 0;\n        let action = {\n          name,\n          caption,\n          hint,\n          action: () => this.promptCommandBasic(textFirstLine, caret, hint),\n          keepPalette: true\n        };\n        this.actions.push(action);\n        continue;\n      }\n\n      if (type === 'message') {\n        this.actions.push({\n          name,\n          caption,\n          hint,\n          action: e => this.tmMessageBuilder(textFirstLine)(e),\n          keepPalette: false\n        });\n        continue;\n      }\n\n      if (type === 'actionString') {\n        let userInput = tiddler.fields[this.userInputField] !== undefined && tiddler.fields[this.userInputField] === 'true';\n\n        if (userInput) {\n          this.actions.push({\n            name,\n            caption,\n            hint,\n            action: e => this.actionStringInput(text, hint, e),\n            keepPalette: true\n          });\n        } else {\n          this.actions.push({\n            name,\n            caption,\n            hint,\n            action: e => this.actionStringBuilder(text)(e),\n            keepPalette: false\n          });\n        }\n\n        continue;\n      }\n\n      if (type === 'history') {\n        let mode = tiddler.fields[this.modeField];\n        this.actions.push({\n          name,\n          caption,\n          hint,\n          action: e => this.commandWithHistoryPicker(textFirstLine, hint, mode).handler(e),\n          keepPalette: true\n        });\n        continue;\n      }\n    }\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'caption' implicitly has an 'any' type.\n\n\n  translateCaption(caption) {\n    return $tw.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', caption);\n  }\n\n  newCommandWizard() {\n    this.blockProviderChange = true;\n    this.input.value = '';\n    this.hint.innerText = '命令名';\n    let name = '';\n    let type = '';\n    let hint = '';\n\n    let messageStep = () => {\n      this.input.value = '';\n      this.hint.innerText = '输入信息';\n\n      this.currentResolver = e => {\n        this.tmMessageBuilder('tm-new-tiddler', {\n          title: '$:/' + name,\n          tags: this.customCommandsTag,\n          [this.typeField]: type,\n          [this.nameField]: name,\n          [this.hintField]: hint,\n          text: this.input.value\n        })(e);\n        this.closePalette();\n      };\n    };\n\n    let hintStep = () => {\n      this.input.value = '';\n      this.hint.innerText = '输入提示文本';\n\n      this.currentResolver = e => {\n        hint = this.input.value;\n        messageStep();\n      };\n    };\n\n    let typeStep = () => {\n      this.input.value = '';\n      this.hint.innerText = 'Enter type (prompt, prompt-basic, message, actionString, history)';\n\n      this.currentResolver = e => {\n        type = this.input.value;\n\n        if (type === 'history') {\n          hintStep();\n        } else {\n          this.tmMessageBuilder('tm-new-tiddler', {\n            title: '$:/' + name,\n            tags: this.customCommandsTag,\n            [this.typeField]: type,\n            [this.nameField]: name\n          })(e);\n          this.closePalette();\n        }\n      };\n    };\n\n    this.currentProvider = terms => {};\n\n    this.currentResolver = e => {\n      if (this.input.value.length === 0) return;\n      name = this.input.value;\n      typeStep();\n    };\n\n    this.showResults([]);\n  }\n\n  explorer(e) {\n    this.blockProviderChange = true;\n    this.input.value = '$:/';\n    this.lastExplorerInput = '$:/';\n    this.hint.innerText = 'Explorer (⇧⏎ to add multiple)';\n\n    this.currentProvider = terms => this.explorerProvider('$:/', terms);\n\n    this.currentResolver = e => {\n      var _a;\n\n      if (this.currentSelection === 0) return;\n      (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n    };\n\n    this.onInput();\n  }\n\n  explorerProvider(url, terms) {\n    let switchFolder = url => {\n      this.input.value = url;\n      this.lastExplorerInput = this.input.value;\n\n      this.currentProvider = terms => this.explorerProvider(url, terms);\n\n      this.onInput();\n    };\n\n    if (!this.input.value.startsWith(url)) {\n      this.input.value = this.lastExplorerInput;\n    }\n\n    this.lastExplorerInput = this.input.value;\n    this.currentSelection = 0;\n    let search = this.input.value.substr(url.length);\n    let tiddlers = $tw.wiki.filterTiddlers(`[removeprefix[${url}]splitbefore[/]sort[]${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${search}]]`);\n    let folders = [];\n    let files = [];\n\n    for (let tiddler of tiddlers) {\n      if (tiddler.endsWith('/')) {\n        folders.push({\n          name: tiddler,\n          action: e => switchFolder(`${url}${tiddler}`)\n        });\n      } else {\n        files.push({\n          name: tiddler,\n          action: e => {\n            this.navigateTo(`${url}${tiddler}`);\n\n            if (!e.getModifierState('Shift')) {\n              this.closePalette();\n            }\n          }\n        });\n      }\n    }\n\n    let topResult;\n\n    if (url !== '$:/') {\n      let splits = url.split('/');\n      splits.splice(splits.length - 2);\n      let parent = splits.join('/') + '/';\n      topResult = {\n        name: '..',\n        action: e => switchFolder(parent)\n      };\n      this.showResults([topResult, ...folders, ...files]);\n      return;\n    }\n\n    this.showResults([...folders, ...files]);\n  }\n\n  setSetting(name, value) {\n    //doing the validation here too (it's also done in refreshSettings, so you can load you own settings with a json file)\n    if (typeof value === 'string') {\n      if (value === 'true') value = true;\n      if (value === 'false') value = false;\n    }\n\n    this.settings[name] = value;\n    $tw.wiki.setTiddlerData(this.settingsPath, this.settings);\n  } //loadSettings?\n\n\n  refreshSettings() {\n    //get user or default settings\n    this.settings = $tw.wiki.getTiddlerData(this.settingsPath, Object.assign({}, this.defaultSettings)); //Adding eventual missing properties to current user settings\n\n    for (let prop in this.defaultSettings) {\n      if (!this.defaultSettings.hasOwnProperty(prop)) continue;\n      const ownProp = prop;\n\n      if (this.settings[ownProp] === undefined) {\n        this.settings[ownProp] = this.defaultSettings[ownProp];\n      }\n    } // cast all booleans from string from tw\n\n\n    for (let prop in this.settings) {\n      if (!this.settings.hasOwnProperty(prop)) continue;\n      const ownProp = prop;\n      if (typeof this.settings[ownProp] !== 'string') continue;\n      if (this.settings[ownProp].toLowerCase() === 'true') this.settings[ownProp] = true;\n      if (this.settings[ownProp].toLowerCase() === 'false') this.settings[ownProp] = false;\n    }\n  } //helper function to retrieve all tiddlers (+ their fields) with a tag\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tag' implicitly has an 'any' type.\n\n\n  getTiddlersWithTag(tag) {\n    let tiddlers = $tw.wiki.getTiddlersWithTag(tag); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 't' implicitly has an 'any' type.\n\n    return tiddlers.map(t => $tw.wiki.getTiddler(t));\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.\n\n\n  render(parent, nextSibling) {\n    this.parentDomNode = parent;\n    this.execute();\n\n    if ($tw.utils.pinyinfuse === undefined) {\n      console.warn('需要安装 linonetwo/pinyin-fuzzy-search 插件以获得模糊搜索和拼音搜索的能力');\n    }\n\n    this.history = $tw.wiki.getTiddlerData(this.commandHistoryPath, {\n      history: []\n    }).history;\n    $tw.rootWidget.addEventListener('open-command-palette', e => this.openPalette(e, e.param));\n    $tw.rootWidget.addEventListener('open-command-palette-selection', e => this.openPaletteSelection(e));\n    $tw.rootWidget.addEventListener('insert-command-palette-result', e => this.insertSelectedResult(e));\n    $tw.rootWidget.addEventListener('command-palette-switch-history', e => this.handleSwitchHistory(e, true));\n    $tw.rootWidget.addEventListener('command-palette-switch-history-back', e => this.handleSwitchHistory(e, false));\n    let inputAndMainHintWrapper = this.createElement('div', {\n      className: 'inputhintwrapper'\n    });\n    this.div = this.createElement('div', {\n      className: 'commandpalette'\n    }, {\n      display: 'none'\n    });\n    this.mask = this.createElement('div', {\n      className: 'commandpalette-masklayer'\n    }, {\n      opacity: '0'\n    });\n    this.input = this.createElement('input', {\n      type: 'text'\n    });\n    this.hint = this.createElement('div', {\n      className: 'commandpalettehint commandpalettehintmain'\n    });\n    inputAndMainHintWrapper.append(this.input, this.hint);\n    this.scrollDiv = this.createElement('div', {\n      className: 'cp-scroll'\n    });\n    this.div.append(inputAndMainHintWrapper, this.scrollDiv);\n    this.input.addEventListener('keydown', e => this.onKeyDown(e));\n    this.input.addEventListener('input', () => this.onInput(this.input.value)); // Fix IME issue\n\n    this.input.addEventListener('compositionstart', () => {\n      this.isIMEOpen = true;\n    }, false);\n    this.input.addEventListener('compositionend', () => {\n      this.isIMEOpen = false;\n    }, false);\n    document.addEventListener('click', e => this.onClick(e));\n    parent.insertBefore(this.mask, nextSibling);\n    parent.insertBefore(this.div, nextSibling);\n    this.refreshCommandPalette();\n    this.symbolProviders['>'] = {\n      searcher: terms => this.actionProvider(terms),\n      resolver: e => this.actionResolver(e)\n    };\n    this.symbolProviders['》'] = this.symbolProviders['>'];\n    this.symbolProviders['##'] = {\n      searcher: terms => this.tagListProvider(terms),\n      resolver: e => this.tagListResolver(e)\n    };\n    this.symbolProviders['#'] = {\n      searcher: terms => this.tagProvider(terms),\n      resolver: e => this.defaultResolver(e)\n    };\n    this.symbolProviders['?'] = {\n      searcher: terms => this.helpProvider(terms),\n      resolver: e => this.helpResolver(e)\n    };\n    this.symbolProviders['？'] = this.symbolProviders['?'];\n    this.symbolProviders['['] = {\n      searcher: (terms, hint) => this.filterProvider(terms, hint),\n      resolver: e => this.filterResolver(e)\n    };\n    this.symbolProviders['+'] = {\n      searcher: terms => this.createTiddlerProvider(terms),\n      resolver: e => this.createTiddlerResolver(e)\n    };\n    this.symbolProviders['|'] = {\n      searcher: terms => this.settingsProvider(terms),\n      resolver: e => this.settingsResolver(e)\n    };\n    this.currentResults = [];\n\n    this.currentProvider = () => {};\n  }\n\n  helpProvider(terms) {\n    //TODO: tiddlerify?\n    this.currentSelection = 0;\n    this.hint.innerText = 'Help';\n    let searches = [{\n      name: '直接打字是搜索条目标题和内容；而以下述特殊字符开头可以执行特殊搜索',\n      action: () => this.promptCommand('')\n    }, {\n      name: '> 查看和搜索命令列表',\n      action: () => this.promptCommand('>')\n    }, {\n      name: '+ 创建条目，先输入条目名，然后可以带上#打标签',\n      action: () => this.promptCommand('+')\n    }, {\n      name: '# 列出带标签的条目（标签不可包含空格，用空格隔开多个#开头的标签，不带#的作为搜索词）',\n      action: () => this.promptCommand('#')\n    }, {\n      name: '## 搜索标签列表',\n      action: () => this.promptCommand('##', 2)\n    }, {\n      name: '[ 筛选器语句',\n      action: () => this.promptCommand('[')\n    }, {\n      name: '| 命令菜单设置',\n      action: () => this.promptCommand('|')\n    }, {\n      name: '\\\\ 规避第一个字符是上述命令字符的情况，例如「\\\\#」可搜标题以「#」起头的条目',\n      action: () => this.promptCommand('\\\\')\n    }, {\n      name: '? 打开帮助',\n      action: () => this.promptCommand('?')\n    }];\n    this.showResults(searches);\n  }\n  /**\n   * 解析输入，默认前两位可能是命令字符，会到 this.symbolProviders 里查找相应的 provider\n   */\n\n\n  parseCommand(text) {\n    let terms = '';\n    let resolver;\n    let provider;\n    let shortcut = this.triggers.find(t => text.startsWith(t.trigger));\n\n    if (shortcut !== undefined) {\n      resolver = e => {\n        let inputWithoutShortcut = this.input.value.substr(shortcut.trigger.length);\n        this.invokeActionString(shortcut.text, this, e, {\n          commandpaletteinput: inputWithoutShortcut\n        });\n        this.closePalette();\n      };\n\n      provider = terms => {\n        this.hint.innerText = shortcut.hint;\n        this.showResults([]);\n      };\n    } else {\n      // 从上到下找，先找长的，再找短的，以便 ## 优先匹配 ## 而不是 #\n      let providerSymbol = Object.keys(this.symbolProviders).sort((a, b) => -a.length + b.length).find(symbol => text.startsWith(symbol));\n\n      if (providerSymbol === undefined) {\n        resolver = this.defaultResolver;\n        provider = this.defaultProvider;\n        terms = text;\n      } else {\n        provider = this.symbolProviders[providerSymbol].searcher;\n        resolver = this.symbolProviders[providerSymbol].resolver;\n        terms = text.replace(providerSymbol, '');\n      }\n    }\n\n    return {\n      resolver,\n      provider,\n      terms\n    };\n  }\n\n  refreshSearchSteps() {\n    this.searchSteps = [];\n    const steps = $tw.wiki.getTiddlerData(this.searchStepsPath).steps;\n\n    for (let step of steps) {\n      this.searchSteps.push(this.searchStepBuilder($tw.utils.pinyinfuse ? step.filter : step.filterFallback, Number($tw.utils.pinyinfuse ? step.caret : step.caretFallback), step.hint));\n    }\n  }\n\n  refreshCommandPalette() {\n    this.refreshSettings(); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n\n    this.refreshThemes();\n    this.refreshCommands();\n    this.refreshSearchSteps();\n  }\n\n  handleSwitchHistory(event, forward) {\n    // we have history list in palette by default, if we have showHistoryOnOpen === true\n    // TODO: handle this if !showHistoryOnOpen\n    if (!this.isOpened) {\n      this.openPalette(event, undefined);\n    }\n\n    this.onKeyDown(new KeyboardEvent('keydown', {\n      bubbles: false,\n      cancelable: true,\n      key: forward ? 'ArrowDown' : 'ArrowUp',\n      shiftKey: false\n    }));\n\n    const onCtrlKeyUp = keyUpEvent => {\n      if (!keyUpEvent.ctrlKey) {\n        this.currentResolver(keyUpEvent);\n        window.removeEventListener('keyup', onCtrlKeyUp);\n      }\n    };\n\n    window.addEventListener('keyup', onCtrlKeyUp);\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'command' implicitly has an 'any' type.\n\n\n  updateCommandHistory(command) {\n    this.history = Array.from(new Set([command.name, ...this.history]));\n    $tw.wiki.setTiddlerData(this.commandHistoryPath, {\n      history: this.history\n    });\n  }\n\n  historyProviderBuilder(hint, mode) {\n    return terms => {\n      this.currentSelection = 0;\n      this.hint.innerText = hint;\n      let results;\n\n      if (mode !== undefined && mode === 'drafts') {\n        results = $tw.wiki.filterTiddlers('[has:field[draft.of]]');\n      } else if (mode !== undefined && mode === 'story') {\n        results = $tw.wiki.filterTiddlers('[list[$:/StoryList]]');\n      } else {\n        results = this.getHistory();\n      }\n\n      results = results.map(r => {\n        return {\n          name: r\n        };\n      });\n      this.showResults(results);\n    };\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\n\n\n  commandWithHistoryPicker(message, hint, mode) {\n    let handler = e => {\n      this.blockProviderChange = true;\n      this.allowInputFieldSelection = true;\n      this.currentProvider = provider;\n      this.currentResolver = resolver;\n      this.input.value = '';\n      this.onInput(this.input.value);\n    };\n\n    let provider = this.historyProviderBuilder(hint, mode);\n\n    let resolver = e => {\n      if (this.currentSelection === 0) return;\n      let title = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n      this.parentWidget.dispatchEvent({\n        type: message,\n        param: title,\n        tiddlerTitle: title\n      });\n      this.closePalette();\n    };\n\n    return {\n      handler,\n      provider,\n      resolver\n    };\n  }\n\n  onInput(text = '') {\n    if (this.blockProviderChange) {\n      //prevent provider changes\n      this.currentProvider(text);\n      this.setSelectionToFirst();\n      return;\n    }\n\n    let {\n      resolver,\n      provider,\n      terms\n    } = this.parseCommand(text);\n    this.currentResolver = resolver;\n    this.currentProvider = provider;\n    this.currentProvider(terms);\n    this.setSelectionToFirst();\n  }\n\n  onClick(event) {\n    if (this.isOpened && !this.div.contains(event.target)) {\n      this.closePalette();\n    }\n  }\n\n  openPaletteSelection(event) {\n    let selection = this.getCurrentSelection();\n    this.openPalette(event, selection);\n  }\n\n  openPalette(e, selection) {\n    // call currentProvider first to ask currentProvider load latest history. Otherwise it will load history after open, which will show old one and refresh.\n    this.currentProvider('');\n    this.isOpened = true;\n    this.allowInputFieldSelection = false;\n    this.goBack = undefined;\n    this.blockProviderChange = false;\n    let activeElement = this.getActiveElement();\n    this.previouslyFocused = {\n      element: activeElement,\n      start: activeElement.selectionStart,\n      end: activeElement.selectionEnd,\n      caretPos: activeElement.selectionEnd\n    };\n    this.input.value = '';\n\n    if (selection !== undefined) {\n      this.input.value = selection;\n    }\n\n    if (this.settings.alwaysPassSelection) {\n      this.input.value += this.getCurrentSelection();\n    }\n\n    this.currentSelection = 0;\n    this.onInput(this.input.value); //Trigger results on open\n\n    this.div.style.display = 'flex';\n    this.mask.style.opacity = '0.6';\n    this.input.focus();\n  }\n\n  insertSelectedResult() {\n    if (!this.isOpened) return;\n    if (this.currentSelection === 0) return; //TODO: what to do here?\n\n    let previous = this.previouslyFocused;\n    let previousValue = previous.element.value;\n    if (previousValue === undefined) return;\n    let selection = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name'); // TODO: early return may cause bug here?\n\n    if (!selection) return;\n\n    if (previous.start !== previous.end) {\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.end);\n    } else {\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.start);\n    }\n\n    this.previouslyFocused.caretPos = previous.start + selection.length;\n    this.closePalette();\n  }\n\n  closePalette() {\n    this.div.style.display = 'none';\n    this.mask.style.opacity = '0';\n    this.isOpened = false;\n    this.focusAtCaretPosition(this.previouslyFocused.element, this.previouslyFocused.caretPos);\n  }\n\n  onKeyDown(e) {\n    if (e.key === 'Escape') {\n      //\t\t\t\t\t\t\t\t\t\\/ There's no previous state\n      if (!this.settings.escapeGoesBack || this.goBack === undefined) {\n        this.closePalette();\n      } else {\n        this.goBack();\n        this.goBack = undefined;\n      }\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = this.currentSelection - 1;\n\n      if (sel === 0) {\n        if (!this.allowInputFieldSelection) {\n          sel = this.currentResults.length;\n        }\n      } else if (sel < 0) {\n        sel = this.currentResults.length;\n      }\n\n      this.setSelection(sel);\n    } else if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = (this.currentSelection + 1) % (this.currentResults.length + 1);\n\n      if (!this.allowInputFieldSelection && sel === 0 && this.currentResults.length !== 0) {\n        sel = 1;\n      }\n\n      this.setSelection(sel);\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.validateSelection(e);\n    }\n  }\n\n  addResult(result, id) {\n    let resultDiv = this.createElement('div', {\n      className: 'commandpaletteresult'\n    });\n    let titleDiv = this.createElement('div', {\n      className: 'commandpalettetitle',\n      innerText: result.caption || result.name\n    });\n    resultDiv.appendChild(titleDiv);\n\n    if (result.hint !== undefined) {\n      let hint = this.createElement('div', {\n        className: 'commandpalettehint',\n        innerText: result.hint\n      });\n      resultDiv.appendChild(hint);\n    } // we will get this later\n\n\n    resultDiv.dataset.result = JSON.stringify(result);\n    /** we use this to pass the action */\n\n    if (result.action) {\n      resultDiv.onabort = result.action;\n    }\n\n    this.currentResults.push(resultDiv);\n    resultDiv.addEventListener('click', e => {\n      e.stopPropagation();\n      e.preventDefault();\n      this.setSelection(id + 1);\n      this.validateSelection(e);\n    });\n    resultDiv.addEventListener('contextmenu', e => {\n      e.stopPropagation();\n\n      if (e.ctrlKey && e.button === 0) {\n        e.preventDefault();\n        this.setSelection(id + 1);\n        this.validateSelection(e);\n      }\n    });\n    this.scrollDiv.appendChild(resultDiv);\n  }\n\n  getDataFromResultDiv(resultDiv, key) {\n    var _a;\n\n    return JSON.parse((_a = resultDiv.dataset.result) !== null && _a !== void 0 ? _a : '{}')[key];\n  }\n\n  getActionFromResultDiv(resultDiv) {\n    return resultDiv.onabort;\n  }\n\n  validateSelection(e) {\n    if (!this.isIMEOpen) {\n      this.currentResolver(e);\n    }\n  }\n\n  defaultResolver(e) {\n    if (e.getModifierState('Shift')) {\n      this.input.value = '+' + this.input.value; //this resolver expects that the input starts with +\n\n      this.createTiddlerResolver(e);\n      return;\n    }\n\n    if (this.currentSelection === 0) return;\n    let selectionTitle = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n    this.closePalette();\n    this.navigateTo(selectionTitle);\n  }\n  /**\n   * 调用 tm-navigate 跳转到标题对应的条目处\n   */\n\n\n  navigateTo(title) {\n    if (title) {\n      this.parentWidget.dispatchEvent({\n        type: 'tm-navigate',\n        param: title,\n        navigateTo: title\n      });\n    }\n  }\n\n  showHistory() {\n    this.hint.innerText = '历史记录';\n\n    this.currentProvider = terms => {\n      let results;\n\n      if (terms.length === 0) {\n        results = this.getHistory();\n      } else {\n        if ($tw.utils.pinyinfuse) {\n          results = $tw.utils.pinyinfuse(this.getHistory(), terms).map(item => item.item);\n        } else {\n          results = this.getHistory().filter(item => item.toLowerCase().includes(terms));\n        }\n      }\n\n      this.showResults(results.map(title => {\n        return {\n          name: title,\n          action: () => {\n            this.navigateTo(title);\n            this.closePalette();\n          }\n        };\n      }));\n    };\n\n    this.currentResolver = e => {\n      var _a;\n\n      if (this.currentSelection === 0) return;\n      (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n    };\n\n    this.input.value = '';\n    this.blockProviderChange = true;\n    this.onInput(this.input.value);\n  }\n\n  setSelectionToFirst() {\n    let sel = 1;\n\n    if (this.allowInputFieldSelection || this.currentResults.length === 0) {\n      sel = 0;\n    }\n\n    this.setSelection(sel);\n  }\n\n  setSelection(id) {\n    var _a, _b, _c, _d;\n\n    this.currentSelection = id;\n\n    for (let i = 0; i < this.currentResults.length; i++) {\n      let selected = this.currentSelection === i + 1;\n      this.currentResults[i].className = selected ? 'commandpaletteresult commandpaletteresultselected' : 'commandpaletteresult';\n    }\n\n    if (this.currentSelection === 0) {\n      this.scrollDiv.scrollTop = 0;\n      return;\n    }\n\n    let scrollHeight = this.scrollDiv.offsetHeight;\n    let scrollPos = this.scrollDiv.scrollTop;\n    let selectionPos = Number((_b = (_a = this.currentResults[this.currentSelection - 1]) === null || _a === void 0 ? void 0 : _a.offsetTop) !== null && _b !== void 0 ? _b : 0);\n    let selectionHeight = Number((_d = (_c = this.currentResults[this.currentSelection - 1]) === null || _c === void 0 ? void 0 : _c.offsetHeight) !== null && _d !== void 0 ? _d : 0);\n\n    if (selectionPos < scrollPos || selectionPos >= scrollPos + scrollHeight) {\n      //select the closest scrolling position showing the selection\n      let a = selectionPos;\n      let b = selectionPos - scrollHeight + selectionHeight;\n      a = Math.abs(a - scrollPos);\n      b = Math.abs(b - scrollPos);\n\n      if (a < b) {\n        this.scrollDiv.scrollTop = selectionPos;\n      } else {\n        this.scrollDiv.scrollTop = selectionPos - scrollHeight + selectionHeight;\n      }\n    }\n  }\n\n  getHistory() {\n    var _a;\n\n    const historyData = (_a = $tw.wiki.getTiddlerData('$:/HistoryList')) !== null && _a !== void 0 ? _a : [];\n    const [first, second, ...rest] = uniq_1([...historyData.reverse().map(x => x.title), ...$tw.wiki.filterTiddlers('[list[$:/StoryList]]')]).filter(t => this.tiddlerOrShadowExists(t)); // swap first and second, so its easier to switch to second, like using ctrl + tab in vscode\n\n    return [second, first, ...rest];\n  }\n\n  tiddlerOrShadowExists(title) {\n    return $tw.wiki.tiddlerExists(title) || $tw.wiki.isShadowTiddler(title);\n  }\n  /** This is opened when you click on the menu icon. */\n\n\n  defaultProvider(terms) {\n    this.hint.innerText = '⏎搜索条目（⇧⏎ 创建条目）（？问号查看帮助）';\n    let searches;\n    if (terms.startsWith('\\\\')) terms = terms.substr(1);\n\n    if (terms.length === 0) {\n      if (this.settings.showHistoryOnOpen) {\n        searches = this.getHistory().map(s => {\n          return {\n            name: s,\n            hint: '历史记录'\n          };\n        });\n      } else {\n        searches = [];\n      }\n    } else {\n      searches = uniq_1(this.searchSteps.reduce((acc, current) => [...acc, ...current(terms)], []));\n    }\n\n    this.showResults(searches);\n  }\n\n  searchStepBuilder(filter, caret, hint) {\n    return terms => {\n      let search = filter.substring(0, caret) + terms + filter.substring(caret);\n      let results = $tw.wiki.filterTiddlers(search).map(s => {\n        return {\n          name: s,\n          hint: hint\n        };\n      });\n      return results;\n    };\n  }\n\n  tagListProvider(terms) {\n    this.currentSelection = 0;\n    this.hint.innerText = '搜索标签列表';\n    let searches;\n\n    if (terms.length === 0) {\n      searches = $tw.wiki.filterTiddlers('[!is[system]tags[]][is[system]tags[]][all[shadows]tags[]]');\n    } else {\n      searches = $tw.wiki.filterTiddlers($tw.utils.pinyinfuse ? `[all[]tags[]!is[system]pinyinfuse[${terms}]][all[]tags[]is[system]pinyinfuse[${terms}]][all[shadows]tags[]pinyinfuse[${terms}]]` : `[all[]tags[]!is[system]search[${terms}]][all[]tags[]is[system]search[${terms}]][all[shadows]tags[]search[${terms}]]`);\n    }\n\n    searches = searches.map(s => {\n      return {\n        name: s\n      };\n    });\n    this.showResults(searches);\n  }\n\n  tagListResolver(e) {\n    if (this.currentSelection === 0) {\n      let input = this.input.value.substring(2);\n      let exist = $tw.wiki.filterTiddlers('[tag[' + input + ']]');\n      if (!exist) return;\n      this.input.value = '##' + input;\n      return;\n    }\n\n    let result = this.currentResults[this.currentSelection - 1];\n    this.input.value = '##' + result.innerText;\n    this.onInput(this.input.value);\n  }\n\n  tagProvider(terms) {\n    this.currentSelection = 0;\n    this.hint.innerText = '用「#标签 #标签2」搜索条目';\n    let tiddlerNameSearchResults = [];\n\n    if (terms.length !== 0) {\n      let {\n        tags,\n        searchTerms,\n        tagsFilter\n      } = this.parseTags(this.input.value);\n      let taggedTiddlers = $tw.wiki.filterTiddlers(tagsFilter);\n\n      if (taggedTiddlers.length !== 0) {\n        if (tags.length === 1) {\n          let tag = tags[0];\n          let tagTiddlerExists = this.tiddlerOrShadowExists(tag);\n          if (tagTiddlerExists && searchTerms.some(s => tag.includes(s))) tiddlerNameSearchResults.push(tag);\n        }\n\n        tiddlerNameSearchResults = [...tiddlerNameSearchResults, ...taggedTiddlers];\n      }\n    }\n\n    this.showResults(tiddlerNameSearchResults.map(tiddlerName => {\n      return {\n        name: tiddlerName\n      };\n    }));\n  }\n  /**\n   * @param input `'#aaa 1 #bbb#ccc'` => `['aaa', 'bbb#ccc']` and search `1`\n   */\n\n\n  parseTags(input) {\n    let splits = input.split(' ').filter(s => s !== '');\n    let tags = [];\n    let searchTerms = [];\n\n    for (let i = 0; i < splits.length; i++) {\n      // 空格分隔的结果可以以 # 开头，表示标签\n      if (splits[i].startsWith('#')) {\n        tags.push(splits[i].substr(1));\n        continue;\n      } // 也可以不带 # ，表示搜索词\n\n\n      searchTerms.push(splits[i]);\n    }\n\n    let tagsFilter = `[all[tiddlers+system+shadows]${tags.reduce((a, c) => {\n      return a + 'tag[' + c + ']';\n    }, '')}]`;\n\n    if (searchTerms.length !== 0) {\n      tagsFilter = tagsFilter.substring(0, tagsFilter.length - 1); //remove last ']'\n\n      tagsFilter += `${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${searchTerms.join(' ')}]]`;\n    }\n\n    return {\n      tags,\n      searchTerms,\n      tagsFilter\n    };\n  }\n\n  settingsProvider(terms) {\n    var _a, _b, _c;\n\n    this.currentSelection = 0;\n    this.hint.innerText = 'Select the setting you want to change';\n\n    let isNumerical = terms => terms.length !== 0 && terms.match(/\\D/gm) === null;\n\n    let isBoolean = terms => terms.length !== 0 && terms.match(/(true\\b)|(false\\b)/gim) !== null;\n\n    this.showResults([{\n      name: (_c = 'Theme (currently ' + ((_b = (_a = this.settings.theme) === null || _a === void 0 ? void 0 : _a.match) === null || _b === void 0 ? void 0 : _b.call(_a, /[^\\/]*$/))) !== null && _c !== void 0 ? _c : 'no ' + ')',\n      action: () => this.promptForThemeSetting()\n    }, this.settingResultBuilder('Max results', 'maxResults', 'Choose the maximum number of results', isNumerical, 'Error: value must be a positive integer'), this.settingResultBuilder('Show history on open', 'showHistoryOnOpen', 'Chose whether to show the history when you open the palette', isBoolean, \"Error: value must be 'true' or 'false'\"), this.settingResultBuilder('Escape to go back', 'escapeGoesBack', 'Chose whether ESC should go back when possible', isBoolean, \"Error: value must be 'true' or 'false'\"), this.settingResultBuilder('Use selection as search query', 'alwaysPassSelection', 'Chose your current selection is passed to the command palette', isBoolean, \"Error: value must be 'true' or 'false'\"), this.settingResultBuilder('Never Basic', 'neverBasic', 'Chose whether to override basic prompts to show filter operation', isBoolean, \"Error: value must be 'true' or 'false'\"), this.settingResultBuilder('Field preview max size', 'maxResultHintSize', 'Choose the maximum hint length for field preview', isNumerical, 'Error: value must be a positive integer')]);\n  }\n\n  settingResultBuilder(name, settingName, hint, validator, errorMsg) {\n    return {\n      name: name + ' (currently ' + this.settings[settingName] + ')',\n      action: () => this.promptForSetting(settingName, hint, validator, errorMsg)\n    };\n  }\n\n  settingsResolver(e) {\n    var _a;\n\n    if (this.currentSelection === 0) return;\n\n    this.goBack = () => {\n      this.input.value = '|';\n      this.blockProviderChange = false;\n      this.onInput(this.input.value);\n    };\n\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n  }\n\n  promptForThemeSetting() {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = false;\n\n    this.currentProvider = terms => {\n      this.currentSelection = 0;\n      this.hint.innerText = '选择一个主题';\n      let defaultValue = this.defaultSettings['theme'];\n      let results = [{\n        name: '恢复默认值: ' + defaultValue.match(/[^\\/]*$/),\n        action: () => {\n          this.setSetting('theme', defaultValue); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n\n          this.refreshThemes();\n        }\n      }];\n\n      for (let theme of this.themes) {\n        let name = theme.fields.title;\n        let shortName = name.match(/[^\\/]*$/);\n\n        let action = () => {\n          this.setSetting('theme', name); // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n\n          this.refreshThemes();\n        };\n\n        results.push({\n          name: shortName,\n          action: action\n        });\n      }\n\n      this.showResults(results);\n    };\n\n    this.currentResolver = e => {\n      var _a;\n\n      (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n    };\n\n    this.input.value = '';\n    this.onInput(this.input.value);\n  }\n\n  promptForSetting(settingName, hint, validator, errorMsg) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n\n    this.currentProvider = terms => {\n      this.currentSelection = 0;\n      this.hint.innerText = hint;\n      let defaultValue = this.defaultSettings[settingName];\n      let results = [{\n        name: 'Revert to default value: ' + defaultValue,\n        action: () => this.setSetting(settingName, defaultValue)\n      }];\n\n      if (!validator(terms)) {\n        results.push({\n          name: errorMsg,\n          action: () => {}\n        });\n      }\n\n      this.showResults(results);\n    };\n\n    this.currentResolver = e => {\n      if (this.currentSelection === 0) {\n        let input = this.input.value;\n\n        if (validator(input)) {\n          this.setSetting(settingName, input);\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      } else {\n        let action = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1]);\n\n        if (action) {\n          action(e);\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      }\n    };\n\n    this.input.value = this.settings[settingName];\n    this.onInput(this.input.value);\n  }\n\n  showResults(results) {\n    var _a;\n\n    for (let cur of this.currentResults) {\n      cur.remove();\n    }\n\n    this.currentResults = [];\n    let resultCount = 0;\n\n    for (let result of results) {\n      this.addResult(result, resultCount);\n      resultCount++;\n      if (resultCount >= ((_a = this.settings.maxResults) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResults)) break;\n    }\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\n\n\n  tmMessageBuilder(message, params = {}) {\n    return e => {\n      let event = {\n        type: message,\n        paramObject: params,\n        event: e\n      };\n      this.parentWidget.dispatchEvent(event);\n    };\n  }\n\n  actionProvider(terms) {\n    this.currentSelection = 0;\n    this.hint.innerText = '查看和搜索命令列表';\n    let results;\n\n    if (terms.length === 0) {\n      results = this.getCommandHistory();\n    } else {\n      /**\n       * $tw.utils.pinyinfuse: (xxx) => {\n              item: T;\n              refIndex: number;\n              score?: number | undefined;\n              matches?: readonly Fuse.FuseResultMatch[] | undefined;\n          }[]\n       */\n      if ($tw.utils.pinyinfuse) {\n        results = $tw.utils.pinyinfuse(this.actions, terms.toLowerCase(), ['name', 'caption']).map(item => item.item);\n      } else {\n        results = this.actions.filter(item => {\n          var _a, _b;\n\n          return item.name.toLowerCase().includes(terms.toLowerCase()) || ((_b = (_a = item.caption) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === null || _b === void 0 ? void 0 : _b.includes(terms.toLowerCase()));\n        });\n      }\n    }\n\n    this.showResults(results);\n  }\n\n  filterProvider(terms, hint) {\n    var _a;\n\n    this.currentSelection = 0;\n    this.hint.innerText = hint === undefined ? '筛选器语句' : hint;\n    terms = '[' + terms;\n    let fields = $tw.wiki.filterTiddlers('[fields[]]');\n    let results = $tw.wiki.filterTiddlers(terms).map(r => {\n      return {\n        name: r\n      };\n    }); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'i' implicitly has an 'any' type.\n\n    let insertResult = (i, result) => results.splice(i + 1, 0, result);\n\n    for (let i = 0; i < results.length; i++) {\n      let initialResult = results[i];\n      let alreadyMatched = false;\n      let date = 'Invalid Date';\n\n      if (initialResult.name.length === 17) {\n        //to be sure to only match tiddly dates (17 char long)\n        date = $tw.utils.parseDate(initialResult.name).toLocaleString();\n      }\n\n      if (date !== 'Invalid Date') {\n        results[i].hint = date;\n\n        results[i].action = () => {};\n\n        alreadyMatched = true;\n      }\n\n      let isTag = $tw.wiki.getTiddlersWithTag(initialResult.name).length !== 0;\n\n      if (isTag) {\n        if (alreadyMatched) {\n          insertResult(i, Object.assign({}, results[i]));\n          i += 1;\n        }\n\n        results[i].action = () => this.promptCommand('#' + initialResult.name);\n\n        results[i].hint = 'Tag'; //Todo more info?\n\n        alreadyMatched = true;\n      }\n\n      let isTiddler = this.tiddlerOrShadowExists(initialResult.name);\n\n      if (isTiddler) {\n        if (alreadyMatched) {\n          insertResult(i, Object.assign({}, results[i]));\n          i += 1;\n        }\n\n        results[i].action = () => {\n          this.navigateTo(initialResult.name);\n          this.closePalette();\n        };\n\n        results[i].hint = 'Tiddler';\n        alreadyMatched = true;\n      }\n\n      let isField = fields.includes(initialResult.name);\n\n      if (isField) {\n        if (alreadyMatched) {\n          insertResult(i, Object.assign({}, results[i]));\n          i += 1;\n        }\n\n        let parsed;\n\n        try {\n          parsed = $tw.wiki.parseFilter(this.input.value);\n        } catch (e) {} //The error is already displayed to the user\n\n\n        let foundTitles = [];\n\n        for (let node of parsed || []) {\n          if (node.operators.length !== 2) continue;\n\n          if (node.operators[0].operator === 'title' && node.operators[1].operator === 'fields') {\n            foundTitles.push(node.operators[0].operand);\n          }\n        }\n\n        let hint = 'Field';\n\n        if (foundTitles.length === 1) {\n          hint = $tw.wiki.getTiddler(foundTitles[0]).fields[initialResult.name]; // @ts-expect-error ts-migrate(2358) FIXME: The left-hand side of an 'instanceof' expression m... Remove this comment to see the full error message\n\n          if (hint instanceof Date) {\n            hint = hint.toLocaleString();\n          }\n\n          hint = hint.toString().replace(/(\\r\\n|\\n|\\r)/gm, '');\n          let maxSize = ((_a = this.settings.maxResultHintSize) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResultHintSize) - 3;\n\n          if (hint.length > maxSize) {\n            hint = hint.substring(0, maxSize);\n            hint += '...';\n          }\n        }\n\n        results[i].hint = hint;\n\n        results[i].action = () => {};\n\n        alreadyMatched = true;\n      } // let isContentType = terms.includes('content-type');\n\n    }\n\n    this.showResults(results);\n  }\n\n  filterResolver(e) {\n    var _a;\n\n    if (this.currentSelection === 0) return;\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n    e.stopPropagation();\n  }\n\n  helpResolver(e) {\n    var _a;\n\n    if (this.currentSelection === 0) return;\n    (_a = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])) === null || _a === void 0 ? void 0 : _a(e);\n    e.stopPropagation();\n  }\n\n  createTiddlerProvider(terms) {\n    this.currentSelection = 0;\n    this.hint.innerText = '创建条目，空格隔开可以用#打多个标签';\n    this.showResults([]);\n  }\n\n  createTiddlerResolver(e) {\n    let {\n      tags,\n      searchTerms\n    } = this.parseTags(this.input.value.substring(1));\n    let title = searchTerms.join(' '); // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'any[]'.\n\n    tags = tags.join(' ');\n    this.tmMessageBuilder('tm-new-tiddler', {\n      title: title,\n      tags: tags\n    })(e);\n    this.closePalette();\n  }\n\n  promptCommand(value, caret) {\n    this.blockProviderChange = false;\n    this.input.value = value;\n    this.input.focus();\n\n    if (caret !== undefined) {\n      this.input.setSelectionRange(caret, caret);\n    }\n\n    this.onInput(this.input.value);\n  }\n\n  promptCommandBasic(value, caret, hint) {\n    // TODO: I delete this.settings.neverBasic === 'true' ||  here, see if cause bug\n    if (this.settings.neverBasic === true) {\n      //TODO: validate settings to avoid unnecessary checks\n      this.promptCommand(value, caret);\n      return;\n    }\n\n    this.input.value = '';\n    this.blockProviderChange = true;\n    this.currentProvider = this.basicProviderBuilder(value, caret, hint);\n    this.onInput(this.input.value);\n  }\n\n  basicProviderBuilder(value, caret, hint) {\n    let start = value.substr(0, caret);\n    let end = value.substr(caret); // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'input' implicitly has an 'any' type.\n\n    return input => {\n      let {\n        resolver,\n        provider,\n        terms\n      } = this.parseCommand(start + input + end);\n      let backgroundProvider = provider;\n      backgroundProvider(terms, hint);\n      this.currentResolver = resolver;\n    };\n  }\n\n  getCommandHistory() {\n    var _a; // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\n\n\n    this.history = this.history.filter(h => this.actions.some(a => a.name === h)); //get rid of deleted command that are still in history;\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\n\n    let results = this.history.map(h => this.actions.find(a => a.name === h));\n\n    while (results.length <= ((_a = this.settings.maxResults) !== null && _a !== void 0 ? _a : this.defaultSettings.maxResults)) {\n      let nextDefaultAction = this.actions.find(a => !results.includes(a));\n      if (nextDefaultAction === undefined) break;\n      results.push(nextDefaultAction);\n    }\n\n    return results;\n  }\n\n  actionResolver(e) {\n    var _a;\n\n    e.preventDefault();\n    e.stopPropagation();\n    if (this.currentSelection === 0) return;\n    let result = this.actions.find(a => a.name === this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name'));\n    if (!result) return;\n\n    if (result.keepPalette) {\n      let curInput = this.input.value;\n\n      this.goBack = () => {\n        this.input.value = curInput;\n        this.blockProviderChange = false;\n        this.onInput(this.input.value);\n      };\n    }\n\n    this.updateCommandHistory(result);\n    (_a = result.action) === null || _a === void 0 ? void 0 : _a.call(result, e);\n\n    if (result.immediate) {\n      this.validateSelection(e);\n      return;\n    }\n\n    if (!result.keepPalette) {\n      this.closePalette();\n    }\n  }\n\n  getCurrentSelection() {\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    let selection = window.getSelection().toString();\n    if (selection !== '') return selection;\n    let activeElement = this.getActiveElement();\n    if (activeElement === undefined || activeElement.selectionStart === undefined) return '';\n\n    if (activeElement.selectionStart > activeElement.selectionEnd) {\n      return activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd);\n    } else {\n      return activeElement.value.substring(activeElement.selectionEnd, activeElement.selectionStart);\n    }\n  } // @ts-expect-error ts-migrate(7023) FIXME: 'getActiveElement' implicitly has return type 'any... Remove this comment to see the full error message\n\n\n  getActiveElement(element = document.activeElement) {\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    const shadowRoot = element.shadowRoot; // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n\n    const contentDocument = element.contentDocument;\n\n    if (shadowRoot && shadowRoot.activeElement) {\n      return this.getActiveElement(shadowRoot.activeElement);\n    }\n\n    if (contentDocument && contentDocument.activeElement) {\n      return this.getActiveElement(contentDocument.activeElement);\n    }\n\n    return element;\n  } // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'el' implicitly has an 'any' type.\n\n\n  focusAtCaretPosition(el, caretPos) {\n    if (el !== null) {\n      el.value = el.value; // ^ this is used to not only get \"focus\", but\n      // to make sure we don't have it everything -selected-\n      // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n\n      if (el.createTextRange) {\n        var range = el.createTextRange();\n        range.move('character', caretPos);\n        range.select();\n        return true;\n      } else {\n        // (el.selectionStart === 0 added for Firefox bug)\n        if (el.selectionStart || el.selectionStart === 0) {\n          el.focus();\n          el.setSelectionRange(caretPos, caretPos);\n          return true;\n        } else {\n          // fail city, fortunately this never happens (as far as I've tested) :)\n          el.focus();\n          return false;\n        }\n      }\n    }\n  }\n\n  createElement(name, proprieties, styles) {\n    let el = this.document.createElement(name);\n\n    for (let [propriety, value] of Object.entries(proprieties || {})) {\n      // @ts-expect-error ts-migrate(2304) FIXME: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'HTMLDivElement'. No index signature with a parameter of type 'string' was found on type 'HTMLDivElement'.ts(7053)\n      el[propriety] = value;\n    }\n\n    for (let [style, value] of Object.entries(styles || {})) {\n      el.style[style] = value;\n    }\n\n    return el;\n  }\n  /*\n            Selectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n            */\n\n\n  refresh() {\n    return false;\n  }\n\n}\n\nexports.commandpalettewidget = CommandPaletteWidget;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ29tbWFuZFBhbGV0dGVXaWRnZXQuanMiLCJzb3VyY2VzIjpbXSwic291cmNlc0NvbnRlbnQiOltdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiIn0=\n","type":"application/javascript","module-type":"widget"},"/home/runner/work/tiddlywiki-plugins/tiddlywiki-plugins/dist/plugins/linonetwo/commandpalette/CommandPaletteWidget.ts":{"title":"/home/runner/work/tiddlywiki-plugins/tiddlywiki-plugins/dist/plugins/linonetwo/commandpalette/CommandPaletteWidget.ts","text":"import uniq from 'lodash/uniq';\nimport debounce from 'lodash/debounce';\n\nconst Widget = require('$:/core/modules/widgets/widget.js').widget;\n\ntype AllPossibleEvent = PointerEvent | KeyboardEvent | MouseEvent;\nexport interface IResult {\n  name: string;\n  caption?: string;\n  hint?: string;\n  action?: (event: AllPossibleEvent) => void;\n}\nexport interface IHistoryResult extends IResult {\n  title: string;\n}\n\nexport interface IAction extends IResult {\n  keepPalette: boolean;\n  immediate?: boolean;\n}\n\nexport interface ITrigger extends IResult {\n  trigger: string;\n  text: string;\n}\n\n/**\n * The data stored in the searchStepsPath , are filter templates for default searcher. caret means where to put the terms, usually inside the filter like `search[${here}]`\n * filterFallback means the filter to use when pinyinfuse not installed\n */\nexport interface IRawSearchStep {\n  steps: Array<{ caret: string; filter: string; caretFallback: string; filterFallback: string; hint: string }>;\n}\nexport interface ISearchStep {\n  caret: number;\n  filter: string;\n  hint: string;\n}\n\nexport interface ITiddler {\n  fields: {\n    text: string;\n    title: string;\n    tags: string[];\n    // our custom fields\n    'command-palette-type'?: string;\n    'command-palette-name'?: string;\n    'command-palette-caption'?: string;\n    'command-palette-hint'?: string;\n    'command-palette-mode'?: string;\n    'command-palette-user-input'?: string;\n    'command-palette-caret'?: string;\n    'command-palette-immediate'?: string;\n    'command-palette-trigger'?: string;\n  };\n}\n\nexport interface ISettings {\n  maxResults: number;\n  maxResultHintSize: number;\n  neverBasic: boolean;\n  showHistoryOnOpen: boolean;\n  escapeGoesBack: boolean;\n  alwaysPassSelection: boolean;\n  theme: string;\n}\n\nexport type IValidator = (term: string) => boolean;\n\nclass CommandPaletteWidget extends Widget {\n  private actions: IAction[] = [];\n  private triggers: ITrigger[] = [];\n  private currentResults: HTMLDivElement[] = [];\n\n  private typeField = 'command-palette-type' as const;\n  /** 用于搜索的字段 */\n  private nameField = 'command-palette-name' as const;\n  /** 用于展示翻译内容的字段 */\n  private captionField = 'command-palette-caption' as const;\n  private hintField = 'command-palette-hint' as const;\n  private modeField = 'command-palette-mode' as const;\n  private userInputField = 'command-palette-user-input' as const;\n  private caretField = 'command-palette-caret' as const;\n  private immediateField = 'command-palette-immediate' as const;\n  private triggerField = 'command-palette-trigger' as const;\n\n  private currentSelection = 0; //0 is nothing selected, 1 is first result,...\n  private symbolProviders: Record<string, { searcher: (term: string, hint?: string) => void; resolver: (e: AllPossibleEvent) => void }> = {};\n  private blockProviderChange = false;\n  private defaultSettings: ISettings = {\n    maxResults: 15,\n    maxResultHintSize: 45,\n    neverBasic: false,\n    showHistoryOnOpen: true,\n    escapeGoesBack: true,\n    alwaysPassSelection: false,\n    theme: '$:/plugins/linonetwo/commandpalette/Compact.css',\n  };\n  private settings: Partial<ISettings> = {};\n  private commandHistoryPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteHistory' as const;\n  private settingsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSettings' as const;\n  private searchStepsPath = '$:/plugins/linonetwo/commandpalette/CommandPaletteSearchSteps' as const;\n  private customCommandsTag = '$:/tags/CommandPaletteCommand' as const;\n  private themesTag = '$:/tags/CommandPaletteTheme' as const;\n\n  /** current item's click/enter handler function */\n  private currentResolver: (e: AllPossibleEvent) => void = () => {};\n  /** basically means defaultProvider */\n  private currentProvider: (input: string) => void = () => {};\n\n  private searchSteps: Array<(term: string) => IResult[]> = [];\n\n  /**\n   * Fix IME issue in https://segmentfault.com/a/1190000012490380\n   */\n  private isIMEOpen = false;\n\n  constructor(parseTreeNode: any, options: any) {\n    super(parseTreeNode, options);\n    this.initialise(parseTreeNode, options);\n    this.onInput = debounce(this.onInput, 300);\n  }\n\n  actionStringBuilder(text: any) {\n    return (e: any) => this.invokeActionString(text, this, e);\n  }\n\n  actionStringInput(action: any, hint: any, e: any) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n    this.hint.innerText = hint;\n    this.input.value = '';\n    this.currentProvider = () => {};\n    this.currentResolver = (e: AllPossibleEvent) => {\n      this.invokeActionString(action, this, e, { commandpaletteinput: this.input.value });\n      this.closePalette();\n    };\n    this.showResults([]);\n    this.onInput(this.input.value);\n  }\n\n  invokeFieldMangler(tiddler: any, message: any, param: any, e: any) {\n    let action = `<$fieldmangler tiddler=\"${tiddler}\">\n\t\t\t<$action-sendmessage $message=\"${message}\" $param=\"${param}\"/>\n\t\t\t</$fieldmangler>`;\n    this.invokeActionString(action, this, e);\n  }\n\n  tagOperation(\n    event: AllPossibleEvent,\n    hintTiddler: string,\n    hintTag: string,\n    /** (tiddler, terms) => [tiddlers] */\n    filter: (tiddler: string, terms: string) => string[],\n    allowNoSelection: boolean,\n    message: string,\n  ) {\n    this.blockProviderChange = true;\n    if (allowNoSelection) this.allowInputFieldSelection = true;\n    this.currentProvider = this.historyProviderBuilder(hintTiddler);\n    this.currentResolver = (e: AllPossibleEvent) => {\n      if (this.currentSelection === 0) return;\n      let tiddler: string | undefined = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n      this.currentProvider = (terms: string) => {\n        this.currentSelection = 0;\n        this.hint.innerText = hintTag;\n        if (tiddler) {\n          let searches = filter(tiddler, terms);\n          this.showResults(\n            searches.map((s) => {\n              return { name: s };\n            }),\n          );\n        }\n      };\n      this.input.value = '';\n      this.onInput(this.input.value);\n      this.currentResolver = (e: AllPossibleEvent) => {\n        if (!allowNoSelection && this.currentSelection === 0) return;\n        let tag: string | undefined = this.input.value;\n        if (this.currentSelection !== 0) {\n          tag = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n        }\n        this.invokeFieldMangler(tiddler, message, tag, e);\n        if (!e.getModifierState('Shift')) {\n          this.closePalette();\n        } else {\n          this.onInput(this.input.value);\n        }\n      };\n    };\n    this.input.value = '';\n    this.onInput(this.input.value);\n  }\n\n  refreshThemes(e: AllPossibleEvent) {\n    this.themes = this.getTiddlersWithTag(this.themesTag);\n    let found = false;\n    for (let theme of this.themes) {\n      let themeName = theme.fields.title;\n      if (themeName === this.settings.theme) {\n        found = true;\n        this.addTagIfNecessary(themeName, '$:/tags/Stylesheet', e);\n      } else {\n        this.invokeFieldMangler(themeName, 'tm-remove-tag', '$:/tags/Stylesheet', e);\n      }\n    }\n    if (found) return;\n    this.addTagIfNecessary(this.defaultSettings.theme, '$:/tags/Stylesheet', e);\n  }\n\n  //Re-adding an existing tag changes modification date\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\n  addTagIfNecessary(tiddler, tag, e) {\n    if (this.hasTag(tiddler, tag)) return;\n    this.invokeFieldMangler(tiddler, 'tm-add-tag', tag, e);\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tiddler' implicitly has an 'any' type.\n  hasTag(tiddler, tag) {\n    return !!$tw.wiki.getTiddler(tiddler)?.fields?.tags?.includes(tag);\n  }\n\n  refreshCommands() {\n    this.actions = [];\n    this.actions.push({\n      name: 'Refresh Command Palette',\n      action: (e: AllPossibleEvent) => {\n        this.refreshCommandPalette();\n        this.promptCommand('');\n      },\n      keepPalette: true,\n    });\n    this.actions.push({ name: 'Explorer', action: (e: AllPossibleEvent) => this.explorer(e), keepPalette: true });\n    this.actions.push({ name: 'History', caption: '查看历史记录', action: (e: AllPossibleEvent) => this.showHistory(), keepPalette: true });\n    this.actions.push({ name: 'New Command Wizard', caption: '交互式创建新命令', action: (e: AllPossibleEvent) => this.newCommandWizard(), keepPalette: true });\n    this.actions.push({\n      name: 'Add tag to tiddler',\n      caption: '向条目添加标签',\n      action: (e) =>\n        this.tagOperation(\n          e,\n          '选择一个条目来添加标签',\n          '选择一个标签来添加 (⇧⏎ 可以多次添加)',\n          (tiddler: string, terms: string): string[] =>\n            $tw.wiki.filterTiddlers(\n              `[!is[system]tags[]] [is[system]tags[]] -[[${tiddler}]tags[]] +[${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${terms}]]`,\n            ),\n          true,\n          'tm-add-tag',\n        ),\n      keepPalette: true,\n    });\n    this.actions.push({\n      name: 'Remove tag',\n      caption: '去除标签',\n      action: (e) =>\n        this.tagOperation(\n          e,\n          '选择一个条目来去除标签',\n          '选择一个标签来去除 (⇧⏎ 可以去除多次)',\n\n          (tiddler: string, terms: string): string[] =>\n            $tw.wiki.filterTiddlers(`[[${tiddler}]tags[]] +[${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${terms}]]`),\n          false,\n          'tm-remove-tag',\n        ),\n      keepPalette: true,\n    });\n\n    let commandTiddlers = this.getTiddlersWithTag(this.customCommandsTag);\n    for (let tiddler of commandTiddlers) {\n      if (!tiddler.fields[this.typeField] === undefined) continue;\n      let name = tiddler.fields[this.nameField];\n      if (typeof name !== 'string') throw new Error(`命令菜单条目 ${tiddler.fields.title} 缺失 ${this.nameField} 字段`);\n      let caption = this.translateCaption(tiddler.fields[this.captionField]);\n      let type = tiddler.fields[this.typeField];\n      let text = this.translateCaption(tiddler.fields.text);\n      if (text === undefined) text = '';\n      let textFirstLine = (text.match(/^.*/) ?? [''])[0];\n      let hint = this.translateCaption(tiddler.fields[this.hintField] ?? tiddler.fields[this.nameField] ?? '');\n      if (type === 'shortcut') {\n        ``;\n        let trigger = tiddler.fields[this.triggerField];\n        if (trigger === undefined) continue;\n        this.triggers.push({ name, caption, trigger, text, hint });\n        continue;\n      }\n      if (!tiddler.fields[this.nameField] === undefined) continue;\n      if (type === 'prompt') {\n        let immediate = !!tiddler.fields[this.immediateField];\n        let caret: number = Number(tiddler.fields[this.caretField]) ?? 0;\n        let action = { name, caption, hint, action: () => this.promptCommand(textFirstLine, caret), keepPalette: !immediate, immediate: immediate };\n        this.actions.push(action);\n        continue;\n      }\n      if (type === 'prompt-basic') {\n        let caret: number = Number(tiddler.fields[this.caretField]) ?? 0;\n        let action = { name, caption, hint, action: () => this.promptCommandBasic(textFirstLine, caret, hint), keepPalette: true };\n        this.actions.push(action);\n        continue;\n      }\n      if (type === 'message') {\n        this.actions.push({ name, caption, hint, action: (e: AllPossibleEvent) => this.tmMessageBuilder(textFirstLine)(e), keepPalette: false });\n        continue;\n      }\n      if (type === 'actionString') {\n        let userInput = tiddler.fields[this.userInputField] !== undefined && tiddler.fields[this.userInputField] === 'true';\n        if (userInput) {\n          this.actions.push({ name, caption, hint, action: (e: AllPossibleEvent) => this.actionStringInput(text, hint, e), keepPalette: true });\n        } else {\n          this.actions.push({ name, caption, hint, action: (e: AllPossibleEvent) => this.actionStringBuilder(text)(e), keepPalette: false });\n        }\n        continue;\n      }\n      if (type === 'history') {\n        let mode = tiddler.fields[this.modeField];\n        this.actions.push({\n          name,\n          caption,\n          hint,\n          action: (e: AllPossibleEvent) => this.commandWithHistoryPicker(textFirstLine, hint, mode).handler(e),\n          keepPalette: true,\n        });\n        continue;\n      }\n    }\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'caption' implicitly has an 'any' type.\n  translateCaption(caption) {\n    return $tw.wiki.renderText('text/plain', 'text/vnd.tiddlywiki', caption);\n  }\n\n  newCommandWizard() {\n    this.blockProviderChange = true;\n    this.input.value = '';\n    this.hint.innerText = '命令名';\n    let name = '';\n    let type = '';\n    let hint = '';\n\n    let messageStep = () => {\n      this.input.value = '';\n      this.hint.innerText = '输入信息';\n      this.currentResolver = (e: AllPossibleEvent) => {\n        this.tmMessageBuilder('tm-new-tiddler', {\n          title: '$:/' + name,\n          tags: this.customCommandsTag,\n          [this.typeField]: type,\n          [this.nameField]: name,\n          [this.hintField]: hint,\n          text: this.input.value,\n        })(e);\n        this.closePalette();\n      };\n    };\n\n    let hintStep = () => {\n      this.input.value = '';\n      this.hint.innerText = '输入提示文本';\n      this.currentResolver = (e: AllPossibleEvent) => {\n        hint = this.input.value;\n        messageStep();\n      };\n    };\n\n    let typeStep = () => {\n      this.input.value = '';\n      this.hint.innerText = 'Enter type (prompt, prompt-basic, message, actionString, history)';\n      this.currentResolver = (e: AllPossibleEvent) => {\n        type = this.input.value;\n        if (type === 'history') {\n          hintStep();\n        } else {\n          this.tmMessageBuilder('tm-new-tiddler', {\n            title: '$:/' + name,\n            tags: this.customCommandsTag,\n            [this.typeField]: type,\n            [this.nameField]: name,\n          })(e);\n          this.closePalette();\n        }\n      };\n    };\n\n    this.currentProvider = (terms: string) => {};\n    this.currentResolver = (e: AllPossibleEvent) => {\n      if (this.input.value.length === 0) return;\n      name = this.input.value;\n      typeStep();\n    };\n    this.showResults([]);\n  }\n\n  explorer(e: AllPossibleEvent) {\n    this.blockProviderChange = true;\n    this.input.value = '$:/';\n    this.lastExplorerInput = '$:/';\n    this.hint.innerText = 'Explorer (⇧⏎ to add multiple)';\n    this.currentProvider = (terms: string) => this.explorerProvider('$:/', terms);\n    this.currentResolver = (e: AllPossibleEvent) => {\n      if (this.currentSelection === 0) return;\n      this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n    };\n    this.onInput();\n  }\n\n  explorerProvider(url: string, terms: string) {\n    let switchFolder = (url: string) => {\n      this.input.value = url;\n      this.lastExplorerInput = this.input.value;\n      this.currentProvider = (terms: string) => this.explorerProvider(url, terms);\n      this.onInput();\n    };\n    if (!this.input.value.startsWith(url)) {\n      this.input.value = this.lastExplorerInput;\n    }\n    this.lastExplorerInput = this.input.value;\n    this.currentSelection = 0;\n    let search = this.input.value.substr(url.length);\n\n    let tiddlers = $tw.wiki.filterTiddlers(`[removeprefix[${url}]splitbefore[/]sort[]${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${search}]]`);\n    let folders = [];\n    let files = [];\n    for (let tiddler of tiddlers) {\n      if (tiddler.endsWith('/')) {\n        folders.push({ name: tiddler, action: (e: AllPossibleEvent) => switchFolder(`${url}${tiddler}`) });\n      } else {\n        files.push({\n          name: tiddler,\n          action: (e: AllPossibleEvent) => {\n            this.navigateTo(`${url}${tiddler}`);\n            if (!e.getModifierState('Shift')) {\n              this.closePalette();\n            }\n          },\n        });\n      }\n    }\n    let topResult;\n    if (url !== '$:/') {\n      let splits = url.split('/');\n      splits.splice(splits.length - 2);\n      let parent = splits.join('/') + '/';\n      topResult = { name: '..', action: (e: AllPossibleEvent) => switchFolder(parent) };\n      this.showResults([topResult, ...folders, ...files]);\n      return;\n    }\n    this.showResults([...folders, ...files]);\n  }\n\n  setSetting<K extends keyof ISettings>(name: K, value: ISettings[K]) {\n    //doing the validation here too (it's also done in refreshSettings, so you can load you own settings with a json file)\n    if (typeof value === 'string') {\n      if (value === 'true') (value as unknown as boolean) = true;\n      if (value === 'false') (value as unknown as boolean) = false;\n    }\n    this.settings[name] = value;\n\n    $tw.wiki.setTiddlerData(this.settingsPath, this.settings);\n  }\n\n  //loadSettings?\n  refreshSettings<K extends keyof ISettings>() {\n    //get user or default settings\n\n    this.settings = $tw.wiki.getTiddlerData(this.settingsPath, { ...this.defaultSettings });\n    //Adding eventual missing properties to current user settings\n    for (let prop in this.defaultSettings) {\n      if (!this.defaultSettings.hasOwnProperty(prop)) continue;\n      const ownProp = prop as K;\n      if (this.settings[ownProp] === undefined) {\n        this.settings[ownProp] = this.defaultSettings[ownProp] as ISettings[K];\n      }\n    }\n    // cast all booleans from string from tw\n    for (let prop in this.settings) {\n      if (!this.settings.hasOwnProperty(prop)) continue;\n      const ownProp = prop as K;\n      if (typeof this.settings[ownProp] !== 'string') continue;\n      if ((this.settings[ownProp] as string).toLowerCase() === 'true') (this.settings[ownProp] as boolean) = true;\n      if ((this.settings[ownProp] as string).toLowerCase() === 'false') (this.settings[ownProp] as boolean) = false;\n    }\n  }\n\n  //helper function to retrieve all tiddlers (+ their fields) with a tag\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'tag' implicitly has an 'any' type.\n  getTiddlersWithTag(tag): ITiddler[] {\n    let tiddlers = $tw.wiki.getTiddlersWithTag(tag);\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 't' implicitly has an 'any' type.\n    return tiddlers.map((t) => $tw.wiki.getTiddler(t));\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'parent' implicitly has an 'any' type.\n  render(parent, nextSibling) {\n    this.parentDomNode = parent;\n    this.execute();\n    if ($tw.utils.pinyinfuse === undefined) {\n      console.warn('需要安装 linonetwo/pinyin-fuzzy-search 插件以获得模糊搜索和拼音搜索的能力');\n    }\n\n    this.history = $tw.wiki.getTiddlerData(this.commandHistoryPath, { history: [] }).history;\n\n    $tw.rootWidget.addEventListener('open-command-palette', (e: AllPossibleEvent) => this.openPalette(e, e.param));\n\n    $tw.rootWidget.addEventListener('open-command-palette-selection', (e: AllPossibleEvent) => this.openPaletteSelection(e));\n\n    $tw.rootWidget.addEventListener('insert-command-palette-result', (e: AllPossibleEvent) => this.insertSelectedResult(e));\n\n    $tw.rootWidget.addEventListener('command-palette-switch-history', (e) => this.handleSwitchHistory(e, true));\n\n    $tw.rootWidget.addEventListener('command-palette-switch-history-back', (e) => this.handleSwitchHistory(e, false));\n\n    let inputAndMainHintWrapper = this.createElement('div', { className: 'inputhintwrapper' });\n    this.div = this.createElement('div', { className: 'commandpalette' }, { display: 'none' });\n    this.mask = this.createElement('div', { className: 'commandpalette-masklayer' }, { opacity: '0' });\n    this.input = this.createElement('input', { type: 'text' });\n    this.hint = this.createElement('div', { className: 'commandpalettehint commandpalettehintmain' });\n    inputAndMainHintWrapper.append(this.input, this.hint);\n    this.scrollDiv = this.createElement('div', { className: 'cp-scroll' });\n    this.div.append(inputAndMainHintWrapper, this.scrollDiv);\n    this.input.addEventListener('keydown', (e: KeyboardEvent) => this.onKeyDown(e));\n    this.input.addEventListener('input', () => this.onInput(this.input.value));\n    // Fix IME issue\n    this.input.addEventListener(\n      'compositionstart',\n      () => {\n        this.isIMEOpen = true;\n      },\n      false,\n    );\n    this.input.addEventListener(\n      'compositionend',\n      () => {\n        this.isIMEOpen = false;\n      },\n      false,\n    );\n\n    document.addEventListener('click', (e: PointerEvent | MouseEvent | TouchEvent) => this.onClick(e));\n    parent.insertBefore(this.mask, nextSibling);\n    parent.insertBefore(this.div, nextSibling);\n\n    this.refreshCommandPalette();\n\n    this.symbolProviders['>'] = { searcher: (terms: string) => this.actionProvider(terms), resolver: (e) => this.actionResolver(e) };\n    this.symbolProviders['》'] = this.symbolProviders['>'];\n    this.symbolProviders['##'] = { searcher: (terms: string) => this.tagListProvider(terms), resolver: (e) => this.tagListResolver(e) };\n    this.symbolProviders['#'] = { searcher: (terms: string) => this.tagProvider(terms), resolver: (e) => this.defaultResolver(e) };\n    this.symbolProviders['?'] = { searcher: (terms: string) => this.helpProvider(terms), resolver: (e) => this.helpResolver(e) };\n    this.symbolProviders['？'] = this.symbolProviders['?'];\n    this.symbolProviders['['] = { searcher: (terms: string, hint?: string) => this.filterProvider(terms, hint), resolver: (e) => this.filterResolver(e) };\n    this.symbolProviders['+'] = { searcher: (terms: string) => this.createTiddlerProvider(terms), resolver: (e) => this.createTiddlerResolver(e) };\n    this.symbolProviders['|'] = { searcher: (terms: string) => this.settingsProvider(terms), resolver: (e) => this.settingsResolver(e) };\n    this.currentResults = [];\n    this.currentProvider = () => {};\n  }\n\n  helpProvider(terms: string) {\n    //TODO: tiddlerify?\n    this.currentSelection = 0;\n    this.hint.innerText = 'Help';\n    let searches = [\n      { name: '直接打字是搜索条目标题和内容；而以下述特殊字符开头可以执行特殊搜索', action: () => this.promptCommand('') },\n      { name: '> 查看和搜索命令列表', action: () => this.promptCommand('>') },\n      { name: '+ 创建条目，先输入条目名，然后可以带上#打标签', action: () => this.promptCommand('+') },\n      { name: '# 列出带标签的条目（标签不可包含空格，用空格隔开多个#开头的标签，不带#的作为搜索词）', action: () => this.promptCommand('#') },\n      { name: '## 搜索标签列表', action: () => this.promptCommand('##', 2) },\n      { name: '[ 筛选器语句', action: () => this.promptCommand('[') },\n      { name: '| 命令菜单设置', action: () => this.promptCommand('|') },\n      { name: '\\\\ 规避第一个字符是上述命令字符的情况，例如「\\\\#」可搜标题以「#」起头的条目', action: () => this.promptCommand('\\\\') },\n      { name: '? 打开帮助', action: () => this.promptCommand('?') },\n    ];\n    this.showResults(searches);\n  }\n\n  /**\n   * 解析输入，默认前两位可能是命令字符，会到 this.symbolProviders 里查找相应的 provider\n   */\n  parseCommand(text: string) {\n    let terms = '';\n    let resolver;\n    let provider;\n    let shortcut = this.triggers.find((t) => text.startsWith(t.trigger));\n    if (shortcut !== undefined) {\n      resolver = (e: AllPossibleEvent) => {\n        let inputWithoutShortcut = this.input.value.substr(shortcut!.trigger.length);\n        this.invokeActionString(shortcut!.text, this, e, { commandpaletteinput: inputWithoutShortcut });\n        this.closePalette();\n      };\n      provider = (terms: string) => {\n        this.hint.innerText = shortcut!.hint;\n        this.showResults([]);\n      };\n    } else {\n      // 从上到下找，先找长的，再找短的，以便 ## 优先匹配 ## 而不是 #\n      let providerSymbol = Object.keys(this.symbolProviders)\n        .sort((a, b) => -a.length + b.length)\n        .find((symbol) => text.startsWith(symbol));\n      if (providerSymbol === undefined) {\n        resolver = this.defaultResolver;\n        provider = this.defaultProvider;\n        terms = text;\n      } else {\n        provider = this.symbolProviders[providerSymbol].searcher;\n        resolver = this.symbolProviders[providerSymbol].resolver;\n        terms = text.replace(providerSymbol, '');\n      }\n    }\n    return { resolver, provider, terms };\n  }\n\n  refreshSearchSteps() {\n    this.searchSteps = [];\n    const steps = $tw.wiki.getTiddlerData<IRawSearchStep>(this.searchStepsPath).steps;\n    for (let step of steps) {\n      this.searchSteps.push(\n        this.searchStepBuilder(\n          $tw.utils.pinyinfuse ? step.filter : step.filterFallback,\n          Number($tw.utils.pinyinfuse ? step.caret : step.caretFallback),\n          step.hint,\n        ),\n      );\n    }\n  }\n\n  refreshCommandPalette() {\n    this.refreshSettings();\n    // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n    this.refreshThemes();\n    this.refreshCommands();\n    this.refreshSearchSteps();\n  }\n\n  handleSwitchHistory(event: KeyboardEvent, forward: boolean) {\n    // we have history list in palette by default, if we have showHistoryOnOpen === true\n    // TODO: handle this if !showHistoryOnOpen\n    if (!this.isOpened) {\n      this.openPalette(event, undefined);\n    }\n\n    this.onKeyDown(\n      new KeyboardEvent('keydown', {\n        bubbles: false,\n        cancelable: true,\n        key: forward ? 'ArrowDown' : 'ArrowUp',\n        shiftKey: false,\n      }),\n    );\n\n    const onCtrlKeyUp = (keyUpEvent: KeyboardEvent) => {\n      if (!keyUpEvent.ctrlKey) {\n        this.currentResolver(keyUpEvent);\n        window.removeEventListener('keyup', onCtrlKeyUp);\n      }\n    };\n\n    window.addEventListener('keyup', onCtrlKeyUp);\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'command' implicitly has an 'any' type.\n  updateCommandHistory(command) {\n    this.history = Array.from(new Set([command.name, ...this.history]));\n\n    $tw.wiki.setTiddlerData(this.commandHistoryPath, { history: this.history });\n  }\n\n  historyProviderBuilder(hint: string, mode?: 'drafts' | 'story') {\n    return (terms: string) => {\n      this.currentSelection = 0;\n      this.hint.innerText = hint;\n      let results;\n      if (mode !== undefined && mode === 'drafts') {\n        results = $tw.wiki.filterTiddlers('[has:field[draft.of]]');\n      } else if (mode !== undefined && mode === 'story') {\n        results = $tw.wiki.filterTiddlers('[list[$:/StoryList]]');\n      } else {\n        results = this.getHistory();\n      }\n      results = results.map((r) => {\n        return { name: r };\n      });\n      this.showResults(results);\n    };\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\n  commandWithHistoryPicker(message, hint, mode) {\n    let handler = (e: AllPossibleEvent) => {\n      this.blockProviderChange = true;\n      this.allowInputFieldSelection = true;\n      this.currentProvider = provider;\n      this.currentResolver = resolver;\n      this.input.value = '';\n      this.onInput(this.input.value);\n    };\n    let provider = this.historyProviderBuilder(hint, mode);\n    let resolver = (e: AllPossibleEvent) => {\n      if (this.currentSelection === 0) return;\n      let title = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n      this.parentWidget.dispatchEvent({\n        type: message,\n        param: title,\n        tiddlerTitle: title,\n      });\n      this.closePalette();\n    };\n    return {\n      handler,\n      provider,\n      resolver,\n    };\n  }\n\n  onInput(text: string = '') {\n    if (this.blockProviderChange) {\n      //prevent provider changes\n      this.currentProvider(text);\n      this.setSelectionToFirst();\n      return;\n    }\n    let { resolver, provider, terms } = this.parseCommand(text);\n    this.currentResolver = resolver;\n    this.currentProvider = provider;\n    this.currentProvider(terms);\n    this.setSelectionToFirst();\n  }\n\n  onClick(event: MouseEvent | PointerEvent | TouchEvent) {\n    if (this.isOpened && !this.div.contains(event.target)) {\n      this.closePalette();\n    }\n  }\n\n  openPaletteSelection(event: AllPossibleEvent) {\n    let selection = this.getCurrentSelection();\n    this.openPalette(event, selection);\n  }\n  openPalette(e: AllPossibleEvent, selection?: string) {\n    // call currentProvider first to ask currentProvider load latest history. Otherwise it will load history after open, which will show old one and refresh.\n    this.currentProvider('');\n    this.isOpened = true;\n    this.allowInputFieldSelection = false;\n    this.goBack = undefined;\n    this.blockProviderChange = false;\n    let activeElement = this.getActiveElement();\n    this.previouslyFocused = {\n      element: activeElement,\n      start: activeElement.selectionStart,\n      end: activeElement.selectionEnd,\n      caretPos: activeElement.selectionEnd,\n    };\n    this.input.value = '';\n    if (selection !== undefined) {\n      this.input.value = selection;\n    }\n    if (this.settings.alwaysPassSelection) {\n      this.input.value += this.getCurrentSelection();\n    }\n    this.currentSelection = 0;\n    this.onInput(this.input.value); //Trigger results on open\n    this.div.style.display = 'flex';\n    this.mask.style.opacity = '0.6';\n    this.input.focus();\n  }\n\n  insertSelectedResult() {\n    if (!this.isOpened) return;\n    if (this.currentSelection === 0) return; //TODO: what to do here?\n    let previous = this.previouslyFocused;\n    let previousValue = previous.element.value;\n    if (previousValue === undefined) return;\n    let selection = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n    // TODO: early return may cause bug here?\n    if (!selection) return;\n    if (previous.start !== previous.end) {\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.end);\n    } else {\n      this.previouslyFocused.element.value = previousValue.substring(0, previous.start) + selection + previousValue.substring(previous.start);\n    }\n    this.previouslyFocused.caretPos = previous.start + selection.length;\n    this.closePalette();\n  }\n\n  closePalette() {\n    this.div.style.display = 'none';\n    this.mask.style.opacity = '0';\n    this.isOpened = false;\n    this.focusAtCaretPosition(this.previouslyFocused.element, this.previouslyFocused.caretPos);\n  }\n\n  onKeyDown(e: KeyboardEvent) {\n    if (e.key === 'Escape') {\n      //\t\t\t\t\t\t\t\t\t\\/ There's no previous state\n      if (!this.settings.escapeGoesBack || this.goBack === undefined) {\n        this.closePalette();\n      } else {\n        this.goBack();\n        this.goBack = undefined;\n      }\n    } else if (e.key === 'ArrowUp') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = this.currentSelection - 1;\n\n      if (sel === 0) {\n        if (!this.allowInputFieldSelection) {\n          sel = this.currentResults.length;\n        }\n      } else if (sel < 0) {\n        sel = this.currentResults.length;\n      }\n      this.setSelection(sel);\n    } else if (e.key === 'ArrowDown') {\n      e.preventDefault();\n      e.stopPropagation();\n      let sel = (this.currentSelection + 1) % (this.currentResults.length + 1);\n      if (!this.allowInputFieldSelection && sel === 0 && this.currentResults.length !== 0) {\n        sel = 1;\n      }\n      this.setSelection(sel);\n    } else if (e.key === 'Enter') {\n      e.preventDefault();\n      e.stopPropagation();\n      this.validateSelection(e);\n    }\n  }\n\n  addResult(result: IResult, id: number) {\n    let resultDiv = this.createElement('div', { className: 'commandpaletteresult' });\n    let titleDiv = this.createElement('div', { className: 'commandpalettetitle', innerText: result.caption || result.name });\n    resultDiv.appendChild(titleDiv);\n    if (result.hint !== undefined) {\n      let hint = this.createElement('div', { className: 'commandpalettehint', innerText: result.hint });\n      resultDiv.appendChild(hint);\n    }\n    // we will get this later\n    resultDiv.dataset.result = JSON.stringify(result);\n    /** we use this to pass the action */\n    if (result.action) {\n      resultDiv.onabort = result.action as unknown as (this: GlobalEventHandlers, ev: UIEvent) => any;\n    }\n    this.currentResults.push(resultDiv);\n    resultDiv.addEventListener('click', (e) => {\n      e.stopPropagation();\n      e.preventDefault();\n\n      this.setSelection(id + 1);\n      this.validateSelection(e);\n    });\n    resultDiv.addEventListener('contextmenu', (e) => {\n      e.stopPropagation();\n      if (e.ctrlKey && e.button === 0) {\n        e.preventDefault();\n        this.setSelection(id + 1);\n        this.validateSelection(e);\n      }\n    });\n    this.scrollDiv.appendChild(resultDiv);\n  }\n\n  private getDataFromResultDiv<K extends keyof IResult>(resultDiv: HTMLDivElement, key: K): IResult[K] | undefined {\n    return JSON.parse(resultDiv.dataset.result ?? '{}')[key];\n  }\n  private getActionFromResultDiv(resultDiv: HTMLDivElement): IResult['action'] | undefined {\n    return resultDiv.onabort as unknown as IResult['action'];\n  }\n\n  validateSelection(e: AllPossibleEvent) {\n    if (!this.isIMEOpen) {\n      this.currentResolver(e);\n    }\n  }\n\n  defaultResolver(e: AllPossibleEvent) {\n    if (e.getModifierState('Shift')) {\n      this.input.value = '+' + this.input.value; //this resolver expects that the input starts with +\n      this.createTiddlerResolver(e);\n      return;\n    }\n    if (this.currentSelection === 0) return;\n    let selectionTitle = this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name');\n    this.closePalette();\n    this.navigateTo(selectionTitle);\n  }\n\n  /**\n   * 调用 tm-navigate 跳转到标题对应的条目处\n   */\n  navigateTo(title?: string) {\n    if (title) {\n      this.parentWidget.dispatchEvent({\n        type: 'tm-navigate',\n        param: title,\n        navigateTo: title,\n      });\n    }\n  }\n\n  showHistory() {\n    this.hint.innerText = '历史记录';\n    this.currentProvider = (terms: string) => {\n      let results: string[];\n      if (terms.length === 0) {\n        results = this.getHistory();\n      } else {\n        if ($tw.utils.pinyinfuse) {\n          results = $tw.utils.pinyinfuse(this.getHistory(), terms).map((item: { item: string }) => item.item);\n        } else {\n          results = this.getHistory().filter((item) => item.toLowerCase().includes(terms));\n        }\n      }\n      this.showResults(\n        results.map((title) => {\n          return {\n            name: title,\n            action: () => {\n              this.navigateTo(title);\n              this.closePalette();\n            },\n          };\n        }),\n      );\n    };\n\n    this.currentResolver = (e: AllPossibleEvent) => {\n      if (this.currentSelection === 0) return;\n      this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n    };\n    this.input.value = '';\n    this.blockProviderChange = true;\n    this.onInput(this.input.value);\n  }\n\n  setSelectionToFirst() {\n    let sel = 1;\n    if (this.allowInputFieldSelection || this.currentResults.length === 0) {\n      sel = 0;\n    }\n    this.setSelection(sel);\n  }\n\n  setSelection(id: number) {\n    this.currentSelection = id;\n    for (let i = 0; i < this.currentResults.length; i++) {\n      let selected = this.currentSelection === i + 1;\n      this.currentResults[i].className = selected ? 'commandpaletteresult commandpaletteresultselected' : 'commandpaletteresult';\n    }\n    if (this.currentSelection === 0) {\n      this.scrollDiv.scrollTop = 0;\n      return;\n    }\n    let scrollHeight = this.scrollDiv.offsetHeight;\n    let scrollPos = this.scrollDiv.scrollTop;\n    let selectionPos = Number(this.currentResults[this.currentSelection - 1]?.offsetTop ?? 0);\n    let selectionHeight = Number(this.currentResults[this.currentSelection - 1]?.offsetHeight ?? 0);\n\n    if (selectionPos < scrollPos || selectionPos >= scrollPos + scrollHeight) {\n      //select the closest scrolling position showing the selection\n      let a = selectionPos;\n      let b = selectionPos - scrollHeight + selectionHeight;\n      a = Math.abs(a - scrollPos);\n      b = Math.abs(b - scrollPos);\n      if (a < b) {\n        this.scrollDiv.scrollTop = selectionPos;\n      } else {\n        this.scrollDiv.scrollTop = selectionPos - scrollHeight + selectionHeight;\n      }\n    }\n  }\n\n  getHistory(): string[] {\n    const historyData = $tw.wiki.getTiddlerData<Array<{ title: string }>>('$:/HistoryList') ?? [];\n    const [first, second, ...rest] = uniq([...historyData.reverse().map((x) => x.title), ...$tw.wiki.filterTiddlers('[list[$:/StoryList]]')]).filter((t) =>\n      this.tiddlerOrShadowExists(t),\n    );\n    // swap first and second, so its easier to switch to second, like using ctrl + tab in vscode\n    return [second, first, ...rest];\n  }\n\n  tiddlerOrShadowExists(title: string) {\n    return $tw.wiki.tiddlerExists(title) || $tw.wiki.isShadowTiddler(title);\n  }\n\n  /** This is opened when you click on the menu icon. */\n  defaultProvider(terms: string) {\n    this.hint.innerText = '⏎搜索条目（⇧⏎ 创建条目）（？问号查看帮助）';\n    let searches: IResult[];\n    if (terms.startsWith('\\\\')) terms = terms.substr(1);\n    if (terms.length === 0) {\n      if (this.settings.showHistoryOnOpen) {\n        searches = this.getHistory().map((s) => {\n          return { name: s, hint: '历史记录' };\n        });\n      } else {\n        searches = [];\n      }\n    } else {\n      searches = uniq(this.searchSteps.reduce((acc: IResult[], current) => [...acc, ...current(terms)], []));\n    }\n    this.showResults(searches);\n  }\n\n  searchStepBuilder(filter: string, caret: number, hint: string): (term: string) => IResult[] {\n    return (terms: string) => {\n      let search = filter.substring(0, caret) + terms + filter.substring(caret);\n\n      let results = $tw.wiki.filterTiddlers(search).map((s) => {\n        return { name: s, hint: hint };\n      });\n      return results;\n    };\n  }\n\n  tagListProvider(terms: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = '搜索标签列表';\n    let searches;\n    if (terms.length === 0) {\n      searches = $tw.wiki.filterTiddlers('[!is[system]tags[]][is[system]tags[]][all[shadows]tags[]]');\n    } else {\n      searches = $tw.wiki.filterTiddlers(\n        $tw.utils.pinyinfuse\n          ? `[all[]tags[]!is[system]pinyinfuse[${terms}]][all[]tags[]is[system]pinyinfuse[${terms}]][all[shadows]tags[]pinyinfuse[${terms}]]`\n          : `[all[]tags[]!is[system]search[${terms}]][all[]tags[]is[system]search[${terms}]][all[shadows]tags[]search[${terms}]]`,\n      );\n    }\n    searches = searches.map((s) => {\n      return { name: s };\n    });\n    this.showResults(searches);\n  }\n\n  tagListResolver(e: AllPossibleEvent) {\n    if (this.currentSelection === 0) {\n      let input = (this.input.value as string).substring(2);\n\n      let exist = $tw.wiki.filterTiddlers('[tag[' + input + ']]');\n      if (!exist) return;\n      this.input.value = '##' + input;\n      return;\n    }\n    let result = this.currentResults[this.currentSelection - 1];\n    this.input.value = '##' + result.innerText;\n    this.onInput(this.input.value);\n  }\n\n  tagProvider(terms: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = '用「#标签 #标签2」搜索条目';\n    let tiddlerNameSearchResults: string[] = [];\n    if (terms.length !== 0) {\n      let { tags, searchTerms, tagsFilter } = this.parseTags(this.input.value);\n\n      let taggedTiddlers: string[] = $tw.wiki.filterTiddlers(tagsFilter);\n\n      if (taggedTiddlers.length !== 0) {\n        if (tags.length === 1) {\n          let tag = tags[0];\n          let tagTiddlerExists = this.tiddlerOrShadowExists(tag);\n          if (tagTiddlerExists && searchTerms.some((s) => tag.includes(s))) tiddlerNameSearchResults.push(tag);\n        }\n        tiddlerNameSearchResults = [...tiddlerNameSearchResults, ...taggedTiddlers];\n      }\n    }\n    this.showResults(\n      tiddlerNameSearchResults.map((tiddlerName) => {\n        return { name: tiddlerName };\n      }),\n    );\n  }\n\n  /**\n   * @param input `'#aaa 1 #bbb#ccc'` => `['aaa', 'bbb#ccc']` and search `1`\n   */\n  parseTags(input: string) {\n    let splits = input.split(' ').filter((s) => s !== '');\n    let tags = [];\n    let searchTerms = [];\n    for (let i = 0; i < splits.length; i++) {\n      // 空格分隔的结果可以以 # 开头，表示标签\n      if (splits[i].startsWith('#')) {\n        tags.push(splits[i].substr(1));\n        continue;\n      }\n      // 也可以不带 # ，表示搜索词\n      searchTerms.push(splits[i]);\n    }\n    let tagsFilter = `[all[tiddlers+system+shadows]${tags.reduce((a, c) => {\n      return a + 'tag[' + c + ']';\n    }, '')}]`;\n    if (searchTerms.length !== 0) {\n      tagsFilter = tagsFilter.substring(0, tagsFilter.length - 1); //remove last ']'\n      tagsFilter += `${$tw.utils.pinyinfuse ? 'pinyinfuse' : 'search'}[${searchTerms.join(' ')}]]`;\n    }\n    return { tags, searchTerms, tagsFilter };\n  }\n\n  settingsProvider(terms: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = 'Select the setting you want to change';\n    let isNumerical: IValidator = (terms: string) => terms.length !== 0 && terms.match(/\\D/gm) === null;\n    let isBoolean: IValidator = (terms: string) => terms.length !== 0 && terms.match(/(true\\b)|(false\\b)/gim) !== null;\n    this.showResults([\n      { name: 'Theme (currently ' + this.settings.theme?.match?.(/[^\\/]*$/) ?? 'no ' + ')', action: () => this.promptForThemeSetting() },\n      this.settingResultBuilder('Max results', 'maxResults', 'Choose the maximum number of results', isNumerical, 'Error: value must be a positive integer'),\n      this.settingResultBuilder(\n        'Show history on open',\n        'showHistoryOnOpen',\n        'Chose whether to show the history when you open the palette',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\",\n      ),\n      this.settingResultBuilder(\n        'Escape to go back',\n        'escapeGoesBack',\n        'Chose whether ESC should go back when possible',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\",\n      ),\n      this.settingResultBuilder(\n        'Use selection as search query',\n        'alwaysPassSelection',\n        'Chose your current selection is passed to the command palette',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\",\n      ),\n      this.settingResultBuilder(\n        'Never Basic',\n        'neverBasic',\n        'Chose whether to override basic prompts to show filter operation',\n        isBoolean,\n        \"Error: value must be 'true' or 'false'\",\n      ),\n      this.settingResultBuilder(\n        'Field preview max size',\n        'maxResultHintSize',\n        'Choose the maximum hint length for field preview',\n        isNumerical,\n        'Error: value must be a positive integer',\n      ),\n    ]);\n  }\n\n  settingResultBuilder<K extends keyof ISettings>(name: string, settingName: K, hint: string, validator: IValidator, errorMsg: string) {\n    return { name: name + ' (currently ' + this.settings[settingName] + ')', action: () => this.promptForSetting(settingName, hint, validator, errorMsg) };\n  }\n\n  settingsResolver(e: AllPossibleEvent) {\n    if (this.currentSelection === 0) return;\n    this.goBack = () => {\n      this.input.value = '|';\n      this.blockProviderChange = false;\n      this.onInput(this.input.value);\n    };\n    this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n  }\n\n  promptForThemeSetting() {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = false;\n    this.currentProvider = (terms: string) => {\n      this.currentSelection = 0;\n      this.hint.innerText = '选择一个主题';\n      let defaultValue = this.defaultSettings['theme'];\n      let results = [\n        {\n          name: '恢复默认值: ' + defaultValue.match(/[^\\/]*$/),\n          action: () => {\n            this.setSetting('theme', defaultValue);\n            // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n            this.refreshThemes();\n          },\n        },\n      ];\n      for (let theme of this.themes) {\n        let name = theme.fields.title;\n        let shortName = name.match(/[^\\/]*$/);\n        let action = () => {\n          this.setSetting('theme', name);\n          // @ts-expect-error ts-migrate(2554) FIXME: Expected 1 arguments, but got 0.\n          this.refreshThemes();\n        };\n        results.push({ name: shortName, action: action });\n      }\n      this.showResults(results);\n    };\n    this.currentResolver = (e: AllPossibleEvent) => {\n      this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n    };\n    this.input.value = '';\n    this.onInput(this.input.value);\n  }\n\n  promptForSetting<K extends keyof ISettings>(settingName: K, hint: string, validator: IValidator, errorMsg: string) {\n    this.blockProviderChange = true;\n    this.allowInputFieldSelection = true;\n    this.currentProvider = (terms: string) => {\n      this.currentSelection = 0;\n      this.hint.innerText = hint;\n      let defaultValue = this.defaultSettings[settingName];\n      let results = [{ name: 'Revert to default value: ' + defaultValue, action: () => this.setSetting(settingName, defaultValue) }];\n      if (!validator(terms)) {\n        results.push({ name: errorMsg, action: () => {} });\n      }\n      this.showResults(results);\n    };\n    this.currentResolver = (e: AllPossibleEvent) => {\n      if (this.currentSelection === 0) {\n        let input = this.input.value;\n        if (validator(input)) {\n          this.setSetting(settingName, input);\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      } else {\n        let action = this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1]);\n        if (action) {\n          action(e);\n          this.goBack = undefined;\n          this.blockProviderChange = false;\n          this.allowInputFieldSelection = false;\n          this.promptCommand('|');\n        }\n      }\n    };\n    this.input.value = this.settings[settingName];\n    this.onInput(this.input.value);\n  }\n\n  showResults(results: IResult[]) {\n    for (let cur of this.currentResults) {\n      cur.remove();\n    }\n    this.currentResults = [];\n    let resultCount = 0;\n    for (let result of results) {\n      this.addResult(result, resultCount);\n      resultCount++;\n      if (resultCount >= (this.settings.maxResults ?? this.defaultSettings.maxResults)) break;\n    }\n  }\n\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'message' implicitly has an 'any' type.\n  tmMessageBuilder(message, params = {}) {\n    return (e: AllPossibleEvent) => {\n      let event = {\n        type: message,\n        paramObject: params,\n        event: e,\n      };\n      this.parentWidget.dispatchEvent(event);\n    };\n  }\n  actionProvider(terms: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = '查看和搜索命令列表';\n    let results: IResult[];\n    if (terms.length === 0) {\n      results = this.getCommandHistory();\n    } else {\n      /**\n       * $tw.utils.pinyinfuse: (xxx) => {\n              item: T;\n              refIndex: number;\n              score?: number | undefined;\n              matches?: readonly Fuse.FuseResultMatch[] | undefined;\n          }[]\n       */\n      if ($tw.utils.pinyinfuse) {\n        results = $tw.utils.pinyinfuse(this.actions, terms.toLowerCase(), ['name', 'caption']).map((item: { item: string }) => item.item);\n      } else {\n        results = this.actions.filter(\n          (item) => item.name.toLowerCase().includes(terms.toLowerCase()) || item.caption?.toLowerCase()?.includes(terms.toLowerCase()),\n        );\n      }\n    }\n    this.showResults(results);\n  }\n\n  filterProvider(terms: string, hint?: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = hint === undefined ? '筛选器语句' : hint;\n    terms = '[' + terms;\n\n    let fields = $tw.wiki.filterTiddlers('[fields[]]');\n\n    let results = $tw.wiki.filterTiddlers(terms).map((r) => {\n      return { name: r };\n    });\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'i' implicitly has an 'any' type.\n    let insertResult = (i, result) => results.splice(i + 1, 0, result);\n    for (let i = 0; i < results.length; i++) {\n      let initialResult = results[i];\n      let alreadyMatched = false;\n      let date = 'Invalid Date';\n      if (initialResult.name.length === 17) {\n        //to be sure to only match tiddly dates (17 char long)\n\n        date = $tw.utils.parseDate(initialResult.name).toLocaleString();\n      }\n      if (date !== 'Invalid Date') {\n        results[i].hint = date;\n        results[i].action = () => {};\n        alreadyMatched = true;\n      }\n\n      let isTag = $tw.wiki.getTiddlersWithTag(initialResult.name).length !== 0;\n      if (isTag) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        results[i].action = () => this.promptCommand('#' + initialResult.name);\n        results[i].hint = 'Tag'; //Todo more info?\n        alreadyMatched = true;\n      }\n      let isTiddler = this.tiddlerOrShadowExists(initialResult.name);\n      if (isTiddler) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        results[i].action = () => {\n          this.navigateTo(initialResult.name);\n          this.closePalette();\n        };\n        results[i].hint = 'Tiddler';\n        alreadyMatched = true;\n      }\n      let isField = fields.includes(initialResult.name);\n      if (isField) {\n        if (alreadyMatched) {\n          insertResult(i, { ...results[i] });\n          i += 1;\n        }\n        let parsed;\n        try {\n          parsed = $tw.wiki.parseFilter(this.input.value);\n        } catch (e) {} //The error is already displayed to the user\n        let foundTitles = [];\n        for (let node of parsed || []) {\n          if (node.operators.length !== 2) continue;\n          if (node.operators[0].operator === 'title' && node.operators[1].operator === 'fields') {\n            foundTitles.push(node.operators[0].operand);\n          }\n        }\n        let hint = 'Field';\n        if (foundTitles.length === 1) {\n          hint = $tw.wiki.getTiddler(foundTitles[0]).fields[initialResult.name];\n          // @ts-expect-error ts-migrate(2358) FIXME: The left-hand side of an 'instanceof' expression m... Remove this comment to see the full error message\n          if (hint instanceof Date) {\n            hint = hint.toLocaleString();\n          }\n          hint = hint.toString().replace(/(\\r\\n|\\n|\\r)/gm, '');\n          let maxSize = (this.settings.maxResultHintSize ?? this.defaultSettings.maxResultHintSize) - 3;\n          if (hint.length > maxSize) {\n            hint = hint.substring(0, maxSize);\n            hint += '...';\n          }\n        }\n        results[i].hint = hint;\n        results[i].action = () => {};\n        alreadyMatched = true;\n      }\n      // let isContentType = terms.includes('content-type');\n    }\n    this.showResults(results);\n  }\n\n  filterResolver(e: AllPossibleEvent) {\n    if (this.currentSelection === 0) return;\n    this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n    e.stopPropagation();\n  }\n\n  helpResolver(e: AllPossibleEvent) {\n    if (this.currentSelection === 0) return;\n    this.getActionFromResultDiv(this.currentResults[this.currentSelection - 1])?.(e);\n    e.stopPropagation();\n  }\n\n  createTiddlerProvider(terms: string) {\n    this.currentSelection = 0;\n    this.hint.innerText = '创建条目，空格隔开可以用#打多个标签';\n    this.showResults([]);\n  }\n\n  createTiddlerResolver(e: AllPossibleEvent) {\n    let { tags, searchTerms } = this.parseTags(this.input.value.substring(1));\n    let title = searchTerms.join(' ');\n    // @ts-expect-error ts-migrate(2322) FIXME: Type 'string' is not assignable to type 'any[]'.\n    tags = tags.join(' ');\n    this.tmMessageBuilder('tm-new-tiddler', { title: title, tags: tags })(e);\n    this.closePalette();\n  }\n\n  promptCommand(value: string, caret?: number) {\n    this.blockProviderChange = false;\n    this.input.value = value;\n    this.input.focus();\n    if (caret !== undefined) {\n      this.input.setSelectionRange(caret, caret);\n    }\n    this.onInput(this.input.value);\n  }\n\n  promptCommandBasic(value: string, caret: number, hint: string) {\n    // TODO: I delete this.settings.neverBasic === 'true' ||  here, see if cause bug\n    if (this.settings.neverBasic === true) {\n      //TODO: validate settings to avoid unnecessary checks\n      this.promptCommand(value, caret);\n      return;\n    }\n    this.input.value = '';\n    this.blockProviderChange = true;\n    this.currentProvider = this.basicProviderBuilder(value, caret, hint);\n    this.onInput(this.input.value);\n  }\n\n  basicProviderBuilder(value: string, caret: number, hint: string) {\n    let start = value.substr(0, caret);\n    let end = value.substr(caret);\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'input' implicitly has an 'any' type.\n    return (input) => {\n      let { resolver, provider, terms } = this.parseCommand(start + input + end);\n      let backgroundProvider = provider;\n      backgroundProvider(terms, hint);\n      this.currentResolver = resolver;\n    };\n  }\n\n  getCommandHistory() {\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\n    this.history = this.history.filter((h) => this.actions.some((a) => a.name === h)); //get rid of deleted command that are still in history;\n    // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'h' implicitly has an 'any' type.\n    let results = this.history.map((h) => this.actions.find((a) => a.name === h));\n    while (results.length <= (this.settings.maxResults ?? this.defaultSettings.maxResults)) {\n      let nextDefaultAction = this.actions.find((a) => !results.includes(a));\n      if (nextDefaultAction === undefined) break;\n      results.push(nextDefaultAction);\n    }\n    return results;\n  }\n\n  actionResolver(e: AllPossibleEvent) {\n    e.preventDefault();\n    e.stopPropagation();\n    if (this.currentSelection === 0) return;\n    let result = this.actions.find((a) => a.name === this.getDataFromResultDiv(this.currentResults[this.currentSelection - 1], 'name'));\n    if (!result) return;\n    if (result.keepPalette) {\n      let curInput = this.input.value;\n      this.goBack = () => {\n        this.input.value = curInput;\n        this.blockProviderChange = false;\n        this.onInput(this.input.value);\n      };\n    }\n    this.updateCommandHistory(result);\n    result.action?.(e);\n    if (result.immediate) {\n      this.validateSelection(e);\n      return;\n    }\n    if (!result.keepPalette) {\n      this.closePalette();\n    }\n  }\n\n  getCurrentSelection() {\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    let selection = window.getSelection().toString();\n    if (selection !== '') return selection;\n    let activeElement = this.getActiveElement();\n    if (activeElement === undefined || activeElement.selectionStart === undefined) return '';\n    if (activeElement.selectionStart > activeElement.selectionEnd) {\n      return activeElement.value.substring(activeElement.selectionStart, activeElement.selectionEnd);\n    } else {\n      return activeElement.value.substring(activeElement.selectionEnd, activeElement.selectionStart);\n    }\n  }\n  // @ts-expect-error ts-migrate(7023) FIXME: 'getActiveElement' implicitly has return type 'any... Remove this comment to see the full error message\n  getActiveElement(element = document.activeElement) {\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    const shadowRoot = element.shadowRoot;\n    // @ts-expect-error ts-migrate(2531) FIXME: Object is possibly 'null'.\n    const contentDocument = element.contentDocument;\n\n    if (shadowRoot && shadowRoot.activeElement) {\n      return this.getActiveElement(shadowRoot.activeElement);\n    }\n\n    if (contentDocument && contentDocument.activeElement) {\n      return this.getActiveElement(contentDocument.activeElement);\n    }\n\n    return element;\n  }\n  // @ts-expect-error ts-migrate(7006) FIXME: Parameter 'el' implicitly has an 'any' type.\n  focusAtCaretPosition(el, caretPos) {\n    if (el !== null) {\n      el.value = el.value;\n      // ^ this is used to not only get \"focus\", but\n      // to make sure we don't have it everything -selected-\n      // (it causes an issue in chrome, and having it doesn't hurt any other browser)\n      if (el.createTextRange) {\n        var range = el.createTextRange();\n        range.move('character', caretPos);\n        range.select();\n        return true;\n      } else {\n        // (el.selectionStart === 0 added for Firefox bug)\n        if (el.selectionStart || el.selectionStart === 0) {\n          el.focus();\n          el.setSelectionRange(caretPos, caretPos);\n          return true;\n        } else {\n          // fail city, fortunately this never happens (as far as I've tested) :)\n          el.focus();\n          return false;\n        }\n      }\n    }\n  }\n\n  createElement<E extends keyof HTMLElementTagNameMap>(name: E, proprieties: any, styles?: Partial<CSSStyleDeclaration>): HTMLDivElement {\n    document.createElement;\n    let el = this.document.createElement(name) as HTMLDivElement;\n    for (let [propriety, value] of Object.entries(proprieties || {})) {\n      // @ts-expect-error ts-migrate(2304) FIXME: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'HTMLDivElement'. No index signature with a parameter of type 'string' was found on type 'HTMLDivElement'.ts(7053)\n      el[propriety] = value;\n    }\n    for (let [style, value] of Object.entries(styles || {})) {\n      el.style[style] = value;\n    }\n    return el;\n  }\n  /*\n\t\t\tSelectively refreshes the widget if needed. Returns true if the widget or any of its children needed re-rendering\n\t\t\t*/\n  refresh() {\n    return false;\n  }\n}\n\nexports.commandpalettewidget = CommandPaletteWidget;\n","type":".ts"},"$:/plugins/linonetwo/commandpalette/Browser Refresh":{"title":"$:/plugins/linonetwo/commandpalette/Browser Refresh","command-palette-name":"Browser Refresh","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/Refresh/Caption}}","command-palette-hint":"{{$:/language/Buttons/Refresh/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-browser-refresh\n"},"$:/plugins/linonetwo/commandpalette/Cancel Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Cancel Tiddler","command-palette-mode":"drafts","command-palette-name":"Cancel Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Cancel/Caption}}","command-palette-hint":"{{$:/language/Buttons/Cancel/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-cancel-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Clone Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Clone Tiddler","command-palette-name":"Clone Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Clone/Caption}}","command-palette-hint":"{{$:/language/Buttons/Clone/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-new-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Close All Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/Close All Tiddlers","command-palette-name":"Close All Tiddlers","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/CloseAll/Caption}}","command-palette-hint":"{{$:/language/Buttons/CloseAll/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-close-all-tiddlers\n"},"$:/plugins/linonetwo/commandpalette/Close Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Close Tiddler","command-palette-name":"Close Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Close/Caption}}","command-palette-hint":"{{$:/language/Buttons/Close/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-close-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Close other Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/Close other Tiddlers","command-palette-name":"Close other Tiddlers","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/CloseOthers/Caption}}","command-palette-hint":"{{$:/language/Buttons/CloseOthers/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-close-other-tiddlers\n"},"$:/plugins/linonetwo/commandpalette/Command Palette Settings":{"title":"$:/plugins/linonetwo/commandpalette/Command Palette Settings","command-palette-name":"Command Palette Settings","command-palette-type":"prompt","command-palette-caption":"命令菜单设置","command-palette-hint":"打开命令菜单的设置，快捷设置命令菜单相关配置","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"|\n"},"$:/plugins/linonetwo/commandpalette/ControlPanel Command":{"title":"$:/plugins/linonetwo/commandpalette/ControlPanel Command","command-palette-name":"Show Control Panel","command-palette-type":"actionString","command-palette-caption":"打开命令菜单","command-palette-hint":"打开命令菜单","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"<$action-navigate $to=\"$:/ControlPanel\"/>"},"$:/plugins/linonetwo/commandpalette/Delete Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Delete Tiddler","command-palette-name":"Delete Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Delete/Caption}}","command-palette-hint":"{{$:/language/Buttons/Delete/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-delete-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Edit Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Edit Tiddler","command-palette-name":"Edit Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Edit/Caption}}","command-palette-hint":"{{$:/language/Buttons/Edit/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-edit-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Filter operation":{"title":"$:/plugins/linonetwo/commandpalette/Filter operation","command-palette-name":"Filter operation","command-palette-type":"prompt","command-palette-caption":"{{$:/language/Buttons/AdvancedSearch/Caption}}","command-palette-hint":"{{$:/language/Buttons/AdvancedSearch/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[\n"},"$:/plugins/linonetwo/commandpalette/Fold All Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/Fold All Tiddlers","command-palette-name":"Fold All Tiddlers","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/FoldAll/Caption}}","command-palette-hint":"{{$:/language/Buttons/FoldAll/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-fold-all-tiddlers\n"},"$:/plugins/linonetwo/commandpalette/Home":{"title":"$:/plugins/linonetwo/commandpalette/Home","command-palette-name":"Home","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/Home/Caption}}","command-palette-hint":"{{$:/language/Buttons/Home/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-home\n"},"$:/plugins/linonetwo/commandpalette/New Journal Command":{"title":"$:/plugins/linonetwo/commandpalette/New Journal Command","command-palette-name":"New Journal","command-palette-type":"actionString","command-palette-caption":"{{$:/language/Buttons/NewJournal/Caption}}","command-palette-hint":"{{$:/language/Buttons/NewJournal/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"{{$:/core/ui/Actions/new-journal}}\n"},"$:/plugins/linonetwo/commandpalette/New Tiddler with title":{"title":"$:/plugins/linonetwo/commandpalette/New Tiddler with title","command-palette-name":"New Tiddler with title","command-palette-type":"prompt","command-palette-caption":"以标题{{$:/language/Buttons/NewTiddler/Caption}}","command-palette-hint":"以标题{{$:/language/Buttons/NewTiddler/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"+\n"},"$:/plugins/linonetwo/commandpalette/New Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/New Tiddler","command-palette-name":"New Tiddler","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/NewTiddler/Caption}}","command-palette-hint":"{{$:/language/Buttons/NewTiddler/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-new-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Permalink":{"title":"$:/plugins/linonetwo/commandpalette/Permalink","command-palette-name":"Permalink","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Permalink/Caption}}","command-palette-hint":"{{$:/language/Buttons/Permalink/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-permalink\n"},"$:/plugins/linonetwo/commandpalette/Permaview":{"title":"$:/plugins/linonetwo/commandpalette/Permaview","command-palette-name":"Permaview","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/Permaview/Caption}}","command-palette-hint":"{{$:/language/Buttons/Permaview/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-permaview\n"},"$:/plugins/linonetwo/commandpalette/Print":{"title":"$:/plugins/linonetwo/commandpalette/Print","command-palette-name":"Print","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/Print/Caption}}","command-palette-hint":"{{$:/language/Buttons/Print/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-print\n"},"$:/plugins/linonetwo/commandpalette/Recent Tiddlers Command":{"title":"$:/plugins/linonetwo/commandpalette/Recent Tiddlers Command","command-palette-caret":"33","command-palette-name":"Recent Tiddlers","command-palette-type":"prompt-basic","command-palette-caption":"查看最近编辑过的Tiddler","command-palette-hint":"在命令菜单里列出最近编辑过的Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[!is[system]!sort[created]search[]]\n"},"$:/plugins/linonetwo/commandpalette/Refresh Server":{"title":"$:/plugins/linonetwo/commandpalette/Refresh Server","command-palette-name":"Refresh Server","command-palette-type":"message","command-palette-caption":"服务器{{$:/language/Buttons/Refresh/Caption}}","command-palette-hint":"服务器{{$:/language/Buttons/Refresh/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-server-refresh\n"},"$:/plugins/linonetwo/commandpalette/Save Tiddler":{"title":"$:/plugins/linonetwo/commandpalette/Save Tiddler","command-palette-mode":"drafts","command-palette-name":"Save Tiddler","command-palette-type":"history","command-palette-caption":"{{$:/language/Buttons/Save/Caption}}","command-palette-hint":"{{$:/language/Buttons/Save/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-save-tiddler\n"},"$:/plugins/linonetwo/commandpalette/Save Wiki":{"title":"$:/plugins/linonetwo/commandpalette/Save Wiki","command-palette-name":"Save Wiki","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/SaveWiki/Caption}}","command-palette-hint":"{{$:/language/Buttons/SaveWiki/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-save-wiki\n"},"$:/plugins/linonetwo/commandpalette/Search Tags":{"title":"$:/plugins/linonetwo/commandpalette/Search Tags","command-palette-name":"Search Tags","command-palette-type":"prompt","command-palette-caption":"搜索标签列表","command-palette-hint":"在命令菜单里列出搜索到的标签","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"#\n"},"$:/plugins/linonetwo/commandpalette/Search fields":{"title":"$:/plugins/linonetwo/commandpalette/Search fields","command-palette-caret":"16","command-palette-name":"Search fields","command-palette-type":"prompt-basic","command-palette-caption":"搜索字段名","command-palette-hint":"在命令菜单里搜索列出所有Wiki里涉及到的字段名","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[fields[]search[]]\n"},"$:/plugins/linonetwo/commandpalette/Search tiddlers with tag":{"title":"$:/plugins/linonetwo/commandpalette/Search tiddlers with tag","command-palette-name":"用 @标签 搜索条目","command-palette-type":"prompt","command-palette-caption":"带某个标签的Tiddler","command-palette-hint":"在命令菜单里列出带某个标签的Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"@\n"},"$:/plugins/linonetwo/commandpalette/Search":{"title":"$:/plugins/linonetwo/commandpalette/Search","command-palette-name":"Search","command-palette-type":"prompt","command-palette-caption":"{{$:/language/Buttons/AdvancedSearch/Caption}}","command-palette-hint":"{{$:/language/Buttons/AdvancedSearch/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki"},"$:/plugins/linonetwo/commandpalette/See Drafts":{"title":"$:/plugins/linonetwo/commandpalette/See Drafts","command-palette-caret":"27","command-palette-name":"See Drafts","command-palette-type":"prompt-basic","command-palette-caption":"查看草稿Tiddler","command-palette-hint":"在命令菜单里列出所有处于草稿状态的Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[has:field[draft.of]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Languages":{"title":"$:/plugins/linonetwo/commandpalette/See Languages","command-palette-caret":"43","command-palette-name":"See Languages","command-palette-type":"prompt-basic","command-palette-caption":"查看语言列表","command-palette-hint":"在命令菜单里列出语言列表","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[!has[draft.of]plugin-type[language]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Missing Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/See Missing Tiddlers","command-palette-caret":"20","command-palette-name":"See Mising Tiddlers","command-palette-type":"prompt-basic","command-palette-caption":"查看缺失的Tiddler","command-palette-hint":"在命令菜单里列出缺失的Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[all[missing]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Orphans Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/See Orphans Tiddlers","command-palette-caret":"20","command-palette-name":"See Orphans Tiddlers","command-palette-type":"prompt-basic","command-palette-caption":"查看孤儿Tiddler","command-palette-hint":"在命令菜单里列出孤儿Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[all[orphans]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Plugins":{"title":"$:/plugins/linonetwo/commandpalette/See Plugins","command-palette-caret":"41","command-palette-name":"See Plugins","command-palette-type":"prompt-basic","command-palette-caption":"查看插件列表","command-palette-hint":"在命令菜单里列出插件列表","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[!has[draft.of]plugin-type[plugin]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Shadows Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/See Shadows Tiddlers","command-palette-caret":"20","command-palette-name":"See Shadows Tiddlers","command-palette-type":"prompt-basic","command-palette-caption":"查看系统Tiddler","command-palette-hint":"在命令菜单里列出系统Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[all[shadows]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See Story List":{"title":"$:/plugins/linonetwo/commandpalette/See Story List","command-palette-caret":"26","command-palette-name":"See Story List","command-palette-type":"prompt-basic","command-palette-caption":"查看开启的Tiddler","command-palette-hint":"在命令菜单里列出开启的Tiddler","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[list[$:/StoryList]search[]]"},"$:/plugins/linonetwo/commandpalette/See Themes":{"title":"$:/plugins/linonetwo/commandpalette/See Themes","command-palette-caret":"40","command-palette-name":"See Themes","command-palette-type":"prompt-basic","command-palette-caption":"查看主题","command-palette-hint":"列出可用主题","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[!has[draft.of]plugin-type[theme]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See all content-types":{"title":"$:/plugins/linonetwo/commandpalette/See all content-types","command-palette-caret":"48","command-palette-name":"See all content-type","command-palette-type":"prompt-basic","command-palette-caption":"查看内容类型","command-palette-hint":"在命令菜单里列出所有Wiki里涉及到的内容类型","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[all[tiddlers+shadows]each[type]get[type]search[]]\n"},"$:/plugins/linonetwo/commandpalette/See untagged tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/See untagged tiddlers","command-palette-caret":"29","command-palette-name":"See untagged Tiddlers","command-palette-type":"prompt-basic","command-palette-caption":"查看未打标签的Tiddler","command-palette-hint":"在命令菜单里列出未打标签的Tiddler列表","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[untagged[]!is[system]search[]]\n"},"$:/plugins/linonetwo/commandpalette/Show help":{"title":"$:/plugins/linonetwo/commandpalette/Show help","command-palette-name":"Show help","command-palette-type":"prompt","command-palette-caption":"展示帮助","command-palette-hint":"列出有哪些用法","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"?\n"},"$:/plugins/linonetwo/commandpalette/Toggle Fullscreen":{"title":"$:/plugins/linonetwo/commandpalette/Toggle Fullscreen","command-palette-name":"Toggle Fullscreen","command-palette-type":"message","command-palette-caption":"{{$:/language/Buttons/FullScreen/Caption}}","command-palette-hint":"{{$:/language/Buttons/FullScreen/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"tm-full-screen\n"},"$:/plugins/linonetwo/commandpalette/Unfold All Tiddlers":{"title":"$:/plugins/linonetwo/commandpalette/Unfold All Tiddlers","command-palette-name":"Unfold All Tiddlers","command-palette-type":"actionString","command-palette-caption":"{{$:/language/Buttons/UnfoldAll/Caption}}","command-palette-hint":"{{$:/language/Buttons/UnfoldAll/Hint}}","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"tm-unfold-all-tiddlers\" foldedStatePrefix=\"$:/state/folded/\"/>\n"},"$:/plugins/linonetwo/commandpalette/Version":{"title":"$:/plugins/linonetwo/commandpalette/Version","command-palette-caret":"49","command-palette-name":"Version","command-palette-type":"prompt-basic","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"[[$:/plugins/linonetwo/commandpalette]get[version]]"},"$:/plugins/linonetwo/commandpalette/show tiddler commands":{"title":"$:/plugins/linonetwo/commandpalette/show tiddler commands","command-palette-name":"Show CommandTiddlers","command-palette-type":"prompt","command-palette-caption":"展示可用命令Tiddler列表","command-palette-hint":"列出命令菜单的命令来自哪些Tiddlers","tags":"$:/tags/CommandPaletteCommand","type":"text/vnd.tiddlywiki","text":"@$:/tags/CommandPaletteCommand\n"},"$:/plugins/linonetwo/itonnote/readme":{"title":"$:/plugins/linonetwo/itonnote/readme","type":"text/vnd.tiddlywiki","text":"此插件基于[[Souk21/TW-commandpalette|https://github.com/Souk21/TW-commandpalette]]，非常感谢他的工作，在过去的一年里这个插件极大地为我提高了工作效率。我将它主要源码复制过来汉化并加入拼音搜索功能，以便我们更灵活地在中文环境下使用。\n\n!! 功能\n\n按下 ctrl/cmd + P 唤起搜索框，按的时候如果多加一个 shift 可以唤起功能框。\n\n搜索的时候可以打拼音。\n"},"$:/config/ShortcutInfo/command-palette-switch-history-back":{"title":"$:/config/ShortcutInfo/command-palette-switch-history-back","tags":"","type":"text/vnd.tiddlywiki","text":"Switch to previously opened tiddler (Inversed)"},"$:/config/ShortcutInfo/command-palette-switch-history":{"title":"$:/config/ShortcutInfo/command-palette-switch-history","tags":"","type":"text/vnd.tiddlywiki","text":"Switch to previously opened tiddler"},"$:/config/ShortcutInfo/insert-command-palette-result":{"title":"$:/config/ShortcutInfo/insert-command-palette-result","created":"20200604175511112","modified":"20200604175520378","tags":"","type":"text/vnd.tiddlywiki","text":"Insert the current result in the previously focused element"},"$:/config/ShortcutInfo/open-command-palette-command-mode":{"title":"$:/config/ShortcutInfo/open-command-palette-command-mode","tags":"","type":"text/vnd.tiddlywiki","text":"Open the command palette in command mode"},"$:/config/ShortcutInfo/open-command-palette-selection":{"title":"$:/config/ShortcutInfo/open-command-palette-selection","created":"20200604175511112","modified":"20200604175520378","tags":"","type":"text/vnd.tiddlywiki","text":"Open the command palette with current selection"},"$:/config/ShortcutInfo/open-command-palette":{"title":"$:/config/ShortcutInfo/open-command-palette","created":"20200531223953066","modified":"20200531224011568","tags":"","type":"text/vnd.tiddlywiki","text":"Open the command palette"},"$:/config/shortcuts-mac/insert-command-palette-result":{"title":"$:/config/shortcuts-mac/insert-command-palette-result","type":"text/vnd.tiddlywiki","text":"shift-cmd-I"},"$:/config/shortcuts-mac/open-command-palette-command-mode":{"title":"$:/config/shortcuts-mac/open-command-palette-command-mode","type":"text/vnd.tiddlywiki","text":"cmd-shift-P"},"$:/config/shortcuts-mac/open-command-palette":{"title":"$:/config/shortcuts-mac/open-command-palette","type":"text/vnd.tiddlywiki","text":"cmd-P"},"$:/config/shortcuts/command-palette-switch-history-back":{"title":"$:/config/shortcuts/command-palette-switch-history-back","tags":"","type":"text/vnd.tiddlywiki","text":"ctrl-shift-tab"},"$:/config/shortcuts/command-palette-switch-history":{"title":"$:/config/shortcuts/command-palette-switch-history","tags":"","type":"text/vnd.tiddlywiki","text":"ctrl-tab"},"$:/config/shortcuts/insert-command-palette-result":{"title":"$:/config/shortcuts/insert-command-palette-result","created":"20200604175539239","modified":"20200604175658624","type":"text/vnd.tiddlywiki","text":"ctrl+shift+I"},"$:/config/shortcuts/open-command-palette-command-mode":{"title":"$:/config/shortcuts/open-command-palette-command-mode","type":"text/vnd.tiddlywiki","text":"ctrl-shift-P"},"$:/config/shortcuts/open-command-palette-selection":{"title":"$:/config/shortcuts/open-command-palette-selection","type":"text/vnd.tiddlywiki","text":""},"$:/config/shortcuts/open-command-palette":{"title":"$:/config/shortcuts/open-command-palette","tags":"","type":"text/vnd.tiddlywiki","text":"ctrl-P"},"$:/core/ui/KeyboardShortcuts/CommandPalette":{"title":"$:/core/ui/KeyboardShortcuts/CommandPalette","key":"((open-command-palette))","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"open-command-palette\"/>"},"$:/plugins/linonetwo/commandpalette/CommandPaletteCommandMode":{"title":"$:/plugins/linonetwo/commandpalette/CommandPaletteCommandMode","key":"((open-command-palette-command-mode))","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"open-command-palette\" $param=\">\" />"},"$:/plugins/linonetwo/commandpalette/CommandPaletteSelection":{"title":"$:/plugins/linonetwo/commandpalette/CommandPaletteSelection","created":"20200604175339522","key":"((open-command-palette-selection))","modified":"20200604175716862","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"open-command-palette-selection\"/>"},"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistory":{"title":"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistory","key":"((command-palette-switch-history))","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"command-palette-switch-history\" />"},"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistoryBack":{"title":"$:/plugins/linonetwo/commandpalette/CommandPaletteSwitchHistoryBack","key":"((command-palette-switch-history-back))","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"command-palette-switch-history-back\" />"},"$:/plugins/linonetwo/commandpalette/InsertCommandPaletteResult":{"title":"$:/plugins/linonetwo/commandpalette/InsertCommandPaletteResult","key":"((insert-command-palette-result))","tags":"$:/tags/KeyboardShortcut","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage $message=\"insert-command-palette-result\"/>"},"$:/plugins/linonetwo/commandpalette/Compact.css":{"title":"$:/plugins/linonetwo/commandpalette/Compact.css","tags":"$:/tags/CommandPaletteTheme $:/tags/Stylesheet","type":"text/vnd.tiddlywiki","text":"\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n:root {\n    --palette-radius: 5px;\n}\n.commandpalette {\n    position: fixed;\n    background: <<colour background>>;\n    z-index: 9999;\n    left: 50%;\n    top: 10%;\n    transform: translate(-50%, 0%);\n    width: 500px;\n    display: none;\n    flex-direction: column;\n    font-size: 21px;\n    border-radius: var(--palette-radius);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\n    border: 2px solid <<colour page-background>>;\n}\n@media (max-width: 540px) {\n  .commandpalette {\n    width: calc(100vw - 40px);\n  }\n}\n.commandpalette-masklayer {\n    position: fixed;\n    z-index: 9998;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100vw;\n    height: 100vh;\n    background: <<colour background>>;\n    opacity: 0;\n    filter: contrast(130%);\n    min-width: 200px !important;\n    transition: all {{$:/config/AnimationDuration}}ms;\n    pointer-events: none;\n    backdrop-filter: blur(10px);\n    background-color: rgba(255,255,255,0.6);\n}\n.inputhintwrapper {\n    display: flex;\n    align-items: center;\n    border-bottom: 1px solid <<colour page-background>>;\n}\n.commandpalette input {\n    border: 0;\n    background: 0;\n    height: 40px;\n    color: <<colour foreground>>;\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\n    outline: 0;\n    min-width: 50px;\n    flex: 1;\n    padding-left: 7px;\n}\n.commandpalettetitle {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n.commandpalettehint {\n    font-size: 13px;\n    text-align: right;\n    flex-shrink: 0;\n    padding-right: 7px;\n    opacity: 0.6;\n    font-weight: 800;\n}\n.commandpaletteresultselected>.commandpalettehint {\n    opacity: 1;\n}\n.commandpalettehintmain {\n\n}\n.commandpaletteresult {\n    background: <<colour background>>;\n    font-size: 15px;\n    color: <<colour foreground>>;\n    fill: <<colour foreground>>;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding-left: 6px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    cursor: pointer;\n    width: 100%;\n}\n.commandpaletteresult:not(:last-child) {\n    border-bottom: <<colour page-background>> solid 1px;\n}\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\n    background: <<colour page-background>>;\n}\n.commandpaletteresultselected {\n    background: <<colour primary>>;\n    color: <<colour tiddler-link-background>>;\n    fill: <<colour tiddler-link-background>>;\n}\n.cp-scroll{\n    max-height: 50vh;\n    overflow-y: auto;\n    position: relative;\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\n}\n"},"$:/plugins/linonetwo/commandpalette/Original.css":{"title":"$:/plugins/linonetwo/commandpalette/Original.css","tags":"$:/tags/CommandPaletteTheme","type":"text/vnd.tiddlywiki","text":"\n\\rules only filteredtranscludeinline transcludeinline macrodef macrocallinline html\n:root {\n    --palette-radius: 5px;\n}\n.commandpalette {\n    position: fixed;\n    background:<<colour page-background>>;\n    z-index: 9999;\n    left: 50%;\n    top: 10%;\n    transform: translate(-50%, 0%);\n    width: 500px;\n    display: none;\n    flex-direction: column;\n    font-size: 21px;\n    border-radius: var(--palette-radius);\n    box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 14px;\n    border: 4px solid transparent;\n}\n@media (max-width: 540px) {\n  .commandpalette {\n    width: calc(100vw - 40px);\n  }\n}\n.commandpalette-masklayer {\n    position: fixed;\n    z-index: 9998;\n    top: 0;\n    left: 0;\n    right: 0;\n    bottom: 0;\n    width: 100vw;\n    height: 100vh;\n    background: <<colour background>>;\n    opacity: 0;\n    filter: contrast(130%);\n    min-width: 200px !important;\n    transition: all {{$:/config/AnimationDuration}}ms;\n    pointer-events: none;\n    backdrop-filter: blur(10px);\n    background-color: rgba(255,255,255,0.6);\n}\n.commandpalette input {\n    border: 0;\n    height: 40px;\n    color: <<colour foreground>>;\n    border-radius: var(--palette-radius) var(--palette-radius) 0px 0px;\n    padding-left: 11px;\n    padding-right: 11px;\n    width: 100%;\n    outline: 0;\n}\n.commandpalettetitle {\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n}\n.commandpalettehint {\n    font-size: 13px;\n    text-align: right;\n    flex-shrink: 0;\n    padding-right: 7px;\n    opacity: 0.6;\n    font-weight: 800;\n}\n.commandpaletteresultselected>.commandpalettehint {\n    opacity: 1;\n}\n.commandpalettehintmain {\n}\n.commandpaletteresult {\n    background: <<colour background>>;\n    font-size: 15px;\n    color: <<colour foreground>>;\n    fill: <<colour foreground>>;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n    padding-left: 6px;\n    padding-top: 4px;\n    padding-bottom: 4px;\n    cursor: pointer;\n    width: 100%;\n}\n.commandpaletteresult:not(:last-child) {\n    border-bottom: <<colour page-background>> solid 1px;\n}\n.commandpaletteresult:hover:not(.commandpaletteresultselected) {\n    background: <<colour page-background>>;\n}\n.commandpaletteresultselected {\n    background: <<colour primary>>;\n    color: <<colour page-background>>;\n    fill: <<colour page-background>>;\n}\n.cp-scroll{\n    max-height: 50vh;\n    overflow-y: auto;\n    position: relative;\n    border-radius: 0px 0px var(--palette-radius) var(--palette-radius);\n}\n"},"$:/core/ui/Buttons/CommandPalette":{"title":"$:/core/ui/Buttons/CommandPalette","caption":"{{$:/plugins/linonetwo/commandpalette/command-palette.svg}} Command Palette","description":"Open Command Palette","tags":"$:/tags/PageControls","type":"text/vnd.tiddlywiki","text":"<$button class=<<tv-config-toolbar-class>> message=\"open-command-palette\" tooltip=\"Open Command Palette\" aria-label=\"Command Palette\"><$list filter=\"[<tv-config-toolbar-icons>match[yes]]\">{{$:/plugins/linonetwo/commandpalette/command-palette.svg}}</$list><$list filter=\"[<tv-config-toolbar-text>match[yes]]\"><span class=\"tc-btn-text\"><$text text=\"Command Palette\"/></span></$list></$button>\n"},"$:/plugins/linonetwo/commandpalette/View":{"title":"$:/plugins/linonetwo/commandpalette/View","tags":"$:/tags/AboveStory","type":"text/vnd.tiddlywiki","text":"<$commandpalettewidget/>\n"},"$:/plugins/linonetwo/commandpalette/command-palette.svg":{"title":"$:/plugins/linonetwo/commandpalette/command-palette.svg","tags":"$:/tags/Image","text":"<svg aria-hidden=\"true\" width=\"22pt\" height=\"22pt\" class=\"tc-image-button commandpalette-button\" viewBox=\"0 0 512 512\" style=\"transform: rotate(225deg);\">\n  <path d=\"M224 96l16-32 32-16-32-16-16-32-16 32-32 16 32 16 16 32zM80 160l26.66-53.33L160 80l-53.34-26.67L80 0 53.34 53.33 0 80l53.34 26.67L80 160zm0-96c8.84 0 16 7.16 16 16s-7.16 16-16 16-16-7.16-16-16 7.16-16 16-16zm352 224l-26.66 53.33L352 368l53.34 26.67L432 448l26.66-53.33L512 368l-53.34-26.67L432 288zm0 96c-8.84 0-16-7.16-16-16s7.16-16 16-16 16 7.16 16 16-7.16 16-16 16zm70.63-306.04L434.04 9.37C427.79 3.12 419.6 0 411.41 0s-16.38 3.12-22.63 9.37L9.37 388.79c-12.5 12.5-12.5 32.76 0 45.25l68.59 68.59c6.25 6.25 14.44 9.37 22.63 9.37s16.38-3.12 22.63-9.37l379.41-379.41c12.49-12.5 12.49-32.76 0-45.26zM100.59 480L32 411.41l258.38-258.4 68.6 68.6L100.59 480zm281.02-281.02l-68.6-68.6L411.38 32h.03L480 100.59l-98.39 98.39z\" fill-rule=\"evenodd\"/>\n</svg>\n"}}}