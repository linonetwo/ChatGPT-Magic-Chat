{"tiddlers":{"$:/config/DownloadSaver/AutoSave":{"title":"$:/config/DownloadSaver/AutoSave","created":"20190601103555586","creator":"Lin Onetwo","modified":"20200410072837906","modifier":"Lin Onetwo","type":"text/vnd.tiddlywiki","text":"no"},"$:/config/MissingLinks":{"title":"$:/config/MissingLinks","created":"20190419034301891","modified":"20200409033736457","type":"text/vnd.tiddlywiki","text":"yes"},"$:/config/Navigation/UpdateAddressBar":{"title":"$:/config/Navigation/UpdateAddressBar","created":"20190419034459572","creator":"林一二","modified":"20200409033736422","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"permaview"},"$:/config/Navigation/UpdateHistory":{"title":"$:/config/Navigation/UpdateHistory","created":"20190419034422400","modified":"20200409033736411","type":"text/vnd.tiddlywiki","text":"yes"},"$:/config/Navigation/openLinkFromInsideRiver":{"title":"$:/config/Navigation/openLinkFromInsideRiver","created":"20200409033736445","modified":"20200409033736445","type":"text/vnd.tiddlywiki","text":"above"},"$:/config/Navigation/openLinkFromOutsideRiver":{"title":"$:/config/Navigation/openLinkFromOutsideRiver","created":"20200409033736433","modified":"20200409033736433","type":"text/vnd.tiddlywiki","text":"top"},"$:/config/Plugins/Disabled/$:/plugins/sycom/g-analytics":{"title":"$:/config/Plugins/Disabled/$:/plugins/sycom/g-analytics","created":"20190823032141720","creator":"Lin Onetwo - 林一二","modified":"20200409033736354","modifier":"Lin Onetwo - 林一二","type":"text/vnd.tiddlywiki","text":"no"},"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/codemirror-mode-x-tiddlywiki":{"title":"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/codemirror-mode-x-tiddlywiki","created":"20200411033813183","modified":"20200411033814242","type":"text/vnd.tiddlywiki","text":"yes"},"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/codemirror":{"title":"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/codemirror","created":"20200530042942722","modified":"20200530043337009","type":"text/vnd.tiddlywiki","text":"no"},"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/highlight":{"title":"$:/config/Plugins/Disabled/$:/plugins/tiddlywiki/highlight","created":"20190419154112345","modified":"20200409033736342","type":"text/vnd.tiddlywiki","text":"no"},"$:/config/RelinkOnRename":{"title":"$:/config/RelinkOnRename","created":"20200408113649017","creator":"Lin Onetwo - 林一二","modified":"20211104104033123","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"yes"},"$:/config/Search/MinLength":{"title":"$:/config/Search/MinLength","created":"20190419153747812","modified":"20200409033736319","tags":"","type":"text/vnd.tiddlywiki","text":"1"},"$:/config/Toolbar/ButtonClass":{"title":"$:/config/Toolbar/ButtonClass","created":"20190419034516378","modified":"20200409033736308","type":"text/vnd.tiddlywiki","text":"tc-btn-invisible"},"$:/config/WikiParserRules/Inline/wikilink":{"title":"$:/config/WikiParserRules/Inline/wikilink","created":"20190419034308697","modified":"20200409033736296","type":"text/vnd.tiddlywiki","text":"disable"},"$:/config/codemirror/autoCloseTags":{"title":"$:/config/codemirror/autoCloseTags","text":"true","type":"bool","created":"20210622180509486","creator":"TiddlyGit User","modified":"20210622180509499","modifier":"TiddlyGit User"},"$:/config/codemirror/indentWithTabs":{"title":"$:/config/codemirror/indentWithTabs","text":"false","type":"bool","created":"20210622180509486","creator":"TiddlyGit User","modified":"20210622180509499","modifier":"TiddlyGit User"},"$:/config/codemirror/keyMap":{"title":"$:/config/codemirror/keyMap","text":"sublime\n","type":"string","created":"20210622181242658","creator":"TiddlyGit User","modified":"20210622181242668","modifier":"TiddlyGit User"},"$:/config/markdown/renderWikiTextPragma":{"title":"$:/config/markdown/renderWikiTextPragma","created":"20211104053553213","creator":"林一二","modified":"20211104053830091","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"\\rules only html image macrocallinline syslink transcludeinline wikilink prettylink filteredtranscludeblock macrocallblock transcludeblock "},"$:/config/section-editor/config-editor-type":{"title":"$:/config/section-editor/config-editor-type","created":"20211103170442092","creator":"林一二","modified":"20211103170442098","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"main-editor"},"$:/config/section-editor/config-visibility-toolbar":{"title":"$:/config/section-editor/config-visibility-toolbar","created":"20211103170443459","creator":"林一二","modified":"20211103170443464","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"yes"},"$:/config/section-editor/hlevel":{"title":"$:/config/section-editor/hlevel","created":"20211103170546518","creator":"林一二","modified":"20211228162503797","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"5"},"$:/config/section-editor/reader-mode":{"title":"$:/config/section-editor/reader-mode","created":"20211228162506611","creator":"林一二","modified":"20211228162519164","modifier":"林一二","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts/cancel-edit-tiddler":{"title":"$:/config/shortcuts/cancel-edit-tiddler","created":"20211004052011062","creator":"林一二","modified":"20211004052016698","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"shift-Escape"},"$:/language":{"title":"$:/language","type":"text/vnd.tiddlywiki","text":"$:/languages/zh-Hans"},"$:/themes/tiddlywiki/vanilla/options/sidebarlayout":{"title":"$:/themes/tiddlywiki/vanilla/options/sidebarlayout","created":"20200605100438813","creator":"林一二","modified":"20200605100438836","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"fluid-fixed"},"$:/config/DefaultSidebarTab":{"title":"$:/config/DefaultSidebarTab","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":"$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/editor-height":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/editor-height","created":"20220217151940912","creator":"林一二","modified":"20220217151940912","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-4":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/heading-4","created":"20220217151927360","creator":"林一二","modified":"20220217151927360","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/linkify":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/linkify","created":"20220217152007030","creator":"林一二","modified":"20220217152007030","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/mono-block":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/mono-block","created":"20220217152010844","creator":"林一二","modified":"20220217152010844","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/mono-line":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/mono-line","created":"20220217152001764","creator":"林一二","modified":"20220217152001764","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/rotate-left":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/rotate-left","created":"20220217152027754","creator":"林一二","modified":"20220217152033705","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/size":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/size","created":"20220217151938983","creator":"林一二","modified":"20220217152036687","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/subscript":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/subscript","created":"20220217151958198","creator":"林一二","modified":"20220217151958198","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/transcludify":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/core/ui/EditorToolbar/transcludify","created":"20220217152005826","creator":"林一二","modified":"20220217152005826","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/plugins/stobot/sticky/EditorToolbarButton":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/plugins/stobot/sticky/EditorToolbarButton","created":"20220217151956095","creator":"林一二","modified":"20220217151956095","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/EditorToolbarButtons/Visibility/$:/plugins/tiddlywiki/markdown/EditorToolbar/mono-line":{"title":"$:/config/EditorToolbarButtons/Visibility/$:/plugins/tiddlywiki/markdown/EditorToolbar/mono-line","created":"20220217152000867","creator":"林一二","modified":"20220217152000867","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/TextEditor/EditorHeight/Mode":{"title":"$:/config/TextEditor/EditorHeight/Mode","created":"20211030152517217","creator":"林一二","modified":"20211030152521841","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"auto"},"$:/core/ui/EditorToolbar/linkify":{"title":"$:/core/ui/EditorToolbar/linkify","caption":"{{$:/language/Buttons/Linkify/Caption}}","condition":"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]","created":"20200408132942967","creator":"林一二","description":"{{$:/language/Buttons/Linkify/Hint}}","icon":"$:/core/images/linkify","modified":"20200409033736283","modifier":"林一二","shortcuts":"((linkify))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"wrap-selection\"\n\tprefix=\"[[\"\n\tsuffix=\"]]\"\n/>\n"},"$:/core/ui/EditorToolbar/transcludify":{"title":"$:/core/ui/EditorToolbar/transcludify","caption":"{{$:/language/Buttons/Transcludify/Caption}}","condition":"[<targetTiddler>!has[type]] [<targetTiddler>type[text/vnd.tiddlywiki]]","created":"20200408132942967","creator":"林一二","description":"{{$:/language/Buttons/Transcludify/Hint}}","icon":"$:/core/images/transcludify","modified":"20200409033736271","modifier":"林一二","shortcuts":"((transcludify))","tags":"$:/tags/EditorToolbar","type":"text/vnd.tiddlywiki","text":"<$action-sendmessage\n\t$message=\"tm-edit-text-operation\"\n\t$param=\"wrap-selection\"\n\tprefix=\"{{\"\n\tsuffix=\"}}\"\n/>\n"},"$:/plugins/linonetwo/itonnote/Configs/SideBarFolderMenuBaseTitle":{"title":"$:/plugins/linonetwo/itonnote/Configs/SideBarFolderMenuBaseTitle","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":"Index"},"$:/config/DefaultMoreSidebarTab":{"title":"$:/config/DefaultMoreSidebarTab","created":"20200409060942350","creator":"linonetwo","modified":"20200410073440927","modifier":"linonetwo","type":"text/vnd.tiddlywiki","text":"$:/core/ui/MoreSideBar/Orphans"},"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/advanced-search":{"title":"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/advanced-search","created":"20200602124339340","modified":"20200602124339360","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/control-panel":{"title":"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/control-panel","created":"20200410174523174","modified":"20200410175230294","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption":{"title":"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/encryption","created":"20200410174620924","modified":"20200410174809069","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home":{"title":"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/home","created":"20200408133027695","creator":"Lin Onetwo - 林一二","modified":"20200409033736388","modifier":"Lin Onetwo - 林一二","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions":{"title":"$:/config/PageControlButtons/Visibility/$:/core/ui/Buttons/more-page-actions","created":"20200408133032024","creator":"Lin Onetwo - 林一二","modified":"20200409033736377","modifier":"Lin Onetwo - 林一二","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/PageControlButtons/Visibility/$:/plugins/kookma/commander/buttons/pagecontrol":{"title":"$:/config/PageControlButtons/Visibility/$:/plugins/kookma/commander/buttons/pagecontrol","created":"20200410174517268","modified":"20200410174518337","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/export-tiddler":{"title":"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/export-tiddler","created":"20200410064657446","modified":"20200410064708140","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-here":{"title":"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-here","created":"20200409065701335","modified":"20200409065702475","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-journal-here":{"title":"$:/config/ViewToolbarButtons/Visibility/$:/core/ui/Buttons/new-journal-here","created":"20200410064650269","modified":"20200410064651361","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/ViewToolbarButtons/Visibility/$:/plugins/danielo/encryptTiddler/crypt-button":{"title":"$:/config/ViewToolbarButtons/Visibility/$:/plugins/danielo/encryptTiddler/crypt-button","created":"20200410064748749","modified":"20200410175238416","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/ViewToolbarButtons/Visibility/$:/plugins/tiddlywiki/text-slicer/ui/slice-toolbar-button":{"title":"$:/config/ViewToolbarButtons/Visibility/$:/plugins/tiddlywiki/text-slicer/ui/slice-toolbar-button","created":"20200411035036487","modified":"20200411035037540","type":"text/vnd.tiddlywiki","text":"hide"},"$:/palette":{"title":"$:/palette","type":"text/vnd.tiddlywiki","text":"$:/palettes/Notion"},"$:/tags/PageControls":{"title":"$:/tags/PageControls","created":"20200604080106170","creator":"LinOnetwo","list":"$:/plugins/linonetwo/omni-search-bar/ui/Buttons/search $:/core/ui/Buttons/home $:/core/ui/Buttons/close-all $:/core/ui/Buttons/fold-all $:/core/ui/Buttons/unfold-all $:/core/ui/Buttons/permaview $:/core/ui/Buttons/more-page-actions $:/core/ui/Buttons/new-tiddler $:/plugins/tiddlywiki/markdown/new-markdown-button $:/plugins/kookma/solution/buttons/pagecontrol $:/core/ui/Buttons/new-journal $:/core/ui/Buttons/new-image $:/core/ui/Buttons/import $:/core/ui/Buttons/export-page $:/core/ui/Buttons/control-panel $:/core/ui/Buttons/advanced-search $:/plugins/kookma/commander/buttons/pagecontrol $:/core/ui/Buttons/manager $:/core/ui/Buttons/tag-manager $:/core/ui/Buttons/language $:/core/ui/Buttons/palette $:/core/ui/Buttons/theme $:/core/ui/Buttons/storyview $:/core/ui/Buttons/encryption $:/core/ui/Buttons/timestamp $:/core/ui/Buttons/full-screen $:/core/ui/Buttons/print $:/core/ui/Buttons/refresh $:/plugins/kookma/utility/pagecontrol/view-fields-button $:/core/ui/Buttons/save-wiki $:/plugins/linonetwo/source-control-management/PageControlButton","type":"text/vnd.tiddlywiki"},"$:/theme":{"title":"$:/theme","type":"text/vnd.tiddlywiki","text":"$:/themes/linonetwo/itonnote"},"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint":{"title":"$:/themes/tiddlywiki/vanilla/metrics/sidebarbreakpoint","created":"20200409023154184","creator":"林一二","modified":"20200409033737112","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"960px"},"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth":{"title":"$:/themes/tiddlywiki/vanilla/metrics/sidebarwidth","created":"20200408112506281","creator":"林一二","modified":"20211017052047040","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"380px"},"$:/themes/tiddlywiki/vanilla/metrics/storywidth":{"title":"$:/themes/tiddlywiki/vanilla/metrics/storywidth","created":"20200409023115883","creator":"林一二","modified":"20200409033737088","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"770px"},"$:/themes/tiddlywiki/vanilla/options/stickytitles":{"title":"$:/themes/tiddlywiki/vanilla/options/stickytitles","created":"20200408115751958","creator":"林一二","modified":"20200409033737062","modifier":"林一二","type":"text/vnd.tiddlywiki","text":"yes"},"$:/themes/tiddlywiki/vanilla/settings/codefontfamily":{"title":"$:/themes/tiddlywiki/vanilla/settings/codefontfamily","created":"20190420032819437","modified":"20200409033737050","type":"text/vnd.tiddlywiki","text":"'Fira Code',\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,Courier,monospace"},"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily":{"title":"$:/themes/tiddlywiki/vanilla/settings/editorfontfamily","created":"20190421072924643","modified":"20200409033737038","type":"text/vnd.tiddlywiki","text":"'Fira Code',\"SFMono-Regular\",Consolas,\"Liberation Mono\",Menlo,Courier,monospace"},"$:/themes/tiddlywiki/vanilla/settings/fontfamily":{"title":"$:/themes/tiddlywiki/vanilla/settings/fontfamily","created":"20190420034215366","modified":"20200409033737026","type":"text/vnd.tiddlywiki","text":"'Fira Code',-apple-system, BlinkMacSystemFont, \"Segoe UI\", Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\""},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/contents":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/contents","created":"20200415162108079","modified":"20200602041547212","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/hamburger":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/hamburger","created":"20200415162126215","modified":"20200415162128295","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/pagecontrols":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/pagecontrols","created":"20200415162131716","modified":"20200415162330718","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/sidebar":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/sidebar","created":"20200415162109418","modified":"20200415162109442","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/topleftbar":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/topleftbar","created":"20200415162101755","modified":"20200602041539750","type":"text/vnd.tiddlywiki","text":"hide"},"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/toprightbar":{"title":"$:/config/plugins/menubar/MenuItems/Visibility/$:/plugins/tiddlywiki/menubar/items/toprightbar","created":"20200415162118824","modified":"20200415163710486","type":"text/vnd.tiddlywiki","text":"show"},"$:/config/shortcuts-mac/bold":{"title":"$:/config/shortcuts-mac/bold","created":"20200602011151844","modified":"20200602011151860","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-mac/italic":{"title":"$:/config/shortcuts-mac/italic","created":"20200602011428084","modified":"20200602011428114","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-mac/new-image":{"title":"$:/config/shortcuts-mac/new-image","created":"20200602011526855","modified":"20200602011526866","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-mac/new-journal":{"title":"$:/config/shortcuts-mac/new-journal","created":"20200602011519033","modified":"20200602011519055","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-mac/toggle-sidebar":{"title":"$:/config/shortcuts-mac/toggle-sidebar","created":"20200602011322158","modified":"20200602011322171","type":"text/vnd.tiddlywiki","text":"cmd-B"},"$:/config/shortcuts-not-mac/bold":{"title":"$:/config/shortcuts-not-mac/bold","created":"20200602011156768","modified":"20200602011156779","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-not-mac/new-image":{"title":"$:/config/shortcuts-not-mac/new-image","created":"20200602011529909","modified":"20200602011529924","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts-not-mac/new-journal":{"title":"$:/config/shortcuts-not-mac/new-journal","created":"20200602011521325","modified":"20200602011521342","type":"text/vnd.tiddlywiki"},"$:/config/shortcuts/bold":{"title":"$:/config/shortcuts/bold","created":"20200602011200184","modified":"20200602011200195","type":"text/vnd.tiddlywiki","text":"ctrl-B"},"$:/config/shortcuts/toggle-sidebar":{"title":"$:/config/shortcuts/toggle-sidebar","created":"20200602011309990","modified":"20200602011310003","type":"text/vnd.tiddlywiki"},"$:/plugins/linonetwo/itonnote/ControlPanel":{"title":"$:/plugins/linonetwo/itonnote/ControlPanel","type":"text/vnd.tiddlywiki","text":"!! 设置 Settings\n\n!!! 作为文件目录中根文件夹的笔记的标题 Title of the notes as the root folder in the file tree\n\n以这个标题作为标签的其它笔记相当于放入了根文件夹中：\n\nOther notes with this title as a tag are equivalent to being placed in the root folder:\n\n<$edit-text\n\ttiddler=\"$:/plugins/linonetwo/itonnote/Configs/SideBarFolderMenuBaseTitle\"\n\ttag=\"input\"\n\tdefault=\"Index\"\n\tplaceholder=\"\" />\n"},"导出文件 Export File":{"title":"导出文件 Export File","description":"导出文件 Export File","extension":"","tags":"$:/tags/Exporter","type":"text/vnd.tiddlywiki","text":"\\define renderContent()\n{{{ $(exportFilter)$ ||$:/core/templates/plain-text-tiddler}}}\n\\end\n<<renderContent>>"},"$:/plugins/linonetwo/itonnote/Help/TW-Locator基于标签生成的文件夹目录结构使用方法":{"title":"$:/plugins/linonetwo/itonnote/Help/TW-Locator基于标签生成的文件夹目录结构使用方法","created":"20200413072141568","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":"侧边栏的「目录结构」标签页里展示了[[通过标签系统自动生成|$:/plugins/linonetwo/itonnote/Help/在 TiddlyWiki 中使用虚拟文件夹]]的文件夹。\n\n若想修改根文件夹，请打开[[设置|$:/plugins/linonetwo/itonnote/ControlPanel]]。\n\n* 打了 A 标签，即相当于将文件存储在文件夹 A 中，并以 A 的内容作为文件夹的 Readme\n* 在任意Tiddler中使用「创建一个标签为此条目名称的新条目」按钮，可以创建以当前Tiddler为文件夹的文件\n* 点击 `>` 按钮（使它变成 `v`）可以展开文件夹\n* 直接点击文件夹的名字可以查看这个文件夹的 Readme\n* 分割线上方是当前目录，再往上是上级目录，点击分割线上方的上级目录名左侧的 `>` 按钮可以回到上级目录\n* 当处在 A 文件夹内时，点击分割线下方的 `+` 可以在当前文件夹里创建新文件（即创建打了 A 标签的新 Tiddler）\n* 点击 Filter by fields 可以展开分面搜索工具，点击分面搜索工具内的 `+` 可以增加筛选条件，点击 `x` 㐓减少筛选条件。\n\n---\n\nThe folder structure [[auto-generated by tag system|$:/plugins/linonetwo/itonnote/Help/在 TiddlyWiki 中使用虚拟文件夹]] is shown in the \"Directory structure\" tab in the sidebar.\n\nIf you want to modify the root folder, please open the [[Settings|$:/plugins/linonetwo/itonnote/ControlPanel]].\n\n* tagged with A, which is equivalent to storing the file in folder A and using the contents of A as the Readme of the folder\n* Use the \"Create a new tiddler with this tag name\" button in any Tiddler to create a file with the current Tiddler as the folder\n* Click the `>` button (to make it `v`) to expand the folder\n* Click directly on the name of a folder to see the Readme of that folder\n* Click the `>` button to the left of the parent directory name above the split line to go back to the parent directory.\n* When you are in the A folder, click `+` below the split line to create a new file in the current folder (i.e. create a new Tiddler with the A tag)\n* Click Filter by fields to expand the faceted search tool, click `+` inside the faceted search tool to increase the filtering criteria, click `x` can decrease the filtering criteria.\n"},"$:/plugins/linonetwo/itonnote/Help/在 TiddlyWiki 中使用虚拟文件夹":{"title":"$:/plugins/linonetwo/itonnote/Help/在 TiddlyWiki 中使用虚拟文件夹","created":"20200410054027122","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":"!!! Tag\n\nThe Tag structure can be thought of as a folder directory structure with soft links to form a graphical structure, since Tag relationships are inherently free, and two notes can be tagged to each other and parented to each other in the folder structure.\n\nUsing tw-locator, you can create a \"file directory\" tab in the sidebar, which shows the folder structure generated by the tag. The details are written in [[$:/plugins/bimlas/locator/README/macros]], and the plugin should have it pre-populated in [[$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu]], which can be used immediately or modified to override it.\n\nThen you can set the \"File Directory\" tab to be displayed by default in `$:/ControlPanel` -> \"Settings\" -> \"Default Sidebar Tab\", so that you can use TiddlyWiki as a folder system. And the plugin should already be pre-configured for this.\n\n!!! Slash\n\nTiddlyWiki comes with a way to create folders by using slashes in the header.\n\nThe various folders that come with the system can be seen via the sidebar under \"More\" -> \"Explore\".\n\nIf you use the NodeJS version of TiddlyWiki, these tiddlers will also be placed in the corresponding folders on the real file system.\n"},"$:/plugins/linonetwo/itonnote/Macros/OpenImageInGithub":{"title":"$:/plugins/linonetwo/itonnote/Macros/OpenImageInGithub","created":"20200412034056887","tags":"$:/tags/Macro","caption":"点击在新标签页打开Github大图","type":"text/vnd.tiddlywiki","text":"\\define view-big-image(source)\n<a href=\"https://raw.githubusercontent.com/linonetwo/wiki/master/Meme-of-LinOnetwo/tiddlers/$source$\" title=\"Click for a bigger version (opens in a separate tab)\" target=\"_blank\">\n <img src=\"https://raw.githubusercontent.com/linonetwo/wiki/master/Meme-of-LinOnetwo/tiddlers/$source$\"/>\n</a>\n\\end"},"$:/plugins/linonetwo/itonnote/Macros/TransclusionWithEditMe":{"title":"$:/plugins/linonetwo/itonnote/Macros/TransclusionWithEditMe","created":"20200408094804792","creator":"LinOnetwo","tags":"$:/tags/Macro 自改TW","caption":"带有「编辑此块」的引用transclusion宏","type":"text/vnd.tiddlywiki","text":"\\define reuse-pane(content)\n<style>\n.reuse-pane {\n\tposition: absolute;\n\tright: 10px;\n\twidth: auto;\n\tmax-width: 4px;\n\theight: 1.5em;\n\toverflow: hidden;\n\tborder: 10px solid transparent;\n\tborder-top: 0;\n\tbox-sizing: content-box;\n\ttransition: max-width 0.5s;\n}\n.reuse-pane:hover {\n  max-width: 80vw;\n}\n.reuse-pane-content {\n\tdisplay: inline-block;\n\tbackground-color: rgba(233, 233, 233, 0.9);\n\tborder-left: 4px solid rgba(0, 0, 0, 0.05);\n\tpadding: 0px 5px;\n\tpadding-bottom: 2px;\n}\n</style>\n<div class=\"reuse-pane\">\n  <small class=\"reuse-pane-content\">$content$</small>\n</div>\n\\end\n\n\\define reuse-tiddler(title)\n<$macrocall $name=\"reuse-pane\" content=\"\"\"\n查看引文：[[$title$]]\n\"\"\" />\n\n{{$title$}}\n\n\\end"},"$:/config/ChinesePluginLibrary/GitHub":{"title":"$:/config/ChinesePluginLibrary/GitHub","caption":"<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\"><$list filter=\"[<lang>search:title[zh]]\">太微中文社区插件源(~GitHub版)</$list><$list filter=\"[<lang>!search:title[zh]]\">TiddlyWiki Chinese CPL(~GitHub Host)</$list></$list>","created":"20211210064945704","creator":"Sttot","modified":"20211210070811047","modifier":"Sttot","tags":"$:/tags/PluginLibrary","type":"text/vnd.tiddlywiki","url":"https://tiddly-gittly.github.io/TiddlyWiki-CPL/library/index.html","text":"<!-- lang变量就是当前语言 -->\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n<$list filter=\"[<lang>search:title[zh]]\" variable=\"lang\">\n\n欢迎使用''【太微中文社区插件源】''！\n\n本插件源是由[[太微(TiddlyWiki)中文社区|https://github.com/tiddly-gittly]]维护的、致力于搜集网络上所有与 ~TiddlyWiki5 有关插件的、希望为中国以及全世界的太微用户提供一键安装、更新插件体验的公开插件源。\n\n如果还不了解该如何使用太微和本插件源，欢迎阅读[[中文社区共建的太微（TiddlyWiki）教程|https://tw-cn.netlify.app]]里插件相关的部分。如上提到的插件源和教程皆为开源项目，你可以在 [[GitHub|https://github.com/tiddly-gittly]] 中找到并参与贡献！如果乐意，可以通过QQ群等方式加入我们，详情请见如上提到的中文教程。\n\n要添加这个插件库到你的 Wiki 中，只需鼠标拖动这个链接到你的 Wiki 里即可：<$link to=<<currentTiddler>>>{{!!caption}}</$link>\n\n注意：本插件源版本为 ~GitHub Page 的版本，更新更快，但是可能需要科学上网手段。如果你在国内，而且不清楚什么是“科学上网”，请选用另一个经过 netlify.app 加速的[[版本|$:/config/ChinesePluginLibrary/Netlify]]，虽然更新有一定的延迟，但对国内用户更加友好。\n\n</$list>\n\n<$list filter=\"[<lang>!search:title[zh]]\" variable=\"lang\">\n\nWelcome to the ''[TiddlyWiki Chinese Community Plugin Source]''!\n\nThis plugin source is maintained by the [[TiddlyWiki Chinese Community]] and is dedicated to collecting all TiddlyWiki5 related plugins on the web, hoping to provide a one-click installation and update plugin experience for TiddlyWiki users in China and around the world.\n\nIf you don't know how to use TiddlyWiki and this source, you are welcome to read the plugins related section in the [[TiddlyWiki Tutorials for Chinese Communities|https://tw-cn.netlify.app]]. As mentioned above, both the plugin source and the tutorial are open source projects, you can find them in [[GitHub|https://github.com/tiddly-gittly]] and participate in contributing! If you like, you can join us through QQ groups and other means, see the Chinese tutorials mentioned above for details.\n\nTo add this plugin library to your Wiki, just drag this link with your mouse into your Wiki: <$link to=<<currentTiddler>>{{!!caption}}</$link>\n\nNote: The source version of this plugin is the ~GitHub Page version, which is faster to update, but may require scientific Internet access. If you are in China and are not sure what GFW is, please use another [[version|$:/config/ChinesePluginLibrary/Netlify]] that is accelerated by netlify.app, although there is a certain delay in updating, but it is more friendly to domestic users more friendly.\n\n</$list>\n</$list>"},"$:/config/ChinesePluginLibrary/Netlify":{"title":"$:/config/ChinesePluginLibrary/Netlify","caption":"<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\"><$list filter=\"[<lang>search:title[zh]]\">太微中文社区插件源(大陆加速版)</$list><$list filter=\"[<lang>!search:title[zh]]\">TiddlyWiki Chinese CPL(Netlify Host)</$list></$list>","created":"20211118102827947","creator":"Sttot","modified":"20211210070641055","modifier":"Sttot","tags":"$:/tags/PluginLibrary","type":"text/vnd.tiddlywiki","url":"https://tw-cpl.netlify.app/library/index.html","text":"<!-- lang变量就是当前语言 -->\n<$list filter=\"[[$:/language]get[text]removeprefix[$:/languages/]else[en-GB]]\" variable=\"lang\">\n<$list filter=\"[<lang>search:title[zh]]\" variable=\"lang\">\n\n欢迎使用''【太微中文社区插件源】''！\n\n本插件源是由[[太微(TiddlyWiki)中文社区|https://github.com/tiddly-gittly]]维护的、致力于搜集网络上所有与 ~TiddlyWiki5 有关插件的、希望为中国以及全世界的太微用户提供一键安装、更新插件体验的公开插件源。\n\n如果还不了解该如何使用太微和本插件源，欢迎阅读[[中文社区共建的太微（TiddlyWiki）教程|https://tw-cn.netlify.app]]里插件相关的部分。如上提到的插件源和教程皆为开源项目，你可以在 [[GitHub|https://github.com/tiddly-gittly]] 中找到并参与贡献！如果乐意，可以通过QQ群等方式加入我们，详情请见如上提到的中文教程。\n\n要添加这个插件库到你的 Wiki 中，只需鼠标拖动这个链接到你的 Wiki 里即可：<$link to=<<currentTiddler>>>{{!!caption}}</$link>\n\n注意：本插件源版本为经过 netlify.app 加速的版本，对国内用户更加友好，但是更新有一定的延迟。还提供另一版本，是直接使用 ~GitHub Page 服务器的版本，更新更快，但是可能需要科学上网手段。\n\n</$list>\n\n<$list filter=\"[<lang>!search:title[zh]]\" variable=\"lang\">\n\nWelcome to the ''[TiddlyWiki Chinese Community Plugin Source]''!\n\nThis plugin source is maintained by the [[TiddlyWiki Chinese Community]] and is dedicated to collecting all TiddlyWiki5 related plugins on the web, hoping to provide a one-click installation and update plugin experience for TiddlyWiki users in China and around the world.\n\nIf you don't know how to use TiddlyWiki and this source, you are welcome to read the plugins related section in the [[TiddlyWiki Tutorials for Chinese Communities|https://tw-cn.netlify.app]]. As mentioned above, both the plugin source and the tutorial are open source projects, you can find them in [[GitHub|https://github.com/tiddly-gittly]] and participate in contributing! If you like, you can join us through QQ groups and other means, see the Chinese tutorials mentioned above for details.\n\nTo add this plugin library to your Wiki, just drag this link with your mouse into your Wiki: <$link to=<<currentTiddler>>{{!!caption}}</$link>\n\nNote: The source version of this plugin is a version accelerated by netlify.app, which is more friendly to China mainland users, but there is a delay in updating. There is also another version that uses the GitHub Page server directly, which is faster to update, but may require technology to overturn the GFW.\n\n</$list>\n</$list>"},"$:/config/wikilabs/PluginLibraryWL/latest":{"title":"$:/config/wikilabs/PluginLibraryWL/latest","caption":"Wikilabs Library","tags":"$:/tags/PluginLibrary","type":"text/vnd.tiddlywiki","url":"https://wikilabs.github.io/editions/pluginlibraryWL/library/latest/index.html","text":"~WikiLabs plugin library latest version!\n"},"$:/config/KookmaPluginLibrary":{"title":"$:/config/KookmaPluginLibrary","caption":"Kookma Plugin Library","created":"20200306121057751","modified":"20200410154132754","tags":"$:/tags/PluginLibrary","type":"text/vnd.tiddlywiki","url":"https://kookma.github.io/TW-PluginLibrary/library/index.html","text":"Kookma plugin library is a set of plugins, themes, and scripts, to extend functionality and add new features to Tiddlywiki. For detail information visit the library at [[GitHub|https://github.com/kookma]]. It is recommended to backup your data before installing any plugin, theme, or script. \n\nTo use in other wikis, drag and drop this link to those wikis: [[Kookma Plugin Library|$:/config/KookmaPluginLibrary]]"},"$:/config/OfficialPluginLibrary":{"title":"$:/config/OfficialPluginLibrary","tags":"$:/tags/PluginLibrary","url":"https://tiddlywiki.com/library/v5.2.1/index.html","caption":"{{$:/language/OfficialPluginLibrary}}","text":"{{$:/language/OfficialPluginLibrary/Hint}}"},"$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu":{"title":"$:/plugins/linonetwo/itonnote/Sidebar/FolderMenu","caption":"文件目录","creator":"LinOnetwo","description":"文件夹系统目录结构","is-dropdown":"yes","tags":"$:/tags/SideBar $:/tags/MenuBar","type":"text/vnd.tiddlywiki","text":"<$scrollable fallthrough=\"none\" class=\"tc-popup-keep tc-menubar-dropdown-sidebar\">\n\n<$reveal type=\"nomatch\" state=\"$:/temp/focussedTiddler\" text={{$:/plugins/linonetwo/itonnote/Configs/SideBarFolderMenuBaseTitle}}>\n<$macrocall $name=\"locator-view\" baseTitle={{$:/temp/focussedTiddler}} />\n</$reveal>\n\n<$macrocall $name=\"locator-view\" baseTitle={{$:/plugins/linonetwo/itonnote/Configs/SideBarFolderMenuBaseTitle}} />\n\n[[使用帮助|$:/plugins/linonetwo/itonnote/Help/TW-Locator基于标签生成的文件夹目录结构使用方法]]\n</$scrollable>\n"},"$:/plugins/linonetwo/itonnote/Sidebar/Locator Fields":{"title":"$:/plugins/linonetwo/itonnote/Sidebar/Locator Fields","caption":"Fields","creator":"LinOnetwo","tags":"$:/tags/SideBar","type":"text/vnd.tiddlywiki","text":"<$vars searchTiddler=\" \">\n  <<locator-fields>>\n</$vars>"},"$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFacets":{"title":"$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFacets","caption":"Facets","created":"20200408140310432","creator":"LinOnetwo","tags":"$:/tags/SearchResults","type":"text/vnd.tiddlywiki","text":"<<locator-search>>"},"$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFields":{"title":"$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFields","caption":"Fields","created":"20200408140310432","creator":"LinOnetwo","tags":"$:/tags/SearchResults","type":"text/vnd.tiddlywiki","text":"<<locator-fields>>"},"$:/plugins/linonetwo/itonnote/Snippets/LocatorAboutCurrentTiddler":{"title":"$:/plugins/linonetwo/itonnote/Snippets/LocatorAboutCurrentTiddler","caption":"添加一个使用当前标题的 tw-Locator","created":"20200408133348115","creator":"LinOnetwo","tags":"[[$:/plugins/linonetwo/itonnote/Help/在 TiddlyWiki 中使用虚拟文件夹]] $:/tags/TextEditor/Snippet","type":"text/vnd.tiddlywiki","text":"<$macrocall $name=\"locator-view\" baseTitle=<<currentTiddler>> />"},"$:/plugins/linonetwo/itonnote/Snippets/OpenImageInGithub":{"title":"$:/plugins/linonetwo/itonnote/Snippets/OpenImageInGithub","caption":"图片：点击在新标签页打开大图","created":"20200412041713662","creator":"LinOnetwo","tags":"$:/plugins/linonetwo/itonnote/Macros/OpenImageInGithub $:/tags/TextEditor/Snippet","type":"text/vnd.tiddlywiki","text":"<<view-big-image xxx.jpg>>"},"$:/plugins/linonetwo/itonnote/Snippets/TransclusionWithEditMe":{"title":"$:/plugins/linonetwo/itonnote/Snippets/TransclusionWithEditMe","caption":"带「编辑此块」的引用Transclusion","created":"20200408132341855","creator":"LinOnetwo","tags":"$:/plugins/linonetwo/itonnote/Macros/TransclusionWithEditMe $:/tags/TextEditor/Snippet","type":"text/vnd.tiddlywiki","text":"<<reuse-tiddler \"title\">>"},"$:/plugins/linonetwo/itonnote/Startup/closeSidebarOnMobile.js":{"title":"$:/plugins/linonetwo/itonnote/Startup/closeSidebarOnMobile.js","text":"/*\\\ntitle: $:/themes/nico/notebook-mobile/js/notebookSidebarNav.js\ntype: application/javascript\nmodule-type: global\n\nCloses the notebook sidebar on mobile when navigating\n\n\\*/\n(function(){\n\n    /*jslint node: true, browser: true */\n    /*global $tw: false */\n    \"use strict\";\n\n    const isOnMobile = () => {\n      // TODO: use https://github.com/Jermolene/TiddlyWiki5/pull/6675 after next release\n      if(/Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent)){\n        // true for mobile device\n        return true\n      }\n      return false\n    };\n\n    const closeSidebar = () => {\n\t\t$tw.wiki.setText(\"$:/state/notebook-sidebar\", \"text\", undefined, \"no\");\n    };\n\n    const closeSidebarOnMobile = () => {\n\t\tif (isOnMobile()) {\n            console.log(\"closing sidebar\");\n\t\t\tcloseSidebar();\n\t\t};\n    };\n\n    const setup = () => {\n\t\t$tw.hooks.addHook(\"th-navigating\",function(event) {\n\t\t\tcloseSidebarOnMobile();\n\t\t\treturn event;\n\t\t});\n    };\n\n    setup();\n\n    exports.closeNotebookSidebar = closeSidebar;\n})();\n","type":"application/javascript","module-type":"global","creator":"NicolasPetton"},"$:/plugins/linonetwo/itonnote/Startup/electron-ipc-cat.js":{"title":"$:/plugins/linonetwo/itonnote/Startup/electron-ipc-cat.js","text":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nvar commonjsGlobal = typeof globalThis !== 'undefined' ? globalThis : typeof window !== 'undefined' ? window : typeof global !== 'undefined' ? global : typeof self !== 'undefined' ? self : {};\n\nfunction createCommonjsModule(fn, basedir, module) {\n  return module = {\n    path: basedir,\n    exports: {},\n    require: function (path, base) {\n      return commonjsRequire(path, base === undefined || base === null ? module.path : base);\n    }\n  }, fn(module, module.exports), module.exports;\n}\n\nfunction getAugmentedNamespace(n) {\n  if (n.__esModule) return n;\n  var a = Object.defineProperty({}, '__esModule', {\n    value: true\n  });\n  Object.keys(n).forEach(function (k) {\n    var d = Object.getOwnPropertyDescriptor(n, k);\n    Object.defineProperty(a, k, d.get ? d : {\n      enumerable: true,\n      get: function () {\n        return n[k];\n      }\n    });\n  });\n  return a;\n}\n\nfunction commonjsRequire() {\n  throw new Error('Dynamic requires are not currently supported by @rollup/plugin-commonjs');\n}\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\n/* global Reflect, Promise */\n\n\nvar extendStatics = function (d, b) {\n  extendStatics = Object.setPrototypeOf || {\n    __proto__: []\n  } instanceof Array && function (d, b) {\n    d.__proto__ = b;\n  } || function (d, b) {\n    for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p];\n  };\n\n  return extendStatics(d, b);\n};\n\nfunction __extends(d, b) {\n  if (typeof b !== \"function\" && b !== null) throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n  extendStatics(d, b);\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n}\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nfunction __generator(thisArg, body) {\n  var _ = {\n    label: 0,\n    sent: function () {\n      if (t[0] & 1) throw t[1];\n      return t[1];\n    },\n    trys: [],\n    ops: []\n  },\n      f,\n      y,\n      t,\n      g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n\n        case 7:\n          op = _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n\n            _.ops.push(op);\n\n            break;\n          }\n\n          if (t[2]) _.ops.pop();\n\n          _.trys.pop();\n\n          continue;\n      }\n\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n}\n\nfunction __values(o) {\n  var s = typeof Symbol === \"function\" && Symbol.iterator,\n      m = s && o[s],\n      i = 0;\n  if (m) return m.call(o);\n  if (o && typeof o.length === \"number\") return {\n    next: function () {\n      if (o && i >= o.length) o = void 0;\n      return {\n        value: o && o[i++],\n        done: !o\n      };\n    }\n  };\n  throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n}\n\nfunction __read(o, n) {\n  var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n  if (!m) return o;\n  var i = m.call(o),\n      r,\n      ar = [],\n      e;\n\n  try {\n    while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n  } catch (error) {\n    e = {\n      error: error\n    };\n  } finally {\n    try {\n      if (r && !r.done && (m = i[\"return\"])) m.call(i);\n    } finally {\n      if (e) throw e.error;\n    }\n  }\n\n  return ar;\n}\n\nfunction __spreadArray(to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n}\n\nfunction __await(v) {\n  return this instanceof __await ? (this.v = v, this) : new __await(v);\n}\n\nfunction __asyncGenerator(thisArg, _arguments, generator) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var g = generator.apply(thisArg, _arguments || []),\n      i,\n      q = [];\n  return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i;\n\n  function verb(n) {\n    if (g[n]) i[n] = function (v) {\n      return new Promise(function (a, b) {\n        q.push([n, v, a, b]) > 1 || resume(n, v);\n      });\n    };\n  }\n\n  function resume(n, v) {\n    try {\n      step(g[n](v));\n    } catch (e) {\n      settle(q[0][3], e);\n    }\n  }\n\n  function step(r) {\n    r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);\n  }\n\n  function fulfill(value) {\n    resume(\"next\", value);\n  }\n\n  function reject(value) {\n    resume(\"throw\", value);\n  }\n\n  function settle(f, v) {\n    if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]);\n  }\n}\n\nfunction __asyncValues(o) {\n  if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\n  var m = o[Symbol.asyncIterator],\n      i;\n  return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () {\n    return this;\n  }, i);\n\n  function verb(n) {\n    i[n] = o[n] && function (v) {\n      return new Promise(function (resolve, reject) {\n        v = o[n](v), settle(resolve, reject, v.done, v.value);\n      });\n    };\n  }\n\n  function settle(resolve, reject, d, v) {\n    Promise.resolve(v).then(function (v) {\n      resolve({\n        value: v,\n        done: d\n      });\n    }, reject);\n  }\n}\n\nfunction isFunction(value) {\n  return typeof value === 'function';\n}\n\nfunction createErrorClass(createImpl) {\n  var _super = function (instance) {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  var ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n\nvar UnsubscriptionError = createErrorClass(function (_super) {\n  return function UnsubscriptionErrorImpl(errors) {\n    _super(this);\n\n    this.message = errors ? errors.length + \" errors occurred during unsubscription:\\n\" + errors.map(function (err, i) {\n      return i + 1 + \") \" + err.toString();\n    }).join('\\n  ') : '';\n    this.name = 'UnsubscriptionError';\n    this.errors = errors;\n  };\n});\n\nfunction arrRemove(arr, item) {\n  if (arr) {\n    var index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n\nvar Subscription = function () {\n  function Subscription(initialTeardown) {\n    this.initialTeardown = initialTeardown;\n    this.closed = false;\n    this._parentage = null;\n    this._teardowns = null;\n  }\n\n  Subscription.prototype.unsubscribe = function () {\n    var e_1, _a, e_2, _b;\n\n    var errors;\n\n    if (!this.closed) {\n      this.closed = true;\n      var _parentage = this._parentage;\n\n      if (_parentage) {\n        this._parentage = null;\n\n        if (Array.isArray(_parentage)) {\n          try {\n            for (var _parentage_1 = __values(_parentage), _parentage_1_1 = _parentage_1.next(); !_parentage_1_1.done; _parentage_1_1 = _parentage_1.next()) {\n              var parent_1 = _parentage_1_1.value;\n              parent_1.remove(this);\n            }\n          } catch (e_1_1) {\n            e_1 = {\n              error: e_1_1\n            };\n          } finally {\n            try {\n              if (_parentage_1_1 && !_parentage_1_1.done && (_a = _parentage_1.return)) _a.call(_parentage_1);\n            } finally {\n              if (e_1) throw e_1.error;\n            }\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      var initialTeardown = this.initialTeardown;\n\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      var _teardowns = this._teardowns;\n\n      if (_teardowns) {\n        this._teardowns = null;\n\n        try {\n          for (var _teardowns_1 = __values(_teardowns), _teardowns_1_1 = _teardowns_1.next(); !_teardowns_1_1.done; _teardowns_1_1 = _teardowns_1.next()) {\n            var teardown_1 = _teardowns_1_1.value;\n\n            try {\n              execTeardown(teardown_1);\n            } catch (err) {\n              errors = errors !== null && errors !== void 0 ? errors : [];\n\n              if (err instanceof UnsubscriptionError) {\n                errors = __spreadArray(__spreadArray([], __read(errors)), __read(err.errors));\n              } else {\n                errors.push(err);\n              }\n            }\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (_teardowns_1_1 && !_teardowns_1_1.done && (_b = _teardowns_1.return)) _b.call(_teardowns_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  };\n\n  Subscription.prototype.add = function (teardown) {\n    var _a;\n\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n\n          teardown._addParent(this);\n        }\n\n        (this._teardowns = (_a = this._teardowns) !== null && _a !== void 0 ? _a : []).push(teardown);\n      }\n    }\n  };\n\n  Subscription.prototype._hasParent = function (parent) {\n    var _parentage = this._parentage;\n    return _parentage === parent || Array.isArray(_parentage) && _parentage.includes(parent);\n  };\n\n  Subscription.prototype._addParent = function (parent) {\n    var _parentage = this._parentage;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  };\n\n  Subscription.prototype._removeParent = function (parent) {\n    var _parentage = this._parentage;\n\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  };\n\n  Subscription.prototype.remove = function (teardown) {\n    var _teardowns = this._teardowns;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  };\n\n  Subscription.EMPTY = function () {\n    var empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  }();\n\n  return Subscription;\n}();\n\nvar EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nfunction isSubscription(value) {\n  return value instanceof Subscription || value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe);\n}\n\nfunction execTeardown(teardown) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n\nvar config = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false\n};\nvar timeoutProvider = {\n  setTimeout: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var delegate = timeoutProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setTimeout) || setTimeout).apply(void 0, __spreadArray([], __read(args)));\n  },\n  clearTimeout: function (handle) {\n    var delegate = timeoutProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearTimeout) || clearTimeout)(handle);\n  },\n  delegate: undefined\n};\n\nfunction reportUnhandledError(err) {\n  timeoutProvider.setTimeout(function () {\n    var onUnhandledError = config.onUnhandledError;\n\n    if (onUnhandledError) {\n      onUnhandledError(err);\n    } else {\n      throw err;\n    }\n  });\n}\n\nfunction noop() {}\n\nvar COMPLETE_NOTIFICATION = function () {\n  return createNotification('C', undefined, undefined);\n}();\n\nfunction errorNotification(error) {\n  return createNotification('E', undefined, error);\n}\n\nfunction nextNotification(value) {\n  return createNotification('N', value, undefined);\n}\n\nfunction createNotification(kind, value, error) {\n  return {\n    kind: kind,\n    value: value,\n    error: error\n  };\n}\n\nvar context = null;\n\nfunction errorContext(cb) {\n  if (config.useDeprecatedSynchronousErrorHandling) {\n    var isRoot = !context;\n\n    if (isRoot) {\n      context = {\n        errorThrown: false,\n        error: null\n      };\n    }\n\n    cb();\n\n    if (isRoot) {\n      var _a = context,\n          errorThrown = _a.errorThrown,\n          error = _a.error;\n      context = null;\n\n      if (errorThrown) {\n        throw error;\n      }\n    }\n  } else {\n    cb();\n  }\n}\n\nfunction captureError(err) {\n  if (config.useDeprecatedSynchronousErrorHandling && context) {\n    context.errorThrown = true;\n    context.error = err;\n  }\n}\n\nvar Subscriber = function (_super) {\n  __extends(Subscriber, _super);\n\n  function Subscriber(destination) {\n    var _this = _super.call(this) || this;\n\n    _this.isStopped = false;\n\n    if (destination) {\n      _this.destination = destination;\n\n      if (isSubscription(destination)) {\n        destination.add(_this);\n      }\n    } else {\n      _this.destination = EMPTY_OBSERVER;\n    }\n\n    return _this;\n  }\n\n  Subscriber.create = function (next, error, complete) {\n    return new SafeSubscriber(next, error, complete);\n  };\n\n  Subscriber.prototype.next = function (value) {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value);\n    }\n  };\n\n  Subscriber.prototype.error = function (err) {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n\n      this._error(err);\n    }\n  };\n\n  Subscriber.prototype.complete = function () {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n\n      this._complete();\n    }\n  };\n\n  Subscriber.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      this.isStopped = true;\n\n      _super.prototype.unsubscribe.call(this);\n\n      this.destination = null;\n    }\n  };\n\n  Subscriber.prototype._next = function (value) {\n    this.destination.next(value);\n  };\n\n  Subscriber.prototype._error = function (err) {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  Subscriber.prototype._complete = function () {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  };\n\n  return Subscriber;\n}(Subscription);\n\nvar SafeSubscriber = function (_super) {\n  __extends(SafeSubscriber, _super);\n\n  function SafeSubscriber(observerOrNext, error, complete) {\n    var _this = _super.call(this) || this;\n\n    var next;\n\n    if (isFunction(observerOrNext)) {\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      next = observerOrNext.next, error = observerOrNext.error, complete = observerOrNext.complete;\n      var context_1;\n\n      if (_this && config.useDeprecatedNextContext) {\n        context_1 = Object.create(observerOrNext);\n\n        context_1.unsubscribe = function () {\n          return _this.unsubscribe();\n        };\n      } else {\n        context_1 = observerOrNext;\n      }\n\n      next = next === null || next === void 0 ? void 0 : next.bind(context_1);\n      error = error === null || error === void 0 ? void 0 : error.bind(context_1);\n      complete = complete === null || complete === void 0 ? void 0 : complete.bind(context_1);\n    }\n\n    _this.destination = {\n      next: next ? wrapForErrorHandling(next) : noop,\n      error: wrapForErrorHandling(error !== null && error !== void 0 ? error : defaultErrorHandler),\n      complete: complete ? wrapForErrorHandling(complete) : noop\n    };\n    return _this;\n  }\n\n  return SafeSubscriber;\n}(Subscriber);\n\nfunction wrapForErrorHandling(handler, instance) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    try {\n      handler.apply(void 0, __spreadArray([], __read(args)));\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        captureError(err);\n      } else {\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n\nfunction defaultErrorHandler(err) {\n  throw err;\n}\n\nfunction handleStoppedNotification(notification, subscriber) {\n  var onStoppedNotification = config.onStoppedNotification;\n  onStoppedNotification && timeoutProvider.setTimeout(function () {\n    return onStoppedNotification(notification, subscriber);\n  });\n}\n\nvar EMPTY_OBSERVER = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop\n};\n\nvar observable = function () {\n  return typeof Symbol === 'function' && Symbol.observable || '@@observable';\n}();\n\nfunction identity(x) {\n  return x;\n}\n\nfunction pipe() {\n  var fns = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    fns[_i] = arguments[_i];\n  }\n\n  return pipeFromArray(fns);\n}\n\nfunction pipeFromArray(fns) {\n  if (fns.length === 0) {\n    return identity;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input) {\n    return fns.reduce(function (prev, fn) {\n      return fn(prev);\n    }, input);\n  };\n}\n\nvar Observable = function () {\n  function Observable(subscribe) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  Observable.prototype.lift = function (operator) {\n    var observable = new Observable();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  };\n\n  Observable.prototype.subscribe = function (observerOrNext, error, complete) {\n    var _this = this;\n\n    var subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n    errorContext(function () {\n      var _a = _this,\n          operator = _a.operator,\n          source = _a.source;\n      subscriber.add(operator ? operator.call(subscriber, source) : source ? _this._subscribe(subscriber) : _this._trySubscribe(subscriber));\n    });\n    return subscriber;\n  };\n\n  Observable.prototype._trySubscribe = function (sink) {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.error(err);\n    }\n  };\n\n  Observable.prototype.forEach = function (next, promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var subscription;\n      subscription = _this.subscribe(function (value) {\n        try {\n          next(value);\n        } catch (err) {\n          reject(err);\n          subscription === null || subscription === void 0 ? void 0 : subscription.unsubscribe();\n        }\n      }, reject, resolve);\n    });\n  };\n\n  Observable.prototype._subscribe = function (subscriber) {\n    var _a;\n\n    return (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber);\n  };\n\n  Observable.prototype[observable] = function () {\n    return this;\n  };\n\n  Observable.prototype.pipe = function () {\n    var operations = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      operations[_i] = arguments[_i];\n    }\n\n    return pipeFromArray(operations)(this);\n  };\n\n  Observable.prototype.toPromise = function (promiseCtor) {\n    var _this = this;\n\n    promiseCtor = getPromiseCtor(promiseCtor);\n    return new promiseCtor(function (resolve, reject) {\n      var value;\n\n      _this.subscribe(function (x) {\n        return value = x;\n      }, function (err) {\n        return reject(err);\n      }, function () {\n        return resolve(value);\n      });\n    });\n  };\n\n  Observable.create = function (subscribe) {\n    return new Observable(subscribe);\n  };\n\n  return Observable;\n}();\n\nfunction getPromiseCtor(promiseCtor) {\n  var _a;\n\n  return (_a = promiseCtor !== null && promiseCtor !== void 0 ? promiseCtor : config.Promise) !== null && _a !== void 0 ? _a : Promise;\n}\n\nfunction isObserver(value) {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber(value) {\n  return value && value instanceof Subscriber || isObserver(value) && isSubscription(value);\n}\n\nfunction hasLift(source) {\n  return isFunction(source === null || source === void 0 ? void 0 : source.lift);\n}\n\nfunction operate(init) {\n  return function (source) {\n    if (hasLift(source)) {\n      return source.lift(function (liftedSource) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n\nvar OperatorSubscriber = function (_super) {\n  __extends(OperatorSubscriber, _super);\n\n  function OperatorSubscriber(destination, onNext, onComplete, onError, onFinalize) {\n    var _this = _super.call(this, destination) || this;\n\n    _this.onFinalize = onFinalize;\n    _this._next = onNext ? function (value) {\n      try {\n        onNext(value);\n      } catch (err) {\n        destination.error(err);\n      }\n    } : _super.prototype._next;\n    _this._error = onError ? function (err) {\n      try {\n        onError(err);\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._error;\n    _this._complete = onComplete ? function () {\n      try {\n        onComplete();\n      } catch (err) {\n        destination.error(err);\n      } finally {\n        this.unsubscribe();\n      }\n    } : _super.prototype._complete;\n    return _this;\n  }\n\n  OperatorSubscriber.prototype.unsubscribe = function () {\n    var _a;\n\n    var closed = this.closed;\n\n    _super.prototype.unsubscribe.call(this);\n\n    !closed && ((_a = this.onFinalize) === null || _a === void 0 ? void 0 : _a.call(this));\n  };\n\n  return OperatorSubscriber;\n}(Subscriber);\n\nfunction refCount() {\n  return operate(function (source, subscriber) {\n    var connection = null;\n    source._refCount++;\n    var refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, function () {\n      if (!source || source._refCount <= 0 || 0 < --source._refCount) {\n        connection = null;\n        return;\n      }\n\n      var sharedConnection = source._connection;\n      var conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = source.connect();\n    }\n  });\n}\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(source, subjectFactory) {\n    var _this = _super.call(this) || this;\n\n    _this.source = source;\n    _this.subjectFactory = subjectFactory;\n    _this._subject = null;\n    _this._refCount = 0;\n    _this._connection = null;\n\n    if (hasLift(source)) {\n      _this.lift = source.lift;\n    }\n\n    return _this;\n  }\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype._teardown = function () {\n    this._refCount = 0;\n    var _connection = this._connection;\n    this._subject = this._connection = null;\n    _connection === null || _connection === void 0 ? void 0 : _connection.unsubscribe();\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var _this = this;\n\n    var connection = this._connection;\n\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      var subject_1 = this.getSubject();\n      connection.add(this.source.subscribe(new OperatorSubscriber(subject_1, undefined, function () {\n        _this._teardown();\n\n        subject_1.complete();\n      }, function (err) {\n        _this._teardown();\n\n        subject_1.error(err);\n      }, function () {\n        return _this._teardown();\n      })));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable);\n\nvar performanceTimestampProvider = {\n  now: function () {\n    return (performanceTimestampProvider.delegate || performance).now();\n  },\n  delegate: undefined\n};\nvar animationFrameProvider = {\n  schedule: function (callback) {\n    var request = requestAnimationFrame;\n    var cancel = cancelAnimationFrame;\n    var delegate = animationFrameProvider.delegate;\n\n    if (delegate) {\n      request = delegate.requestAnimationFrame;\n      cancel = delegate.cancelAnimationFrame;\n    }\n\n    var handle = request(function (timestamp) {\n      cancel = undefined;\n      callback(timestamp);\n    });\n    return new Subscription(function () {\n      return cancel === null || cancel === void 0 ? void 0 : cancel(handle);\n    });\n  },\n  requestAnimationFrame: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var delegate = animationFrameProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.requestAnimationFrame) || requestAnimationFrame).apply(void 0, __spreadArray([], __read(args)));\n  },\n  cancelAnimationFrame: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var delegate = animationFrameProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.cancelAnimationFrame) || cancelAnimationFrame).apply(void 0, __spreadArray([], __read(args)));\n  },\n  delegate: undefined\n};\n\nfunction animationFrames(timestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\nfunction animationFramesFactory(timestampProvider) {\n  var schedule = animationFrameProvider.schedule;\n  return new Observable(function (subscriber) {\n    var subscription = new Subscription();\n    var provider = timestampProvider || performanceTimestampProvider;\n    var start = provider.now();\n\n    var run = function (timestamp) {\n      var now = provider.now();\n      subscriber.next({\n        timestamp: timestampProvider ? now : timestamp,\n        elapsed: now - start\n      });\n\n      if (!subscriber.closed) {\n        subscription.add(schedule(run));\n      }\n    };\n\n    subscription.add(schedule(run));\n    return subscription;\n  });\n}\n\nvar DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\nvar ObjectUnsubscribedError = createErrorClass(function (_super) {\n  return function ObjectUnsubscribedErrorImpl() {\n    _super(this);\n\n    this.name = 'ObjectUnsubscribedError';\n    this.message = 'object unsubscribed';\n  };\n});\n\nvar Subject = function (_super) {\n  __extends(Subject, _super);\n\n  function Subject() {\n    var _this = _super.call(this) || this;\n\n    _this.closed = false;\n    _this.observers = [];\n    _this.isStopped = false;\n    _this.hasError = false;\n    _this.thrownError = null;\n    return _this;\n  }\n\n  Subject.prototype.lift = function (operator) {\n    var subject = new AnonymousSubject(this, this);\n    subject.operator = operator;\n    return subject;\n  };\n\n  Subject.prototype._throwIfClosed = function () {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  };\n\n  Subject.prototype.next = function (value) {\n    var _this = this;\n\n    errorContext(function () {\n      var e_1, _a;\n\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        var copy = _this.observers.slice();\n\n        try {\n          for (var copy_1 = __values(copy), copy_1_1 = copy_1.next(); !copy_1_1.done; copy_1_1 = copy_1.next()) {\n            var observer = copy_1_1.value;\n            observer.next(value);\n          }\n        } catch (e_1_1) {\n          e_1 = {\n            error: e_1_1\n          };\n        } finally {\n          try {\n            if (copy_1_1 && !copy_1_1.done && (_a = copy_1.return)) _a.call(copy_1);\n          } finally {\n            if (e_1) throw e_1.error;\n          }\n        }\n      }\n    });\n  };\n\n  Subject.prototype.error = function (err) {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.hasError = _this.isStopped = true;\n        _this.thrownError = err;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().error(err);\n        }\n      }\n    });\n  };\n\n  Subject.prototype.complete = function () {\n    var _this = this;\n\n    errorContext(function () {\n      _this._throwIfClosed();\n\n      if (!_this.isStopped) {\n        _this.isStopped = true;\n        var observers = _this.observers;\n\n        while (observers.length) {\n          observers.shift().complete();\n        }\n      }\n    });\n  };\n\n  Subject.prototype.unsubscribe = function () {\n    this.isStopped = this.closed = true;\n    this.observers = null;\n  };\n\n  Object.defineProperty(Subject.prototype, \"observed\", {\n    get: function () {\n      var _a;\n\n      return ((_a = this.observers) === null || _a === void 0 ? void 0 : _a.length) > 0;\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  Subject.prototype._trySubscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    return _super.prototype._trySubscribe.call(this, subscriber);\n  };\n\n  Subject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return this._innerSubscribe(subscriber);\n  };\n\n  Subject.prototype._innerSubscribe = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        isStopped = _a.isStopped,\n        observers = _a.observers;\n\n    return hasError || isStopped ? EMPTY_SUBSCRIPTION : (observers.push(subscriber), new Subscription(function () {\n      return arrRemove(observers, subscriber);\n    }));\n  };\n\n  Subject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  };\n\n  Subject.prototype.asObservable = function () {\n    var observable = new Observable();\n    observable.source = this;\n    return observable;\n  };\n\n  Subject.create = function (destination, source) {\n    return new AnonymousSubject(destination, source);\n  };\n\n  return Subject;\n}(Observable);\n\nvar AnonymousSubject = function (_super) {\n  __extends(AnonymousSubject, _super);\n\n  function AnonymousSubject(destination, source) {\n    var _this = _super.call(this) || this;\n\n    _this.destination = destination;\n    _this.source = source;\n    return _this;\n  }\n\n  AnonymousSubject.prototype.next = function (value) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.next) === null || _b === void 0 ? void 0 : _b.call(_a, value);\n  };\n\n  AnonymousSubject.prototype.error = function (err) {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.error) === null || _b === void 0 ? void 0 : _b.call(_a, err);\n  };\n\n  AnonymousSubject.prototype.complete = function () {\n    var _a, _b;\n\n    (_b = (_a = this.destination) === null || _a === void 0 ? void 0 : _a.complete) === null || _b === void 0 ? void 0 : _b.call(_a);\n  };\n\n  AnonymousSubject.prototype._subscribe = function (subscriber) {\n    var _a, _b;\n\n    return (_b = (_a = this.source) === null || _a === void 0 ? void 0 : _a.subscribe(subscriber)) !== null && _b !== void 0 ? _b : EMPTY_SUBSCRIPTION;\n  };\n\n  return AnonymousSubject;\n}(Subject);\n\nvar BehaviorSubject = function (_super) {\n  __extends(BehaviorSubject, _super);\n\n  function BehaviorSubject(_value) {\n    var _this = _super.call(this) || this;\n\n    _this._value = _value;\n    return _this;\n  }\n\n  Object.defineProperty(BehaviorSubject.prototype, \"value\", {\n    get: function () {\n      return this.getValue();\n    },\n    enumerable: false,\n    configurable: true\n  });\n\n  BehaviorSubject.prototype._subscribe = function (subscriber) {\n    var subscription = _super.prototype._subscribe.call(this, subscriber);\n\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  };\n\n  BehaviorSubject.prototype.getValue = function () {\n    var _a = this,\n        hasError = _a.hasError,\n        thrownError = _a.thrownError,\n        _value = _a._value;\n\n    if (hasError) {\n      throw thrownError;\n    }\n\n    this._throwIfClosed();\n\n    return _value;\n  };\n\n  BehaviorSubject.prototype.next = function (value) {\n    _super.prototype.next.call(this, this._value = value);\n  };\n\n  return BehaviorSubject;\n}(Subject);\n\nvar dateTimestampProvider = {\n  now: function () {\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined\n};\n\nvar ReplaySubject = function (_super) {\n  __extends(ReplaySubject, _super);\n\n  function ReplaySubject(_bufferSize, _windowTime, _timestampProvider) {\n    if (_bufferSize === void 0) {\n      _bufferSize = Infinity;\n    }\n\n    if (_windowTime === void 0) {\n      _windowTime = Infinity;\n    }\n\n    if (_timestampProvider === void 0) {\n      _timestampProvider = dateTimestampProvider;\n    }\n\n    var _this = _super.call(this) || this;\n\n    _this._bufferSize = _bufferSize;\n    _this._windowTime = _windowTime;\n    _this._timestampProvider = _timestampProvider;\n    _this._buffer = [];\n    _this._infiniteTimeWindow = true;\n    _this._infiniteTimeWindow = _windowTime === Infinity;\n    _this._bufferSize = Math.max(1, _bufferSize);\n    _this._windowTime = Math.max(1, _windowTime);\n    return _this;\n  }\n\n  ReplaySubject.prototype.next = function (value) {\n    var _a = this,\n        isStopped = _a.isStopped,\n        _buffer = _a._buffer,\n        _infiniteTimeWindow = _a._infiniteTimeWindow,\n        _timestampProvider = _a._timestampProvider,\n        _windowTime = _a._windowTime;\n\n    if (!isStopped) {\n      _buffer.push(value);\n\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n\n    this._trimBuffer();\n\n    _super.prototype.next.call(this, value);\n  };\n\n  ReplaySubject.prototype._subscribe = function (subscriber) {\n    this._throwIfClosed();\n\n    this._trimBuffer();\n\n    var subscription = this._innerSubscribe(subscriber);\n\n    var _a = this,\n        _infiniteTimeWindow = _a._infiniteTimeWindow,\n        _buffer = _a._buffer;\n\n    var copy = _buffer.slice();\n\n    for (var i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i]);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  };\n\n  ReplaySubject.prototype._trimBuffer = function () {\n    var _a = this,\n        _bufferSize = _a._bufferSize,\n        _timestampProvider = _a._timestampProvider,\n        _buffer = _a._buffer,\n        _infiniteTimeWindow = _a._infiniteTimeWindow;\n\n    var adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    if (!_infiniteTimeWindow) {\n      var now = _timestampProvider.now();\n\n      var last = 0;\n\n      for (var i = 1; i < _buffer.length && _buffer[i] <= now; i += 2) {\n        last = i;\n      }\n\n      last && _buffer.splice(0, last + 1);\n    }\n  };\n\n  return ReplaySubject;\n}(Subject);\n\nvar AsyncSubject = function (_super) {\n  __extends(AsyncSubject, _super);\n\n  function AsyncSubject() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._value = null;\n    _this._hasValue = false;\n    _this._isComplete = false;\n    return _this;\n  }\n\n  AsyncSubject.prototype._checkFinalizedStatuses = function (subscriber) {\n    var _a = this,\n        hasError = _a.hasError,\n        _hasValue = _a._hasValue,\n        _value = _a._value,\n        thrownError = _a.thrownError,\n        isStopped = _a.isStopped,\n        _isComplete = _a._isComplete;\n\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped || _isComplete) {\n      _hasValue && subscriber.next(_value);\n      subscriber.complete();\n    }\n  };\n\n  AsyncSubject.prototype.next = function (value) {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  };\n\n  AsyncSubject.prototype.complete = function () {\n    var _a = this,\n        _hasValue = _a._hasValue,\n        _value = _a._value,\n        _isComplete = _a._isComplete;\n\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && _super.prototype.next.call(this, _value);\n\n      _super.prototype.complete.call(this);\n    }\n  };\n\n  return AsyncSubject;\n}(Subject);\n\nvar Action = function (_super) {\n  __extends(Action, _super);\n\n  function Action(scheduler, work) {\n    return _super.call(this) || this;\n  }\n\n  Action.prototype.schedule = function (state, delay) {\n    return this;\n  };\n\n  return Action;\n}(Subscription);\n\nvar intervalProvider = {\n  setInterval: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var delegate = intervalProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setInterval) || setInterval).apply(void 0, __spreadArray([], __read(args)));\n  },\n  clearInterval: function (handle) {\n    var delegate = intervalProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearInterval) || clearInterval)(handle);\n  },\n  delegate: undefined\n};\n\nvar AsyncAction = function (_super) {\n  __extends(AsyncAction, _super);\n\n  function AsyncAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.pending = false;\n    return _this;\n  }\n\n  AsyncAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (this.closed) {\n      return this;\n    }\n\n    this.state = state;\n    var id = this.id;\n    var scheduler = this.scheduler;\n\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    this.pending = true;\n    this.delay = delay;\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n    return this;\n  };\n\n  AsyncAction.prototype.requestAsyncId = function (scheduler, _id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  };\n\n  AsyncAction.prototype.recycleAsyncId = function (_scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n\n    intervalProvider.clearInterval(id);\n    return undefined;\n  };\n\n  AsyncAction.prototype.execute = function (state, delay) {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n\n    var error = this._execute(state, delay);\n\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  };\n\n  AsyncAction.prototype._execute = function (state, _delay) {\n    var errored = false;\n    var errorValue;\n\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = !!e && e || new Error(e);\n    }\n\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  };\n\n  AsyncAction.prototype.unsubscribe = function () {\n    if (!this.closed) {\n      var _a = this,\n          id = _a.id,\n          scheduler = _a.scheduler;\n\n      var actions = scheduler.actions;\n      this.work = this.state = this.scheduler = null;\n      this.pending = false;\n      arrRemove(actions, this);\n\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null;\n\n      _super.prototype.unsubscribe.call(this);\n    }\n  };\n\n  return AsyncAction;\n}(Action);\n\nvar nextHandle = 1;\nvar resolved;\nvar activeHandles = {};\n\nfunction findAndClearHandle(handle) {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n\n  return false;\n}\n\nvar Immediate = {\n  setImmediate: function (cb) {\n    var handle = nextHandle++;\n    activeHandles[handle] = true;\n\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n\n    resolved.then(function () {\n      return findAndClearHandle(handle) && cb();\n    });\n    return handle;\n  },\n  clearImmediate: function (handle) {\n    findAndClearHandle(handle);\n  }\n};\nvar setImmediate = Immediate.setImmediate,\n    clearImmediate = Immediate.clearImmediate;\nvar immediateProvider = {\n  setImmediate: function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var delegate = immediateProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.setImmediate) || setImmediate).apply(void 0, __spreadArray([], __read(args)));\n  },\n  clearImmediate: function (handle) {\n    var delegate = immediateProvider.delegate;\n    return ((delegate === null || delegate === void 0 ? void 0 : delegate.clearImmediate) || clearImmediate)(handle);\n  },\n  delegate: undefined\n};\n\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (scheduler.actions.length === 0) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction);\n\nvar Scheduler = function () {\n  function Scheduler(schedulerActionCtor, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    this.schedulerActionCtor = schedulerActionCtor;\n    this.now = now;\n  }\n\n  Scheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return new this.schedulerActionCtor(this, work).schedule(state, delay);\n  };\n\n  Scheduler.now = dateTimestampProvider.now;\n  return Scheduler;\n}();\n\nvar AsyncScheduler = function (_super) {\n  __extends(AsyncScheduler, _super);\n\n  function AsyncScheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    var _this = _super.call(this, SchedulerAction, now) || this;\n\n    _this.actions = [];\n    _this._active = false;\n    _this._scheduled = undefined;\n    return _this;\n  }\n\n  AsyncScheduler.prototype.flush = function (action) {\n    var actions = this.actions;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    var error;\n    this._active = true;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (action = actions.shift());\n\n    this._active = false;\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsyncScheduler;\n}(Scheduler);\n\nvar AsapScheduler = function (_super) {\n  __extends(AsapScheduler, _super);\n\n  function AsapScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AsapScheduler.prototype.flush = function (action) {\n    this._active = true;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    var index = -1;\n    action = action || actions.shift();\n    var count = actions.length;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this._active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AsapScheduler;\n}(AsyncScheduler);\n\nvar asapScheduler = new AsapScheduler(AsapAction);\nvar asap = asapScheduler;\nvar asyncScheduler = new AsyncScheduler(AsyncAction);\nvar async = asyncScheduler;\n\nvar QueueAction = function (_super) {\n  __extends(QueueAction, _super);\n\n  function QueueAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  QueueAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay > 0) {\n      return _super.prototype.schedule.call(this, state, delay);\n    }\n\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  };\n\n  QueueAction.prototype.execute = function (state, delay) {\n    return delay > 0 || this.closed ? _super.prototype.execute.call(this, state, delay) : this._execute(state, delay);\n  };\n\n  QueueAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    return scheduler.flush(this);\n  };\n\n  return QueueAction;\n}(AsyncAction);\n\nvar QueueScheduler = function (_super) {\n  __extends(QueueScheduler, _super);\n\n  function QueueScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  return QueueScheduler;\n}(AsyncScheduler);\n\nvar queueScheduler = new QueueScheduler(QueueAction);\nvar queue = queueScheduler;\n\nvar AnimationFrameAction = function (_super) {\n  __extends(AnimationFrameAction, _super);\n\n  function AnimationFrameAction(scheduler, work) {\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    return _this;\n  }\n\n  AnimationFrameAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    }\n\n    scheduler.actions.push(this);\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(function () {\n      return scheduler.flush(undefined);\n    }));\n  };\n\n  AnimationFrameAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (delay != null && delay > 0 || delay == null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    }\n\n    if (scheduler.actions.length === 0) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n\n    return undefined;\n  };\n\n  return AnimationFrameAction;\n}(AsyncAction);\n\nvar AnimationFrameScheduler = function (_super) {\n  __extends(AnimationFrameScheduler, _super);\n\n  function AnimationFrameScheduler() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  AnimationFrameScheduler.prototype.flush = function (action) {\n    this._active = true;\n    this._scheduled = undefined;\n    var actions = this.actions;\n    var error;\n    var index = -1;\n    action = action || actions.shift();\n    var count = actions.length;\n\n    do {\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this._active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  return AnimationFrameScheduler;\n}(AsyncScheduler);\n\nvar animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\nvar animationFrame = animationFrameScheduler;\n\nvar VirtualTimeScheduler = function (_super) {\n  __extends(VirtualTimeScheduler, _super);\n\n  function VirtualTimeScheduler(schedulerActionCtor, maxFrames) {\n    if (schedulerActionCtor === void 0) {\n      schedulerActionCtor = VirtualAction;\n    }\n\n    if (maxFrames === void 0) {\n      maxFrames = Infinity;\n    }\n\n    var _this = _super.call(this, schedulerActionCtor, function () {\n      return _this.frame;\n    }) || this;\n\n    _this.maxFrames = maxFrames;\n    _this.frame = 0;\n    _this.index = -1;\n    return _this;\n  }\n\n  VirtualTimeScheduler.prototype.flush = function () {\n    var _a = this,\n        actions = _a.actions,\n        maxFrames = _a.maxFrames;\n\n    var error;\n    var action;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if (error = action.execute(action.state, action.delay)) {\n        break;\n      }\n    }\n\n    if (error) {\n      while (action = actions.shift()) {\n        action.unsubscribe();\n      }\n\n      throw error;\n    }\n  };\n\n  VirtualTimeScheduler.frameTimeFactor = 10;\n  return VirtualTimeScheduler;\n}(AsyncScheduler);\n\nvar VirtualAction = function (_super) {\n  __extends(VirtualAction, _super);\n\n  function VirtualAction(scheduler, work, index) {\n    if (index === void 0) {\n      index = scheduler.index += 1;\n    }\n\n    var _this = _super.call(this, scheduler, work) || this;\n\n    _this.scheduler = scheduler;\n    _this.work = work;\n    _this.index = index;\n    _this.active = true;\n    _this.index = scheduler.index = index;\n    return _this;\n  }\n\n  VirtualAction.prototype.schedule = function (state, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return _super.prototype.schedule.call(this, state, delay);\n      }\n\n      this.active = false;\n      var action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      return Subscription.EMPTY;\n    }\n  };\n\n  VirtualAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    this.delay = scheduler.frame + delay;\n    var actions = scheduler.actions;\n    actions.push(this);\n    actions.sort(VirtualAction.sortActions);\n    return true;\n  };\n\n  VirtualAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    return undefined;\n  };\n\n  VirtualAction.prototype._execute = function (state, delay) {\n    if (this.active === true) {\n      return _super.prototype._execute.call(this, state, delay);\n    }\n  };\n\n  VirtualAction.sortActions = function (a, b) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  };\n\n  return VirtualAction;\n}(AsyncAction);\n\nvar EMPTY = new Observable(function (subscriber) {\n  return subscriber.complete();\n});\n\nfunction empty(scheduler) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler) {\n  return new Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return subscriber.complete();\n    });\n  });\n}\n\nfunction scheduleArray(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var i = 0;\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        subscriber.complete();\n      } else {\n        subscriber.next(input[i++]);\n\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n\nvar isArrayLike = function (x) {\n  return x && typeof x.length === 'number' && typeof x !== 'function';\n};\n\nfunction isPromise(value) {\n  return isFunction(value === null || value === void 0 ? void 0 : value.then);\n}\n\nfunction scheduleObservable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      var observable$1 = input[observable]();\n      sub.add(observable$1.subscribe({\n        next: function (value) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.next(value);\n          }));\n        },\n        error: function (err) {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.error(err);\n          }));\n        },\n        complete: function () {\n          sub.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }\n      }));\n    }));\n    return sub;\n  });\n}\n\nfunction schedulePromise(input, scheduler) {\n  return new Observable(function (subscriber) {\n    return scheduler.schedule(function () {\n      return input.then(function (value) {\n        subscriber.add(scheduler.schedule(function () {\n          subscriber.next(value);\n          subscriber.add(scheduler.schedule(function () {\n            return subscriber.complete();\n          }));\n        }));\n      }, function (err) {\n        subscriber.add(scheduler.schedule(function () {\n          return subscriber.error(err);\n        }));\n      });\n    });\n  });\n}\n\nfunction getSymbolIterator() {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator';\n  }\n\n  return Symbol.iterator;\n}\n\nvar iterator = getSymbolIterator();\n\nfunction caughtSchedule(subscriber, scheduler, execute, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  var subscription = scheduler.schedule(function () {\n    try {\n      execute.call(this);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }, delay);\n  subscriber.add(subscription);\n  return subscription;\n}\n\nfunction scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator$1;\n    subscriber.add(scheduler.schedule(function () {\n      iterator$1 = input[iterator]();\n      caughtSchedule(subscriber, scheduler, function () {\n        var _a = iterator$1.next(),\n            value = _a.value,\n            done = _a.done;\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n          this.schedule();\n        }\n      });\n    }));\n    return function () {\n      return isFunction(iterator$1 === null || iterator$1 === void 0 ? void 0 : iterator$1.return) && iterator$1.return();\n    };\n  });\n}\n\nfunction scheduleAsyncIterable(input, scheduler) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n\n  return new Observable(function (subscriber) {\n    var sub = new Subscription();\n    sub.add(scheduler.schedule(function () {\n      var iterator = input[Symbol.asyncIterator]();\n      sub.add(scheduler.schedule(function () {\n        var _this = this;\n\n        iterator.next().then(function (result) {\n          if (result.done) {\n            subscriber.complete();\n          } else {\n            subscriber.next(result.value);\n\n            _this.schedule();\n          }\n        });\n      }));\n    }));\n    return sub;\n  });\n}\n\nfunction isInteropObservable(input) {\n  return isFunction(input[observable]);\n}\n\nfunction isIterable(input) {\n  return isFunction(input === null || input === void 0 ? void 0 : input[iterator]);\n}\n\nfunction isAsyncIterable(obj) {\n  return Symbol.asyncIterator && isFunction(obj === null || obj === void 0 ? void 0 : obj[Symbol.asyncIterator]);\n}\n\nfunction createInvalidObservableTypeError(input) {\n  return new TypeError(\"You provided \" + (input !== null && typeof input === 'object' ? 'an invalid object' : \"'\" + input + \"'\") + \" where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.\");\n}\n\nfunction readableStreamLikeToAsyncGenerator(readableStream) {\n  return __asyncGenerator(this, arguments, function readableStreamLikeToAsyncGenerator_1() {\n    var reader, _a, value, done;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          reader = readableStream.getReader();\n          _b.label = 1;\n\n        case 1:\n          _b.trys.push([1,, 9, 10]);\n\n          _b.label = 2;\n\n        case 2:\n          return [4, __await(reader.read())];\n\n        case 3:\n          _a = _b.sent(), value = _a.value, done = _a.done;\n          if (!done) return [3, 5];\n          return [4, __await(void 0)];\n\n        case 4:\n          return [2, _b.sent()];\n\n        case 5:\n          return [4, __await(value)];\n\n        case 6:\n          return [4, _b.sent()];\n\n        case 7:\n          _b.sent();\n\n          return [3, 2];\n\n        case 8:\n          return [3, 10];\n\n        case 9:\n          reader.releaseLock();\n          return [7];\n\n        case 10:\n          return [2];\n      }\n    });\n  });\n}\n\nfunction isReadableStreamLike(obj) {\n  return isFunction(obj === null || obj === void 0 ? void 0 : obj.getReader);\n}\n\nfunction scheduleReadableStreamLike(input, scheduler) {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n\nfunction scheduled(input, scheduler) {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\nfunction from(input, scheduler) {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n\nfunction innerFrom(input) {\n  if (input instanceof Observable) {\n    return input;\n  }\n\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\nfunction fromInteropObservable(obj) {\n  return new Observable(function (subscriber) {\n    var obs = obj[observable]();\n\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\nfunction fromArrayLike(array) {\n  return new Observable(function (subscriber) {\n    for (var i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n\n    subscriber.complete();\n  });\n}\n\nfunction fromPromise(promise) {\n  return new Observable(function (subscriber) {\n    promise.then(function (value) {\n      if (!subscriber.closed) {\n        subscriber.next(value);\n        subscriber.complete();\n      }\n    }, function (err) {\n      return subscriber.error(err);\n    }).then(null, reportUnhandledError);\n  });\n}\n\nfunction fromIterable(iterable) {\n  return new Observable(function (subscriber) {\n    var e_1, _a;\n\n    try {\n      for (var iterable_1 = __values(iterable), iterable_1_1 = iterable_1.next(); !iterable_1_1.done; iterable_1_1 = iterable_1.next()) {\n        var value = iterable_1_1.value;\n        subscriber.next(value);\n\n        if (subscriber.closed) {\n          return;\n        }\n      }\n    } catch (e_1_1) {\n      e_1 = {\n        error: e_1_1\n      };\n    } finally {\n      try {\n        if (iterable_1_1 && !iterable_1_1.done && (_a = iterable_1.return)) _a.call(iterable_1);\n      } finally {\n        if (e_1) throw e_1.error;\n      }\n    }\n\n    subscriber.complete();\n  });\n}\n\nfunction fromAsyncIterable(asyncIterable) {\n  return new Observable(function (subscriber) {\n    process(asyncIterable, subscriber).catch(function (err) {\n      return subscriber.error(err);\n    });\n  });\n}\n\nfunction fromReadableStreamLike(readableStream) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nfunction process(asyncIterable, subscriber) {\n  var asyncIterable_1, asyncIterable_1_1;\n\n  var e_2, _a;\n\n  return __awaiter(this, void 0, void 0, function () {\n    var value, e_2_1;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _b.trys.push([0, 5, 6, 11]);\n\n          asyncIterable_1 = __asyncValues(asyncIterable);\n          _b.label = 1;\n\n        case 1:\n          return [4, asyncIterable_1.next()];\n\n        case 2:\n          if (!(asyncIterable_1_1 = _b.sent(), !asyncIterable_1_1.done)) return [3, 4];\n          value = asyncIterable_1_1.value;\n          subscriber.next(value);\n\n          if (subscriber.closed) {\n            return [2];\n          }\n\n          _b.label = 3;\n\n        case 3:\n          return [3, 1];\n\n        case 4:\n          return [3, 11];\n\n        case 5:\n          e_2_1 = _b.sent();\n          e_2 = {\n            error: e_2_1\n          };\n          return [3, 11];\n\n        case 6:\n          _b.trys.push([6,, 9, 10]);\n\n          if (!(asyncIterable_1_1 && !asyncIterable_1_1.done && (_a = asyncIterable_1.return))) return [3, 8];\n          return [4, _a.call(asyncIterable_1)];\n\n        case 7:\n          _b.sent();\n\n          _b.label = 8;\n\n        case 8:\n          return [3, 10];\n\n        case 9:\n          if (e_2) throw e_2.error;\n          return [7];\n\n        case 10:\n          return [7];\n\n        case 11:\n          subscriber.complete();\n          return [2];\n      }\n    });\n  });\n}\n\nfunction internalFromArray(input, scheduler) {\n  return scheduler ? scheduleArray(input, scheduler) : fromArrayLike(input);\n}\n\nfunction isScheduler(value) {\n  return value && isFunction(value.schedule);\n}\n\nfunction last$1(arr) {\n  return arr[arr.length - 1];\n}\n\nfunction popResultSelector(args) {\n  return isFunction(last$1(args)) ? args.pop() : undefined;\n}\n\nfunction popScheduler(args) {\n  return isScheduler(last$1(args)) ? args.pop() : undefined;\n}\n\nfunction popNumber(args, defaultValue) {\n  return typeof last$1(args) === 'number' ? args.pop() : defaultValue;\n}\n\nfunction of() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  return scheduler ? scheduleArray(args, scheduler) : internalFromArray(args);\n}\n\nfunction throwError(errorOrErrorFactory, scheduler) {\n  var errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : function () {\n    return errorOrErrorFactory;\n  };\n\n  var init = function (subscriber) {\n    return subscriber.error(errorFactory());\n  };\n\n  return new Observable(scheduler ? function (subscriber) {\n    return scheduler.schedule(init, 0, subscriber);\n  } : init);\n}\n\nvar NotificationKind;\n\n(function (NotificationKind) {\n  NotificationKind[\"NEXT\"] = \"N\";\n  NotificationKind[\"ERROR\"] = \"E\";\n  NotificationKind[\"COMPLETE\"] = \"C\";\n})(NotificationKind || (NotificationKind = {}));\n\nvar Notification = function () {\n  function Notification(kind, value, error) {\n    this.kind = kind;\n    this.value = value;\n    this.error = error;\n    this.hasValue = kind === 'N';\n  }\n\n  Notification.prototype.observe = function (observer) {\n    return observeNotification(this, observer);\n  };\n\n  Notification.prototype.do = function (nextHandler, errorHandler, completeHandler) {\n    var _a = this,\n        kind = _a.kind,\n        value = _a.value,\n        error = _a.error;\n\n    return kind === 'N' ? nextHandler === null || nextHandler === void 0 ? void 0 : nextHandler(value) : kind === 'E' ? errorHandler === null || errorHandler === void 0 ? void 0 : errorHandler(error) : completeHandler === null || completeHandler === void 0 ? void 0 : completeHandler();\n  };\n\n  Notification.prototype.accept = function (nextOrObserver, error, complete) {\n    var _a;\n\n    return isFunction((_a = nextOrObserver) === null || _a === void 0 ? void 0 : _a.next) ? this.observe(nextOrObserver) : this.do(nextOrObserver, error, complete);\n  };\n\n  Notification.prototype.toObservable = function () {\n    var _a = this,\n        kind = _a.kind,\n        value = _a.value,\n        error = _a.error;\n\n    var result = kind === 'N' ? of(value) : kind === 'E' ? throwError(function () {\n      return error;\n    }) : kind === 'C' ? EMPTY : 0;\n\n    if (!result) {\n      throw new TypeError(\"Unexpected notification kind \" + kind);\n    }\n\n    return result;\n  };\n\n  Notification.createNext = function (value) {\n    return new Notification('N', value);\n  };\n\n  Notification.createError = function (err) {\n    return new Notification('E', undefined, err);\n  };\n\n  Notification.createComplete = function () {\n    return Notification.completeNotification;\n  };\n\n  Notification.completeNotification = new Notification('C');\n  return Notification;\n}();\n\nfunction observeNotification(notification, observer) {\n  var _a, _b, _c;\n\n  var _d = notification,\n      kind = _d.kind,\n      value = _d.value,\n      error = _d.error;\n\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n\n  kind === 'N' ? (_a = observer.next) === null || _a === void 0 ? void 0 : _a.call(observer, value) : kind === 'E' ? (_b = observer.error) === null || _b === void 0 ? void 0 : _b.call(observer, error) : (_c = observer.complete) === null || _c === void 0 ? void 0 : _c.call(observer);\n}\n\nfunction isObservable(obj) {\n  return !!obj && (obj instanceof Observable || isFunction(obj.lift) && isFunction(obj.subscribe));\n}\n\nvar EmptyError = createErrorClass(function (_super) {\n  return function EmptyErrorImpl() {\n    _super(this);\n\n    this.name = 'EmptyError';\n    this.message = 'no elements in sequence';\n  };\n});\n\nfunction lastValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var _hasValue = false;\n\n    var _value;\n\n    source.subscribe({\n      next: function (value) {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: function () {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      }\n    });\n  });\n}\n\nfunction firstValueFrom(source, config) {\n  var hasConfig = typeof config === 'object';\n  return new Promise(function (resolve, reject) {\n    var subscriber = new SafeSubscriber({\n      next: function (value) {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: function () {\n        if (hasConfig) {\n          resolve(config.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      }\n    });\n    source.subscribe(subscriber);\n  });\n}\n\nvar ArgumentOutOfRangeError = createErrorClass(function (_super) {\n  return function ArgumentOutOfRangeErrorImpl() {\n    _super(this);\n\n    this.name = 'ArgumentOutOfRangeError';\n    this.message = 'argument out of range';\n  };\n});\nvar NotFoundError = createErrorClass(function (_super) {\n  return function NotFoundErrorImpl(message) {\n    _super(this);\n\n    this.name = 'NotFoundError';\n    this.message = message;\n  };\n});\nvar SequenceError = createErrorClass(function (_super) {\n  return function SequenceErrorImpl(message) {\n    _super(this);\n\n    this.name = 'SequenceError';\n    this.message = message;\n  };\n});\n\nfunction isValidDate(value) {\n  return value instanceof Date && !isNaN(value);\n}\n\nvar TimeoutError = createErrorClass(function (_super) {\n  return function TimeoutErrorImpl(info) {\n    if (info === void 0) {\n      info = null;\n    }\n\n    _super(this);\n\n    this.message = 'Timeout has occurred';\n    this.name = 'TimeoutError';\n    this.info = info;\n  };\n});\n\nfunction timeout(config, schedulerArg) {\n  var _a = isValidDate(config) ? {\n    first: config\n  } : typeof config === 'number' ? {\n    each: config\n  } : config,\n      first = _a.first,\n      each = _a.each,\n      _b = _a.with,\n      _with = _b === void 0 ? timeoutErrorFactory : _b,\n      _c = _a.scheduler,\n      scheduler = _c === void 0 ? schedulerArg !== null && schedulerArg !== void 0 ? schedulerArg : asyncScheduler : _c,\n      _d = _a.meta,\n      meta = _d === void 0 ? null : _d;\n\n  if (first == null && each == null) {\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate(function (source, subscriber) {\n    var originalSourceSubscription;\n    var timerSubscription;\n    var lastValue = null;\n    var seen = 0;\n\n    var startTimer = function (delay) {\n      timerSubscription = caughtSchedule(subscriber, scheduler, function () {\n        originalSourceSubscription.unsubscribe();\n        innerFrom(_with({\n          meta: meta,\n          lastValue: lastValue,\n          seen: seen\n        })).subscribe(subscriber);\n      }, delay);\n    };\n\n    originalSourceSubscription = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n      seen++;\n      subscriber.next(lastValue = value);\n      each > 0 && startTimer(each);\n    }, undefined, undefined, function () {\n      if (!(timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.closed)) {\n        timerSubscription === null || timerSubscription === void 0 ? void 0 : timerSubscription.unsubscribe();\n      }\n\n      lastValue = null;\n    }));\n    startTimer(first != null ? typeof first === 'number' ? first : +first - scheduler.now() : each);\n  });\n}\n\nfunction timeoutErrorFactory(info) {\n  throw new TimeoutError(info);\n}\n\nfunction subscribeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return operate(function (source, subscriber) {\n    subscriber.add(scheduler.schedule(function () {\n      return source.subscribe(subscriber);\n    }, delay));\n  });\n}\n\nfunction map(project, thisArg) {\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      subscriber.next(project.call(thisArg, value, index++));\n    }));\n  });\n}\n\nvar isArray$2 = Array.isArray;\n\nfunction callOrApply(fn, args) {\n  return isArray$2(args) ? fn.apply(void 0, __spreadArray([], __read(args))) : fn(args);\n}\n\nfunction mapOneOrManyArgs(fn) {\n  return map(function (args) {\n    return callOrApply(fn, args);\n  });\n}\n\nfunction observeOn(scheduler, delay) {\n  if (delay === void 0) {\n    delay = 0;\n  }\n\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.next(value);\n      }, delay));\n    }, function () {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.complete();\n      }, delay));\n    }, function (err) {\n      return subscriber.add(scheduler.schedule(function () {\n        return subscriber.error(err);\n      }, delay));\n    }));\n  });\n}\n\nfunction bindCallbackInternals(isNodeStyle, callbackFunc, resultSelector, scheduler) {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      return function () {\n        var args = [];\n\n        for (var _i = 0; _i < arguments.length; _i++) {\n          args[_i] = arguments[_i];\n        }\n\n        return bindCallbackInternals(isNodeStyle, callbackFunc, scheduler).apply(this, args).pipe(mapOneOrManyArgs(resultSelector));\n      };\n    }\n  }\n\n  if (scheduler) {\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return bindCallbackInternals(isNodeStyle, callbackFunc).apply(this, args).pipe(subscribeOn(scheduler), observeOn(scheduler));\n    };\n  }\n\n  return function () {\n    var _this = this;\n\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var subject = new AsyncSubject();\n    var uninitialized = true;\n    return new Observable(function (subscriber) {\n      var subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        var isAsync_1 = false;\n        var isComplete_1 = false;\n        callbackFunc.apply(_this, __spreadArray(__spreadArray([], __read(args)), [function () {\n          var results = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            results[_i] = arguments[_i];\n          }\n\n          if (isNodeStyle) {\n            var err = results.shift();\n\n            if (err != null) {\n              subject.error(err);\n              return;\n            }\n          }\n\n          subject.next(1 < results.length ? results : results[0]);\n          isComplete_1 = true;\n\n          if (isAsync_1) {\n            subject.complete();\n          }\n        }]));\n\n        if (isComplete_1) {\n          subject.complete();\n        }\n\n        isAsync_1 = true;\n      }\n\n      return subs;\n    });\n  };\n}\n\nfunction bindCallback(callbackFunc, resultSelector, scheduler) {\n  return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);\n}\n\nfunction bindNodeCallback(callbackFunc, resultSelector, scheduler) {\n  return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);\n}\n\nvar isArray$1 = Array.isArray;\nvar getPrototypeOf = Object.getPrototypeOf,\n    objectProto = Object.prototype,\n    getKeys = Object.keys;\n\nfunction argsArgArrayOrObject(args) {\n  if (args.length === 1) {\n    var first_1 = args[0];\n\n    if (isArray$1(first_1)) {\n      return {\n        args: first_1,\n        keys: null\n      };\n    }\n\n    if (isPOJO(first_1)) {\n      var keys = getKeys(first_1);\n      return {\n        args: keys.map(function (key) {\n          return first_1[key];\n        }),\n        keys: keys\n      };\n    }\n  }\n\n  return {\n    args: args,\n    keys: null\n  };\n}\n\nfunction isPOJO(obj) {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n\nfunction createObject(keys, values) {\n  return keys.reduce(function (result, key, i) {\n    return result[key] = values[i], result;\n  }, {});\n}\n\nfunction combineLatest$1() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  var resultSelector = popResultSelector(args);\n\n  var _a = argsArgArrayOrObject(args),\n      observables = _a.args,\n      keys = _a.keys;\n\n  if (observables.length === 0) {\n    return from([], scheduler);\n  }\n\n  var result = new Observable(combineLatestInit(observables, scheduler, keys ? function (values) {\n    return createObject(keys, values);\n  } : identity));\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n\nfunction combineLatestInit(observables, scheduler, valueTransform) {\n  if (valueTransform === void 0) {\n    valueTransform = identity;\n  }\n\n  return function (subscriber) {\n    maybeSchedule(scheduler, function () {\n      var length = observables.length;\n      var values = new Array(length);\n      var active = length;\n      var remainingFirstValues = length;\n\n      var _loop_1 = function (i) {\n        maybeSchedule(scheduler, function () {\n          var source = from(observables[i], scheduler);\n          var hasFirstValue = false;\n          source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n            values[i] = value;\n\n            if (!hasFirstValue) {\n              hasFirstValue = true;\n              remainingFirstValues--;\n            }\n\n            if (!remainingFirstValues) {\n              subscriber.next(valueTransform(values.slice()));\n            }\n          }, function () {\n            if (! --active) {\n              subscriber.complete();\n            }\n          }));\n        }, subscriber);\n      };\n\n      for (var i = 0; i < length; i++) {\n        _loop_1(i);\n      }\n    }, subscriber);\n  };\n}\n\nfunction maybeSchedule(scheduler, execute, subscription) {\n  if (scheduler) {\n    subscription.add(scheduler.schedule(execute));\n  } else {\n    execute();\n  }\n}\n\nfunction mergeInternals(source, subscriber, project, concurrent, onBeforeNext, expand, innerSubScheduler, additionalTeardown) {\n  var buffer = [];\n  var active = 0;\n  var index = 0;\n  var isComplete = false;\n\n  var checkComplete = function () {\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  var outerNext = function (value) {\n    return active < concurrent ? doInnerSub(value) : buffer.push(value);\n  };\n\n  var doInnerSub = function (value) {\n    expand && subscriber.next(value);\n    active++;\n    var innerComplete = false;\n    innerFrom(project(value, index++)).subscribe(new OperatorSubscriber(subscriber, function (innerValue) {\n      onBeforeNext === null || onBeforeNext === void 0 ? void 0 : onBeforeNext(innerValue);\n\n      if (expand) {\n        outerNext(innerValue);\n      } else {\n        subscriber.next(innerValue);\n      }\n    }, function () {\n      innerComplete = true;\n    }, undefined, function () {\n      if (innerComplete) {\n        try {\n          active--;\n\n          var _loop_1 = function () {\n            var bufferedValue = buffer.shift();\n            innerSubScheduler ? subscriber.add(innerSubScheduler.schedule(function () {\n              return doInnerSub(bufferedValue);\n            })) : doInnerSub(bufferedValue);\n          };\n\n          while (buffer.length && active < concurrent) {\n            _loop_1();\n          }\n\n          checkComplete();\n        } catch (err) {\n          subscriber.error(err);\n        }\n      }\n    }));\n  };\n\n  source.subscribe(new OperatorSubscriber(subscriber, outerNext, function () {\n    isComplete = true;\n    checkComplete();\n  }));\n  return function () {\n    additionalTeardown === null || additionalTeardown === void 0 ? void 0 : additionalTeardown();\n  };\n}\n\nfunction mergeMap(project, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  if (isFunction(resultSelector)) {\n    return mergeMap(function (a, i) {\n      return map(function (b, ii) {\n        return resultSelector(a, b, i, ii);\n      })(innerFrom(project(a, i)));\n    }, concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent);\n  });\n}\n\nfunction mergeAll(concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  return mergeMap(identity, concurrent);\n}\n\nfunction concatAll() {\n  return mergeAll(1);\n}\n\nfunction concat$1() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  return concatAll()(internalFromArray(args, popScheduler(args)));\n}\n\nfunction defer(observableFactory) {\n  return new Observable(function (subscriber) {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n\nvar DEFAULT_CONFIG$1 = {\n  connector: function () {\n    return new Subject();\n  },\n  resetOnDisconnect: true\n};\n\nfunction connectable(source, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG$1;\n  }\n\n  var connection = null;\n  var connector = config.connector,\n      _a = config.resetOnDisconnect,\n      resetOnDisconnect = _a === void 0 ? true : _a;\n  var subject = connector();\n  var result = new Observable(function (subscriber) {\n    return subject.subscribe(subscriber);\n  });\n\n  result.connect = function () {\n    if (!connection || connection.closed) {\n      connection = defer(function () {\n        return source;\n      }).subscribe(subject);\n\n      if (resetOnDisconnect) {\n        connection.add(function () {\n          return subject = connector();\n        });\n      }\n    }\n\n    return connection;\n  };\n\n  return result;\n}\n\nfunction forkJoin() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n\n  var _a = argsArgArrayOrObject(args),\n      sources = _a.args,\n      keys = _a.keys;\n\n  var result = new Observable(function (subscriber) {\n    var length = sources.length;\n\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n\n    var values = new Array(length);\n    var remainingCompletions = length;\n    var remainingEmissions = length;\n\n    var _loop_1 = function (sourceIndex) {\n      var hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (!hasValue) {\n          hasValue = true;\n          remainingEmissions--;\n        }\n\n        values[sourceIndex] = value;\n      }, function () {\n        if (! --remainingCompletions || !hasValue) {\n          if (!remainingEmissions) {\n            subscriber.next(keys ? createObject(keys, values) : values);\n          }\n\n          subscriber.complete();\n        }\n      }));\n    };\n\n    for (var sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n\nvar nodeEventEmitterMethods = ['addListener', 'removeListener'];\nvar eventTargetMethods = ['addEventListener', 'removeEventListener'];\nvar jqueryMethods = ['on', 'off'];\n\nfunction fromEvent(target, eventName, options, resultSelector) {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n\n  if (resultSelector) {\n    return fromEvent(target, eventName, options).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  var _a = __read(isEventTarget(target) ? eventTargetMethods.map(function (methodName) {\n    return function (handler) {\n      return target[methodName](eventName, handler, options);\n    };\n  }) : isNodeStyleEventEmitter(target) ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName)) : isJQueryStyleEventEmitter(target) ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName)) : [], 2),\n      add = _a[0],\n      remove = _a[1];\n\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap(function (subTarget) {\n        return fromEvent(subTarget, eventName, options);\n      })(internalFromArray(target));\n    }\n  }\n\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable(function (subscriber) {\n    var handler = function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n      }\n\n      return subscriber.next(1 < args.length ? args : args[0]);\n    };\n\n    add(handler);\n    return function () {\n      return remove(handler);\n    };\n  });\n}\n\nfunction toCommonHandlerRegistry(target, eventName) {\n  return function (methodName) {\n    return function (handler) {\n      return target[methodName](eventName, handler);\n    };\n  };\n}\n\nfunction isNodeStyleEventEmitter(target) {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\nfunction isJQueryStyleEventEmitter(target) {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\nfunction isEventTarget(target) {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n\nfunction fromEventPattern(addHandler, removeHandler, resultSelector) {\n  if (resultSelector) {\n    return fromEventPattern(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  return new Observable(function (subscriber) {\n    var handler = function () {\n      var e = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        e[_i] = arguments[_i];\n      }\n\n      return subscriber.next(e.length === 1 ? e[0] : e);\n    };\n\n    var retValue = addHandler(handler);\n    return isFunction(removeHandler) ? function () {\n      return removeHandler(handler, retValue);\n    } : undefined;\n  });\n}\n\nfunction generate(initialStateOrOptions, condition, iterate, resultSelectorOrScheduler, scheduler) {\n  var _a, _b;\n\n  var resultSelector;\n  var initialState;\n\n  if (arguments.length === 1) {\n    _a = initialStateOrOptions, initialState = _a.initialState, condition = _a.condition, iterate = _a.iterate, _b = _a.resultSelector, resultSelector = _b === void 0 ? identity : _b, scheduler = _a.scheduler;\n  } else {\n    initialState = initialStateOrOptions;\n\n    if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n      resultSelector = identity;\n      scheduler = resultSelectorOrScheduler;\n    } else {\n      resultSelector = resultSelectorOrScheduler;\n    }\n  }\n\n  function gen() {\n    var state;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          state = initialState;\n          _a.label = 1;\n\n        case 1:\n          if (!(!condition || condition(state))) return [3, 4];\n          return [4, resultSelector(state)];\n\n        case 2:\n          _a.sent();\n\n          _a.label = 3;\n\n        case 3:\n          state = iterate(state);\n          return [3, 1];\n\n        case 4:\n          return [2];\n      }\n    });\n  }\n\n  return defer(scheduler ? function () {\n    return scheduleIterable(gen(), scheduler);\n  } : gen);\n}\n\nfunction iif(condition, trueResult, falseResult) {\n  return defer(function () {\n    return condition() ? trueResult : falseResult;\n  });\n}\n\nfunction timer(dueTime, intervalOrScheduler, scheduler) {\n  if (dueTime === void 0) {\n    dueTime = 0;\n  }\n\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  var intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable(function (subscriber) {\n    var due = isValidDate(dueTime) ? +dueTime - scheduler.now() : dueTime;\n\n    if (due < 0) {\n      due = 0;\n    }\n\n    var n = 0;\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          this.schedule(undefined, intervalDuration);\n        } else {\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n\nfunction interval(period, scheduler) {\n  if (period === void 0) {\n    period = 0;\n  }\n\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  if (period < 0) {\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}\n\nfunction merge$1() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  var concurrent = popNumber(args, Infinity);\n  var sources = args;\n  return !sources.length ? EMPTY : sources.length === 1 ? innerFrom(sources[0]) : mergeAll(concurrent)(internalFromArray(sources, scheduler));\n}\n\nvar NEVER = new Observable(noop);\n\nfunction never() {\n  return NEVER;\n}\n\nvar isArray = Array.isArray;\n\nfunction argsOrArgArray(args) {\n  return args.length === 1 && isArray(args[0]) ? args[0] : args;\n}\n\nfunction onErrorResumeNext$1() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  var nextSources = argsOrArgArray(sources);\n  return operate(function (source, subscriber) {\n    var remaining = __spreadArray([source], __read(nextSources));\n\n    var subscribeNext = function () {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          var nextSource = void 0;\n\n          try {\n            nextSource = innerFrom(remaining.shift());\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          var innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n          subscriber.add(nextSource.subscribe(innerSub));\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n\nfunction onErrorResumeNext() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return onErrorResumeNext$1(argsOrArgArray(sources))(EMPTY);\n}\n\nfunction pairs(obj, scheduler) {\n  return from(Object.entries(obj), scheduler);\n}\n\nfunction not(pred, thisArg) {\n  return function (value, index) {\n    return !pred.call(thisArg, value, index);\n  };\n}\n\nfunction filter(predicate, thisArg) {\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return predicate.call(thisArg, value, index++) && subscriber.next(value);\n    }));\n  });\n}\n\nfunction partition(source, predicate, thisArg) {\n  return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))];\n}\n\nfunction race() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  sources = argsOrArgArray(sources);\n  return sources.length === 1 ? innerFrom(sources[0]) : new Observable(raceInit(sources));\n}\n\nfunction raceInit(sources) {\n  return function (subscriber) {\n    var subscriptions = [];\n\n    var _loop_1 = function (i) {\n      subscriptions.push(innerFrom(sources[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (subscriptions) {\n          for (var s = 0; s < subscriptions.length; s++) {\n            s !== i && subscriptions[s].unsubscribe();\n          }\n\n          subscriptions = null;\n        }\n\n        subscriber.next(value);\n      })));\n    };\n\n    for (var i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      _loop_1(i);\n    }\n  };\n}\n\nfunction range(start, count, scheduler) {\n  if (count == null) {\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    return EMPTY;\n  }\n\n  var end = count + start;\n  return new Observable(scheduler ? function (subscriber) {\n    var n = start;\n    return scheduler.schedule(function () {\n      if (n < end) {\n        subscriber.next(n++);\n        this.schedule();\n      } else {\n        subscriber.complete();\n      }\n    });\n  } : function (subscriber) {\n    var n = start;\n\n    while (n < end && !subscriber.closed) {\n      subscriber.next(n++);\n    }\n\n    subscriber.complete();\n  });\n}\n\nfunction using(resourceFactory, observableFactory) {\n  return new Observable(function (subscriber) {\n    var resource = resourceFactory();\n    var result = observableFactory(resource);\n    var source = result ? innerFrom(result) : EMPTY;\n    source.subscribe(subscriber);\n    return function () {\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n\nfunction zip$1() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n  var sources = argsOrArgArray(args);\n  return sources.length ? new Observable(function (subscriber) {\n    var buffers = sources.map(function () {\n      return [];\n    });\n    var completed = sources.map(function () {\n      return false;\n    });\n    subscriber.add(function () {\n      buffers = completed = null;\n    });\n\n    var _loop_1 = function (sourceIndex) {\n      innerFrom(sources[sourceIndex]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        buffers[sourceIndex].push(value);\n\n        if (buffers.every(function (buffer) {\n          return buffer.length;\n        })) {\n          var result = buffers.map(function (buffer) {\n            return buffer.shift();\n          });\n          subscriber.next(resultSelector ? resultSelector.apply(void 0, __spreadArray([], __read(result))) : result);\n\n          if (buffers.some(function (buffer, i) {\n            return !buffer.length && completed[i];\n          })) {\n            subscriber.complete();\n          }\n        }\n      }, function () {\n        completed[sourceIndex] = true;\n        !buffers[sourceIndex].length && subscriber.complete();\n      }));\n    };\n\n    for (var sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n      _loop_1(sourceIndex);\n    }\n\n    return function () {\n      buffers = completed = null;\n    };\n  }) : EMPTY;\n}\n\nfunction audit(durationSelector) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    var durationSubscriber = null;\n    var isComplete = false;\n\n    var endDuration = function () {\n      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n      durationSubscriber = null;\n\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n\n      isComplete && subscriber.complete();\n    };\n\n    var cleanupDuration = function () {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n\n      if (!durationSubscriber) {\n        innerFrom(durationSelector(value)).subscribe(durationSubscriber = new OperatorSubscriber(subscriber, endDuration, cleanupDuration));\n      }\n    }, function () {\n      isComplete = true;\n      (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n    }));\n  });\n}\n\nfunction auditTime(duration, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return audit(function () {\n    return timer(duration, scheduler);\n  });\n}\n\nfunction buffer(closingNotifier) {\n  return operate(function (source, subscriber) {\n    var currentBuffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return currentBuffer.push(value);\n    }, function () {\n      subscriber.next(currentBuffer);\n      subscriber.complete();\n    }));\n    closingNotifier.subscribe(new OperatorSubscriber(subscriber, function () {\n      var b = currentBuffer;\n      currentBuffer = [];\n      subscriber.next(b);\n    }, noop));\n    return function () {\n      currentBuffer = null;\n    };\n  });\n}\n\nfunction bufferCount(bufferSize, startBufferEvery) {\n  if (startBufferEvery === void 0) {\n    startBufferEvery = null;\n  }\n\n  startBufferEvery = startBufferEvery !== null && startBufferEvery !== void 0 ? startBufferEvery : bufferSize;\n  return operate(function (source, subscriber) {\n    var buffers = [];\n    var count = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a, e_2, _b;\n\n      var toEmit = null;\n\n      if (count++ % startBufferEvery === 0) {\n        buffers.push([]);\n      }\n\n      try {\n        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {\n          var buffer = buffers_1_1.value;\n          buffer.push(value);\n\n          if (bufferSize <= buffer.length) {\n            toEmit = toEmit !== null && toEmit !== void 0 ? toEmit : [];\n            toEmit.push(buffer);\n          }\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      if (toEmit) {\n        try {\n          for (var toEmit_1 = __values(toEmit), toEmit_1_1 = toEmit_1.next(); !toEmit_1_1.done; toEmit_1_1 = toEmit_1.next()) {\n            var buffer = toEmit_1_1.value;\n            arrRemove(buffers, buffer);\n            subscriber.next(buffer);\n          }\n        } catch (e_2_1) {\n          e_2 = {\n            error: e_2_1\n          };\n        } finally {\n          try {\n            if (toEmit_1_1 && !toEmit_1_1.done && (_b = toEmit_1.return)) _b.call(toEmit_1);\n          } finally {\n            if (e_2) throw e_2.error;\n          }\n        }\n      }\n    }, function () {\n      var e_3, _a;\n\n      try {\n        for (var buffers_2 = __values(buffers), buffers_2_1 = buffers_2.next(); !buffers_2_1.done; buffers_2_1 = buffers_2.next()) {\n          var buffer = buffers_2_1.value;\n          subscriber.next(buffer);\n        }\n      } catch (e_3_1) {\n        e_3 = {\n          error: e_3_1\n        };\n      } finally {\n        try {\n          if (buffers_2_1 && !buffers_2_1.done && (_a = buffers_2.return)) _a.call(buffers_2);\n        } finally {\n          if (e_3) throw e_3.error;\n        }\n      }\n\n      subscriber.complete();\n    }, undefined, function () {\n      buffers = null;\n    }));\n  });\n}\n\nfunction bufferTime(bufferTimeSpan) {\n  var _a, _b;\n\n  var otherArgs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var bufferCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxBufferSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var bufferRecords = [];\n    var restartOnEmit = false;\n\n    var emit = function (record) {\n      var buffer = record.buffer,\n          subs = record.subs;\n      subs.unsubscribe();\n      arrRemove(bufferRecords, record);\n      subscriber.next(buffer);\n      restartOnEmit && startBuffer();\n    };\n\n    var startBuffer = function () {\n      if (bufferRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var buffer = [];\n        var record_1 = {\n          buffer: buffer,\n          subs: subs\n        };\n        bufferRecords.push(record_1);\n        subs.add(scheduler.schedule(function () {\n          return emit(record_1);\n        }, bufferTimeSpan));\n      }\n    };\n\n    bufferCreationInterval !== null && bufferCreationInterval >= 0 ? subscriber.add(scheduler.schedule(function () {\n      startBuffer();\n      !this.closed && subscriber.add(this.schedule(null, bufferCreationInterval));\n    }, bufferCreationInterval)) : restartOnEmit = true;\n    startBuffer();\n    var bufferTimeSubscriber = new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      var recordsCopy = bufferRecords.slice();\n\n      try {\n        for (var recordsCopy_1 = __values(recordsCopy), recordsCopy_1_1 = recordsCopy_1.next(); !recordsCopy_1_1.done; recordsCopy_1_1 = recordsCopy_1.next()) {\n          var record = recordsCopy_1_1.value;\n          var buffer = record.buffer;\n          buffer.push(value);\n          maxBufferSize <= buffer.length && emit(record);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (recordsCopy_1_1 && !recordsCopy_1_1.done && (_a = recordsCopy_1.return)) _a.call(recordsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (bufferRecords === null || bufferRecords === void 0 ? void 0 : bufferRecords.length) {\n        subscriber.next(bufferRecords.shift().buffer);\n      }\n\n      bufferTimeSubscriber === null || bufferTimeSubscriber === void 0 ? void 0 : bufferTimeSubscriber.unsubscribe();\n      subscriber.complete();\n      subscriber.unsubscribe();\n    }, undefined, function () {\n      return bufferRecords = null;\n    });\n    source.subscribe(bufferTimeSubscriber);\n  });\n}\n\nfunction bufferToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var buffers = [];\n    innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {\n      var buffer = [];\n      buffers.push(buffer);\n      var closingSubscription = new Subscription();\n\n      var emitBuffer = function () {\n        arrRemove(buffers, buffer);\n        subscriber.next(buffer);\n        closingSubscription.unsubscribe();\n      };\n\n      closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop)));\n    }, noop));\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var buffers_1 = __values(buffers), buffers_1_1 = buffers_1.next(); !buffers_1_1.done; buffers_1_1 = buffers_1.next()) {\n          var buffer = buffers_1_1.value;\n          buffer.push(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffers_1_1 && !buffers_1_1.done && (_a = buffers_1.return)) _a.call(buffers_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (buffers.length > 0) {\n        subscriber.next(buffers.shift());\n      }\n\n      subscriber.complete();\n    }));\n  });\n}\n\nfunction bufferWhen(closingSelector) {\n  return operate(function (source, subscriber) {\n    var buffer = null;\n    var closingSubscriber = null;\n\n    var openBuffer = function () {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      var b = buffer;\n      buffer = [];\n      b && subscriber.next(b);\n      innerFrom(closingSelector()).subscribe(closingSubscriber = new OperatorSubscriber(subscriber, openBuffer, noop));\n    };\n\n    openBuffer();\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return buffer === null || buffer === void 0 ? void 0 : buffer.push(value);\n    }, function () {\n      buffer && subscriber.next(buffer);\n      subscriber.complete();\n    }, undefined, function () {\n      return buffer = closingSubscriber = null;\n    }));\n  });\n}\n\nfunction catchError(selector) {\n  return operate(function (source, subscriber) {\n    var innerSub = null;\n    var syncUnsub = false;\n    var handledResult;\n    innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {\n      handledResult = innerFrom(selector(err, catchError(selector)(source)));\n\n      if (innerSub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        handledResult.subscribe(subscriber);\n      } else {\n        syncUnsub = true;\n      }\n    }));\n\n    if (syncUnsub) {\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult.subscribe(subscriber);\n    }\n  });\n}\n\nfunction scanInternals(accumulator, seed, hasSeed, emitOnNext, emitBeforeComplete) {\n  return function (source, subscriber) {\n    var hasState = hasSeed;\n    var state = seed;\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n      state = hasState ? accumulator(state, value, i) : (hasState = true, value);\n      emitOnNext && subscriber.next(state);\n    }, emitBeforeComplete && function () {\n      hasState && subscriber.next(state);\n      subscriber.complete();\n    }));\n  };\n}\n\nfunction reduce(accumulator, seed) {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n\nvar arrReducer = function (arr, value) {\n  return arr.push(value), arr;\n};\n\nfunction toArray() {\n  return operate(function (source, subscriber) {\n    reduce(arrReducer, [])(source).subscribe(subscriber);\n  });\n}\n\nfunction joinAllInternals(joinFn, project) {\n  return pipe(toArray(), mergeMap(function (sources) {\n    return joinFn(sources);\n  }), project ? mapOneOrManyArgs(project) : identity);\n}\n\nfunction combineLatestAll(project) {\n  return joinAllInternals(combineLatest$1, project);\n}\n\nvar combineAll = combineLatestAll;\n\nfunction combineLatest() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var resultSelector = popResultSelector(args);\n  return resultSelector ? pipe(combineLatest.apply(void 0, __spreadArray([], __read(args))), mapOneOrManyArgs(resultSelector)) : operate(function (source, subscriber) {\n    combineLatestInit(__spreadArray([source], __read(argsOrArgArray(args))))(subscriber);\n  });\n}\n\nfunction combineLatestWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return combineLatest.apply(void 0, __spreadArray([], __read(otherSources)));\n}\n\nfunction concatMap(project, resultSelector) {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n\nfunction concatMapTo(innerObservable, resultSelector) {\n  return isFunction(resultSelector) ? concatMap(function () {\n    return innerObservable;\n  }, resultSelector) : concatMap(function () {\n    return innerObservable;\n  });\n}\n\nfunction concat() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  return operate(function (source, subscriber) {\n    concatAll()(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}\n\nfunction concatWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return concat.apply(void 0, __spreadArray([], __read(otherSources)));\n}\n\nfunction fromSubscribable(subscribable) {\n  return new Observable(function (subscriber) {\n    return subscribable.subscribe(subscriber);\n  });\n}\n\nvar DEFAULT_CONFIG = {\n  connector: function () {\n    return new Subject();\n  }\n};\n\nfunction connect(selector, config) {\n  if (config === void 0) {\n    config = DEFAULT_CONFIG;\n  }\n\n  var connector = config.connector;\n  return operate(function (source, subscriber) {\n    var subject = connector();\n    from(selector(fromSubscribable(subject))).subscribe(subscriber);\n    subscriber.add(source.subscribe(subject));\n  });\n}\n\nfunction count(predicate) {\n  return reduce(function (total, value, i) {\n    return !predicate || predicate(value, i) ? total + 1 : total;\n  }, 0);\n}\n\nfunction debounce(durationSelector) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    var durationSubscriber = null;\n\n    var emit = function () {\n      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n      durationSubscriber = null;\n\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      durationSubscriber === null || durationSubscriber === void 0 ? void 0 : durationSubscriber.unsubscribe();\n      hasValue = true;\n      lastValue = value;\n      durationSubscriber = new OperatorSubscriber(subscriber, emit, noop);\n      innerFrom(durationSelector(value)).subscribe(durationSubscriber);\n    }, function () {\n      emit();\n      subscriber.complete();\n    }, undefined, function () {\n      lastValue = durationSubscriber = null;\n    }));\n  });\n}\n\nfunction debounceTime(dueTime, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  return operate(function (source, subscriber) {\n    var activeTask = null;\n    var lastValue = null;\n    var lastTime = null;\n\n    var emit = function () {\n      if (activeTask) {\n        activeTask.unsubscribe();\n        activeTask = null;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    function emitWhenIdle() {\n      var targetTime = lastTime + dueTime;\n      var now = scheduler.now();\n\n      if (now < targetTime) {\n        activeTask = this.schedule(undefined, targetTime - now);\n        subscriber.add(activeTask);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      lastValue = value;\n      lastTime = scheduler.now();\n\n      if (!activeTask) {\n        activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n        subscriber.add(activeTask);\n      }\n    }, function () {\n      emit();\n      subscriber.complete();\n    }, undefined, function () {\n      lastValue = activeTask = null;\n    }));\n  });\n}\n\nfunction defaultIfEmpty(defaultValue) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      subscriber.next(value);\n    }, function () {\n      if (!hasValue) {\n        subscriber.next(defaultValue);\n      }\n\n      subscriber.complete();\n    }));\n  });\n}\n\nfunction take(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var seen = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      if (++seen <= count) {\n        subscriber.next(value);\n\n        if (count <= seen) {\n          subscriber.complete();\n        }\n      }\n    }));\n  });\n}\n\nfunction ignoreElements() {\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, noop));\n  });\n}\n\nfunction mapTo(value) {\n  return map(function () {\n    return value;\n  });\n}\n\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return concat$1(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n    };\n  }\n\n  return mergeMap(function (value, index) {\n    return delayDurationSelector(value, index).pipe(take(1), mapTo(value));\n  });\n}\n\nfunction delay(due, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  var duration = timer(due, scheduler);\n  return delayWhen(function () {\n    return duration;\n  });\n}\n\nfunction dematerialize() {\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, function (notification) {\n      return observeNotification(notification, subscriber);\n    }));\n  });\n}\n\nfunction distinct(keySelector, flushes) {\n  return operate(function (source, subscriber) {\n    var distinctKeys = new Set();\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var key = keySelector ? keySelector(value) : value;\n\n      if (!distinctKeys.has(key)) {\n        distinctKeys.add(key);\n        subscriber.next(value);\n      }\n    }));\n    flushes === null || flushes === void 0 ? void 0 : flushes.subscribe(new OperatorSubscriber(subscriber, function () {\n      return distinctKeys.clear();\n    }, noop));\n  });\n}\n\nfunction distinctUntilChanged(comparator, keySelector) {\n  if (keySelector === void 0) {\n    keySelector = identity;\n  }\n\n  comparator = comparator !== null && comparator !== void 0 ? comparator : defaultCompare;\n  return operate(function (source, subscriber) {\n    var previousKey;\n    var first = true;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var currentKey = keySelector(value);\n\n      if (first || !comparator(previousKey, currentKey)) {\n        first = false;\n        previousKey = currentKey;\n        subscriber.next(value);\n      }\n    }));\n  });\n}\n\nfunction defaultCompare(a, b) {\n  return a === b;\n}\n\nfunction distinctUntilKeyChanged(key, compare) {\n  return distinctUntilChanged(function (x, y) {\n    return compare ? compare(x[key], y[key]) : x[key] === y[key];\n  });\n}\n\nfunction throwIfEmpty(errorFactory) {\n  if (errorFactory === void 0) {\n    errorFactory = defaultErrorFactory;\n  }\n\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      subscriber.next(value);\n    }, function () {\n      return hasValue ? subscriber.complete() : subscriber.error(errorFactory());\n    }));\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n\nfunction elementAt(index, defaultValue) {\n  if (index < 0) {\n    throw new ArgumentOutOfRangeError();\n  }\n\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(filter(function (v, i) {\n      return i === index;\n    }), take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new ArgumentOutOfRangeError();\n    }));\n  };\n}\n\nfunction endWith() {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  return function (source) {\n    return concat$1(source, of.apply(void 0, __spreadArray([], __read(values))));\n  };\n}\n\nfunction every(predicate, thisArg) {\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      if (!predicate.call(thisArg, value, index++, source)) {\n        subscriber.next(false);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(true);\n      subscriber.complete();\n    }));\n  });\n}\n\nfunction exhaustAll() {\n  return operate(function (source, subscriber) {\n    var isComplete = false;\n    var innerSub = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (inner) {\n      if (!innerSub) {\n        innerSub = innerFrom(inner).subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        }));\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}\n\nvar exhaust = exhaustAll;\n\nfunction exhaustMap(project, resultSelector) {\n  if (resultSelector) {\n    return function (source) {\n      return source.pipe(exhaustMap(function (a, i) {\n        return innerFrom(project(a, i)).pipe(map(function (b, ii) {\n          return resultSelector(a, b, i, ii);\n        }));\n      }));\n    };\n  }\n\n  return operate(function (source, subscriber) {\n    var index = 0;\n    var innerSub = null;\n    var isComplete = false;\n    source.subscribe(new OperatorSubscriber(subscriber, function (outerValue) {\n      if (!innerSub) {\n        innerSub = new OperatorSubscriber(subscriber, undefined, function () {\n          innerSub = null;\n          isComplete && subscriber.complete();\n        });\n        innerFrom(project(outerValue, index++)).subscribe(innerSub);\n      }\n    }, function () {\n      isComplete = true;\n      !innerSub && subscriber.complete();\n    }));\n  });\n}\n\nfunction expand(project, concurrent, scheduler) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate(function (source, subscriber) {\n    return mergeInternals(source, subscriber, project, concurrent, undefined, true, scheduler);\n  });\n}\n\nfunction finalize(callback) {\n  return operate(function (source, subscriber) {\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n\nfunction find(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\n\nfunction createFind(predicate, thisArg, emit) {\n  var findIndex = emit === 'index';\n  return function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var i = index++;\n\n      if (predicate.call(thisArg, value, i, source)) {\n        subscriber.next(findIndex ? i : value);\n        subscriber.complete();\n      }\n    }, function () {\n      subscriber.next(findIndex ? -1 : undefined);\n      subscriber.complete();\n    }));\n  };\n}\n\nfunction findIndex(predicate, thisArg) {\n  return operate(createFind(predicate, thisArg, 'index'));\n}\n\nfunction first(predicate, defaultValue) {\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(predicate ? filter(function (v, i) {\n      return predicate(v, i, source);\n    }) : identity, take(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new EmptyError();\n    }));\n  };\n}\n\nfunction groupBy(keySelector, elementOrOptions, duration, connector) {\n  return operate(function (source, subscriber) {\n    var element;\n\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      duration = elementOrOptions.duration, element = elementOrOptions.element, connector = elementOrOptions.connector;\n    }\n\n    var groups = new Map();\n\n    var notify = function (cb) {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    var handleError = function (err) {\n      return notify(function (consumer) {\n        return consumer.error(err);\n      });\n    };\n\n    var groupBySourceSubscriber = new GroupBySubscriber(subscriber, function (value) {\n      try {\n        var key_1 = keySelector(value);\n        var group_1 = groups.get(key_1);\n\n        if (!group_1) {\n          groups.set(key_1, group_1 = connector ? connector() : new Subject());\n          var grouped = createGroupedObservable(key_1, group_1);\n          subscriber.next(grouped);\n\n          if (duration) {\n            var durationSubscriber_1 = new OperatorSubscriber(group_1, function () {\n              group_1.complete();\n              durationSubscriber_1 === null || durationSubscriber_1 === void 0 ? void 0 : durationSubscriber_1.unsubscribe();\n            }, undefined, undefined, function () {\n              return groups.delete(key_1);\n            });\n            groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber_1));\n          }\n        }\n\n        group_1.next(element ? element(value) : value);\n      } catch (err) {\n        handleError(err);\n      }\n    }, function () {\n      return notify(function (consumer) {\n        return consumer.complete();\n      });\n    }, handleError, function () {\n      return groups.clear();\n    });\n    source.subscribe(groupBySourceSubscriber);\n\n    function createGroupedObservable(key, groupSubject) {\n      var result = new Observable(function (groupSubscriber) {\n        groupBySourceSubscriber.activeGroups++;\n        var innerSub = groupSubject.subscribe(groupSubscriber);\n        return function () {\n          innerSub.unsubscribe();\n          --groupBySourceSubscriber.activeGroups === 0 && groupBySourceSubscriber.teardownAttempted && groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\n\nvar GroupBySubscriber = function (_super) {\n  __extends(GroupBySubscriber, _super);\n\n  function GroupBySubscriber() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.activeGroups = 0;\n    _this.teardownAttempted = false;\n    return _this;\n  }\n\n  GroupBySubscriber.prototype.unsubscribe = function () {\n    this.teardownAttempted = true;\n    this.activeGroups === 0 && _super.prototype.unsubscribe.call(this);\n  };\n\n  return GroupBySubscriber;\n}(OperatorSubscriber);\n\nfunction isEmpty() {\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, function () {\n      subscriber.next(false);\n      subscriber.complete();\n    }, function () {\n      subscriber.next(true);\n      subscriber.complete();\n    }));\n  });\n}\n\nfunction takeLast(count) {\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var buffer = [];\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      buffer.push(value);\n      count < buffer.length && buffer.shift();\n    }, function () {\n      var e_1, _a;\n\n      try {\n        for (var buffer_1 = __values(buffer), buffer_1_1 = buffer_1.next(); !buffer_1_1.done; buffer_1_1 = buffer_1.next()) {\n          var value = buffer_1_1.value;\n          subscriber.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (buffer_1_1 && !buffer_1_1.done && (_a = buffer_1.return)) _a.call(buffer_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      subscriber.complete();\n    }, undefined, function () {\n      buffer = null;\n    }));\n  });\n}\n\nfunction last(predicate, defaultValue) {\n  var hasDefaultValue = arguments.length >= 2;\n  return function (source) {\n    return source.pipe(predicate ? filter(function (v, i) {\n      return predicate(v, i, source);\n    }) : identity, takeLast(1), hasDefaultValue ? defaultIfEmpty(defaultValue) : throwIfEmpty(function () {\n      return new EmptyError();\n    }));\n  };\n}\n\nfunction materialize() {\n  return operate(function (source, subscriber) {\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      subscriber.next(Notification.createNext(value));\n    }, function () {\n      subscriber.next(Notification.createComplete());\n      subscriber.complete();\n    }, function (err) {\n      subscriber.next(Notification.createError(err));\n      subscriber.complete();\n    }));\n  });\n}\n\nfunction max(comparer) {\n  return reduce(isFunction(comparer) ? function (x, y) {\n    return comparer(x, y) > 0 ? x : y;\n  } : function (x, y) {\n    return x > y ? x : y;\n  });\n}\n\nvar flatMap = mergeMap;\n\nfunction mergeMapTo(innerObservable, resultSelector, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  if (isFunction(resultSelector)) {\n    return mergeMap(function () {\n      return innerObservable;\n    }, resultSelector, concurrent);\n  }\n\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return mergeMap(function () {\n    return innerObservable;\n  }, concurrent);\n}\n\nfunction mergeScan(accumulator, seed, concurrent) {\n  if (concurrent === void 0) {\n    concurrent = Infinity;\n  }\n\n  return operate(function (source, subscriber) {\n    var state = seed;\n    return mergeInternals(source, subscriber, function (value, index) {\n      return accumulator(state, value, index);\n    }, concurrent, function (value) {\n      state = value;\n    }, false, undefined, function () {\n      return state = null;\n    });\n  });\n}\n\nfunction merge() {\n  var args = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    args[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(args);\n  var concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n  return operate(function (source, subscriber) {\n    mergeAll(concurrent)(internalFromArray(__spreadArray([source], __read(args)), scheduler)).subscribe(subscriber);\n  });\n}\n\nfunction mergeWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return merge.apply(void 0, __spreadArray([], __read(otherSources)));\n}\n\nfunction min(comparer) {\n  return reduce(isFunction(comparer) ? function (x, y) {\n    return comparer(x, y) < 0 ? x : y;\n  } : function (x, y) {\n    return x < y ? x : y;\n  });\n}\n\nfunction multicast(subjectOrSubjectFactory, selector) {\n  var subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : function () {\n    return subjectOrSubjectFactory;\n  };\n\n  if (isFunction(selector)) {\n    return connect(selector, {\n      connector: subjectFactory\n    });\n  }\n\n  return function (source) {\n    return new ConnectableObservable(source, subjectFactory);\n  };\n}\n\nfunction pairwise() {\n  return operate(function (source, subscriber) {\n    var prev;\n    var hasPrev = false;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var p = prev;\n      prev = value;\n      hasPrev && subscriber.next([p, value]);\n      hasPrev = true;\n    }));\n  });\n}\n\nfunction pluck() {\n  var properties = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    properties[_i] = arguments[_i];\n  }\n\n  var length = properties.length;\n\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n\n  return map(function (x) {\n    var currentProp = x;\n\n    for (var i = 0; i < length; i++) {\n      var p = currentProp === null || currentProp === void 0 ? void 0 : currentProp[properties[i]];\n\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n\n    return currentProp;\n  });\n}\n\nfunction publish(selector) {\n  return selector ? function (source) {\n    return connect(selector)(source);\n  } : function (source) {\n    return multicast(new Subject())(source);\n  };\n}\n\nfunction publishBehavior(initialValue) {\n  return function (source) {\n    var subject = new BehaviorSubject(initialValue);\n    return new ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}\n\nfunction publishLast() {\n  return function (source) {\n    var subject = new AsyncSubject();\n    return new ConnectableObservable(source, function () {\n      return subject;\n    });\n  };\n}\n\nfunction publishReplay(bufferSize, windowTime, selectorOrScheduler, timestampProvider) {\n  if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {\n    timestampProvider = selectorOrScheduler;\n  }\n\n  var selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;\n  return function (source) {\n    return multicast(new ReplaySubject(bufferSize, windowTime, timestampProvider), selector)(source);\n  };\n}\n\nfunction raceWith() {\n  var otherSources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherSources[_i] = arguments[_i];\n  }\n\n  return !otherSources.length ? identity : operate(function (source, subscriber) {\n    raceInit(__spreadArray([source], __read(otherSources)))(subscriber);\n  });\n}\n\nfunction repeat(count) {\n  if (count === void 0) {\n    count = Infinity;\n  }\n\n  return count <= 0 ? function () {\n    return EMPTY;\n  } : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRepeat = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        if (++soFar < count) {\n          if (innerSub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRepeat();\n          } else {\n            syncUnsub = true;\n          }\n        } else {\n          subscriber.complete();\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRepeat();\n      }\n    };\n\n    subscribeForRepeat();\n  });\n}\n\nfunction repeatWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var completions$;\n    var isNotifierComplete = false;\n    var isMainComplete = false;\n\n    var checkComplete = function () {\n      return isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    };\n\n    var getCompletionSubject = function () {\n      if (!completions$) {\n        completions$ = new Subject();\n        notifier(completions$).subscribe(new OperatorSubscriber(subscriber, function () {\n          if (innerSub) {\n            subscribeForRepeatWhen();\n          } else {\n            syncResub = true;\n          }\n        }, function () {\n          isNotifierComplete = true;\n          checkComplete();\n        }));\n      }\n\n      return completions$;\n    };\n\n    var subscribeForRepeatWhen = function () {\n      isMainComplete = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, function () {\n        isMainComplete = true;\n        !checkComplete() && getCompletionSubject().next();\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRepeatWhen();\n      }\n    };\n\n    subscribeForRepeatWhen();\n  });\n}\n\nfunction retry(configOrCount) {\n  if (configOrCount === void 0) {\n    configOrCount = Infinity;\n  }\n\n  var config;\n\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount\n    };\n  }\n\n  var _a = config.count,\n      count = _a === void 0 ? Infinity : _a,\n      delay = config.delay,\n      _b = config.resetOnSuccess,\n      resetOnSuccess = _b === void 0 ? false : _b;\n  return count <= 0 ? identity : operate(function (source, subscriber) {\n    var soFar = 0;\n    var innerSub;\n\n    var subscribeForRetry = function () {\n      var syncUnsub = false;\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n        if (resetOnSuccess) {\n          soFar = 0;\n        }\n\n        subscriber.next(value);\n      }, undefined, function (err) {\n        if (soFar++ < count) {\n          var resub_1 = function () {\n            if (innerSub) {\n              innerSub.unsubscribe();\n              innerSub = null;\n              subscribeForRetry();\n            } else {\n              syncUnsub = true;\n            }\n          };\n\n          if (delay != null) {\n            var notifier = typeof delay === 'number' ? timer(delay) : innerFrom(delay(err, soFar));\n            var notifierSubscriber_1 = new OperatorSubscriber(subscriber, function () {\n              notifierSubscriber_1.unsubscribe();\n              resub_1();\n            }, function () {\n              subscriber.complete();\n            });\n            notifier.subscribe(notifierSubscriber_1);\n          } else {\n            resub_1();\n          }\n        } else {\n          subscriber.error(err);\n        }\n      }));\n\n      if (syncUnsub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        subscribeForRetry();\n      }\n    };\n\n    subscribeForRetry();\n  });\n}\n\nfunction retryWhen(notifier) {\n  return operate(function (source, subscriber) {\n    var innerSub;\n    var syncResub = false;\n    var errors$;\n\n    var subscribeForRetryWhen = function () {\n      innerSub = source.subscribe(new OperatorSubscriber(subscriber, undefined, undefined, function (err) {\n        if (!errors$) {\n          errors$ = new Subject();\n          notifier(errors$).subscribe(new OperatorSubscriber(subscriber, function () {\n            return innerSub ? subscribeForRetryWhen() : syncResub = true;\n          }));\n        }\n\n        if (errors$) {\n          errors$.next(err);\n        }\n      }));\n\n      if (syncResub) {\n        innerSub.unsubscribe();\n        innerSub = null;\n        syncResub = false;\n        subscribeForRetryWhen();\n      }\n    };\n\n    subscribeForRetryWhen();\n  });\n}\n\nfunction sample(notifier) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var lastValue = null;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      lastValue = value;\n    }));\n\n    var emit = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = lastValue;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}\n\nfunction sampleTime(period, scheduler) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  return sample(interval(period, scheduler));\n}\n\nfunction scan(accumulator, seed) {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, true));\n}\n\nfunction sequenceEqual(compareTo, comparator) {\n  if (comparator === void 0) {\n    comparator = function (a, b) {\n      return a === b;\n    };\n  }\n\n  return operate(function (source, subscriber) {\n    var aState = createState();\n    var bState = createState();\n\n    var emit = function (isEqual) {\n      subscriber.next(isEqual);\n      subscriber.complete();\n    };\n\n    var createSubscriber = function (selfState, otherState) {\n      var sequenceEqualSubscriber = new OperatorSubscriber(subscriber, function (a) {\n        var buffer = otherState.buffer,\n            complete = otherState.complete;\n\n        if (buffer.length === 0) {\n          complete ? emit(false) : selfState.buffer.push(a);\n        } else {\n          !comparator(a, buffer.shift()) && emit(false);\n        }\n      }, function () {\n        selfState.complete = true;\n        var complete = otherState.complete,\n            buffer = otherState.buffer;\n        complete && emit(buffer.length === 0);\n        sequenceEqualSubscriber === null || sequenceEqualSubscriber === void 0 ? void 0 : sequenceEqualSubscriber.unsubscribe();\n      });\n      return sequenceEqualSubscriber;\n    };\n\n    source.subscribe(createSubscriber(aState, bState));\n    compareTo.subscribe(createSubscriber(bState, aState));\n  });\n}\n\nfunction createState() {\n  return {\n    buffer: [],\n    complete: false\n  };\n}\n\nfunction share(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _a = options.connector,\n      connector = _a === void 0 ? function () {\n    return new Subject();\n  } : _a,\n      _b = options.resetOnError,\n      resetOnError = _b === void 0 ? true : _b,\n      _c = options.resetOnComplete,\n      resetOnComplete = _c === void 0 ? true : _c,\n      _d = options.resetOnRefCountZero,\n      resetOnRefCountZero = _d === void 0 ? true : _d;\n  return function (wrapperSource) {\n    var connection = null;\n    var resetConnection = null;\n    var subject = null;\n    var refCount = 0;\n    var hasCompleted = false;\n    var hasErrored = false;\n\n    var cancelReset = function () {\n      resetConnection === null || resetConnection === void 0 ? void 0 : resetConnection.unsubscribe();\n      resetConnection = null;\n    };\n\n    var reset = function () {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n\n    var resetAndUnsubscribe = function () {\n      var conn = connection;\n      reset();\n      conn === null || conn === void 0 ? void 0 : conn.unsubscribe();\n    };\n\n    return operate(function (source, subscriber) {\n      refCount++;\n\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      var dest = subject = subject !== null && subject !== void 0 ? subject : connector();\n      subscriber.add(function () {\n        refCount--;\n\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        connection = new SafeSubscriber({\n          next: function (value) {\n            return dest.next(value);\n          },\n          error: function (err) {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: function () {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          }\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset(reset, on) {\n  var args = [];\n\n  for (var _i = 2; _i < arguments.length; _i++) {\n    args[_i - 2] = arguments[_i];\n  }\n\n  if (on === true) {\n    reset();\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on.apply(void 0, __spreadArray([], __read(args))).pipe(take(1)).subscribe(function () {\n    return reset();\n  });\n}\n\nfunction shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var _a, _b;\n\n  var bufferSize;\n  var refCount = false;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    bufferSize = (_a = configOrBufferSize.bufferSize) !== null && _a !== void 0 ? _a : Infinity;\n    windowTime = (_b = configOrBufferSize.windowTime) !== null && _b !== void 0 ? _b : Infinity;\n    refCount = !!configOrBufferSize.refCount;\n    scheduler = configOrBufferSize.scheduler;\n  } else {\n    bufferSize = configOrBufferSize !== null && configOrBufferSize !== void 0 ? configOrBufferSize : Infinity;\n  }\n\n  return share({\n    connector: function () {\n      return new ReplaySubject(bufferSize, windowTime, scheduler);\n    },\n    resetOnError: true,\n    resetOnComplete: false,\n    resetOnRefCountZero: refCount\n  });\n}\n\nfunction single(predicate) {\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var singleValue;\n    var seenValue = false;\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      seenValue = true;\n\n      if (!predicate || predicate(value, index++, source)) {\n        hasValue && subscriber.error(new SequenceError('Too many matching values'));\n        hasValue = true;\n        singleValue = value;\n      }\n    }, function () {\n      if (hasValue) {\n        subscriber.next(singleValue);\n        subscriber.complete();\n      } else {\n        subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());\n      }\n    }));\n  });\n}\n\nfunction skip(count) {\n  return filter(function (_, index) {\n    return count <= index;\n  });\n}\n\nfunction skipLast(skipCount) {\n  return skipCount <= 0 ? identity : operate(function (source, subscriber) {\n    var ring = new Array(skipCount);\n    var seen = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var valueIndex = seen++;\n\n      if (valueIndex < skipCount) {\n        ring[valueIndex] = value;\n      } else {\n        var index = valueIndex % skipCount;\n        var oldValue = ring[index];\n        ring[index] = value;\n        subscriber.next(oldValue);\n      }\n    }));\n    return function () {\n      ring = null;\n    };\n  });\n}\n\nfunction skipUntil(notifier) {\n  return operate(function (source, subscriber) {\n    var taking = false;\n    var skipSubscriber = new OperatorSubscriber(subscriber, function () {\n      skipSubscriber === null || skipSubscriber === void 0 ? void 0 : skipSubscriber.unsubscribe();\n      taking = true;\n    }, noop);\n    innerFrom(notifier).subscribe(skipSubscriber);\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return taking && subscriber.next(value);\n    }));\n  });\n}\n\nfunction skipWhile(predicate) {\n  return operate(function (source, subscriber) {\n    var taking = false;\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return (taking || (taking = !predicate(value, index++))) && subscriber.next(value);\n    }));\n  });\n}\n\nfunction startWith() {\n  var values = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    values[_i] = arguments[_i];\n  }\n\n  var scheduler = popScheduler(values);\n  return operate(function (source, subscriber) {\n    (scheduler ? concat$1(values, source, scheduler) : concat$1(values, source)).subscribe(subscriber);\n  });\n}\n\nfunction switchMap(project, resultSelector) {\n  return operate(function (source, subscriber) {\n    var innerSubscriber = null;\n    var index = 0;\n    var isComplete = false;\n\n    var checkComplete = function () {\n      return isComplete && !innerSubscriber && subscriber.complete();\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      innerSubscriber === null || innerSubscriber === void 0 ? void 0 : innerSubscriber.unsubscribe();\n      var innerIndex = 0;\n      var outerIndex = index++;\n      innerFrom(project(value, outerIndex)).subscribe(innerSubscriber = new OperatorSubscriber(subscriber, function (innerValue) {\n        return subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue);\n      }, function () {\n        innerSubscriber = null;\n        checkComplete();\n      }));\n    }, function () {\n      isComplete = true;\n      checkComplete();\n    }));\n  });\n}\n\nfunction switchAll() {\n  return switchMap(identity);\n}\n\nfunction switchMapTo(innerObservable, resultSelector) {\n  return isFunction(resultSelector) ? switchMap(function () {\n    return innerObservable;\n  }, resultSelector) : switchMap(function () {\n    return innerObservable;\n  });\n}\n\nfunction switchScan(accumulator, seed) {\n  return operate(function (source, subscriber) {\n    var state = seed;\n    switchMap(function (value, index) {\n      return accumulator(state, value, index);\n    }, function (_, innerValue) {\n      return state = innerValue, innerValue;\n    })(source).subscribe(subscriber);\n    return function () {\n      state = null;\n    };\n  });\n}\n\nfunction takeUntil(notifier) {\n  return operate(function (source, subscriber) {\n    innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, function () {\n      return subscriber.complete();\n    }, noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n\nfunction takeWhile(predicate, inclusive) {\n  if (inclusive === void 0) {\n    inclusive = false;\n  }\n\n  return operate(function (source, subscriber) {\n    var index = 0;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var result = predicate(value, index++);\n      (result || inclusive) && subscriber.next(value);\n      !result && subscriber.complete();\n    }));\n  });\n}\n\nfunction tap(observerOrNext, error, complete) {\n  var tapObserver = isFunction(observerOrNext) || error || complete ? {\n    next: observerOrNext,\n    error: error,\n    complete: complete\n  } : observerOrNext;\n  return tapObserver ? operate(function (source, subscriber) {\n    var _a;\n\n    (_a = tapObserver.subscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n    var isUnsub = true;\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var _a;\n\n      (_a = tapObserver.next) === null || _a === void 0 ? void 0 : _a.call(tapObserver, value);\n      subscriber.next(value);\n    }, function () {\n      var _a;\n\n      isUnsub = false;\n      (_a = tapObserver.complete) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      subscriber.complete();\n    }, function (err) {\n      var _a;\n\n      isUnsub = false;\n      (_a = tapObserver.error) === null || _a === void 0 ? void 0 : _a.call(tapObserver, err);\n      subscriber.error(err);\n    }, function () {\n      var _a, _b;\n\n      if (isUnsub) {\n        (_a = tapObserver.unsubscribe) === null || _a === void 0 ? void 0 : _a.call(tapObserver);\n      }\n\n      (_b = tapObserver.finalize) === null || _b === void 0 ? void 0 : _b.call(tapObserver);\n    }));\n  }) : identity;\n}\n\nvar defaultThrottleConfig = {\n  leading: true,\n  trailing: false\n};\n\nfunction throttle(durationSelector, _a) {\n  var _b = _a === void 0 ? defaultThrottleConfig : _a,\n      leading = _b.leading,\n      trailing = _b.trailing;\n\n  return operate(function (source, subscriber) {\n    var hasValue = false;\n    var sendValue = null;\n    var throttled = null;\n    var isComplete = false;\n\n    var endThrottling = function () {\n      throttled === null || throttled === void 0 ? void 0 : throttled.unsubscribe();\n      throttled = null;\n\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    var cleanupThrottling = function () {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    var startThrottle = function (value) {\n      return throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling));\n    };\n\n    var send = function () {\n      if (hasValue) {\n        hasValue = false;\n        var value = sendValue;\n        sendValue = null;\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      hasValue = true;\n      sendValue = value;\n      !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n    }, function () {\n      isComplete = true;\n      !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n    }));\n  });\n}\n\nfunction throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = asyncScheduler;\n  }\n\n  if (config === void 0) {\n    config = defaultThrottleConfig;\n  }\n\n  var duration$ = timer(duration, scheduler);\n  return throttle(function () {\n    return duration$;\n  }, config);\n}\n\nfunction timeInterval(scheduler) {\n  if (scheduler === void 0) {\n    scheduler = async;\n  }\n\n  return function (source) {\n    return defer(function () {\n      return source.pipe(scan(function (_a, value) {\n        var current = _a.current;\n        return {\n          value: value,\n          current: scheduler.now(),\n          last: current\n        };\n      }, {\n        current: scheduler.now(),\n        value: undefined,\n        last: undefined\n      }), map(function (_a) {\n        var current = _a.current,\n            last = _a.last,\n            value = _a.value;\n        return new TimeInterval(value, current - last);\n      }));\n    });\n  };\n}\n\nvar TimeInterval = function () {\n  function TimeInterval(value, interval) {\n    this.value = value;\n    this.interval = interval;\n  }\n\n  return TimeInterval;\n}();\n\nfunction timeoutWith(due, withObservable, scheduler) {\n  var first;\n  var each;\n\n  var _with;\n\n  scheduler = scheduler !== null && scheduler !== void 0 ? scheduler : async;\n\n  if (isValidDate(due)) {\n    first = due;\n  } else if (typeof due === 'number') {\n    each = due;\n  }\n\n  if (withObservable) {\n    _with = function () {\n      return withObservable;\n    };\n  } else {\n    throw new TypeError('No observable provided to switch to');\n  }\n\n  if (first == null && each == null) {\n    throw new TypeError('No timeout provided.');\n  }\n\n  return timeout({\n    first: first,\n    each: each,\n    scheduler: scheduler,\n    with: _with\n  });\n}\n\nfunction timestamp(timestampProvider) {\n  if (timestampProvider === void 0) {\n    timestampProvider = dateTimestampProvider;\n  }\n\n  return map(function (value) {\n    return {\n      value: value,\n      timestamp: timestampProvider.now()\n    };\n  });\n}\n\nfunction window$1(windowBoundaries) {\n  return operate(function (source, subscriber) {\n    var windowSubject = new Subject();\n    subscriber.next(windowSubject.asObservable());\n\n    var errorHandler = function (err) {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.next(value);\n    }, function () {\n      windowSubject.complete();\n      subscriber.complete();\n    }, errorHandler));\n    windowBoundaries.subscribe(new OperatorSubscriber(subscriber, function () {\n      windowSubject.complete();\n      subscriber.next(windowSubject = new Subject());\n    }, noop, errorHandler));\n    return function () {\n      windowSubject === null || windowSubject === void 0 ? void 0 : windowSubject.unsubscribe();\n      windowSubject = null;\n    };\n  });\n}\n\nfunction windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n\n  var startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n  return operate(function (source, subscriber) {\n    var windows = [new Subject()];\n    var starts = [];\n    var count = 0;\n    subscriber.next(windows[0].asObservable());\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      try {\n        for (var windows_1 = __values(windows), windows_1_1 = windows_1.next(); !windows_1_1.done; windows_1_1 = windows_1.next()) {\n          var window_1 = windows_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windows_1_1 && !windows_1_1.done && (_a = windows_1.return)) _a.call(windows_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n\n      var c = count - windowSize + 1;\n\n      if (c >= 0 && c % startEvery === 0) {\n        windows.shift().complete();\n      }\n\n      if (++count % startEvery === 0) {\n        var window_2 = new Subject();\n        windows.push(window_2);\n        subscriber.next(window_2.asObservable());\n      }\n    }, function () {\n      while (windows.length > 0) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, function (err) {\n      while (windows.length > 0) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    }, function () {\n      starts = null;\n      windows = null;\n    }));\n  });\n}\n\nfunction windowTime(windowTimeSpan) {\n  var _a, _b;\n\n  var otherArgs = [];\n\n  for (var _i = 1; _i < arguments.length; _i++) {\n    otherArgs[_i - 1] = arguments[_i];\n  }\n\n  var scheduler = (_a = popScheduler(otherArgs)) !== null && _a !== void 0 ? _a : asyncScheduler;\n  var windowCreationInterval = (_b = otherArgs[0]) !== null && _b !== void 0 ? _b : null;\n  var maxWindowSize = otherArgs[1] || Infinity;\n  return operate(function (source, subscriber) {\n    var windowRecords = [];\n    var restartOnClose = false;\n\n    var closeWindow = function (record) {\n      var window = record.window,\n          subs = record.subs;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    var startWindow = function () {\n      if (windowRecords) {\n        var subs = new Subscription();\n        subscriber.add(subs);\n        var window_1 = new Subject();\n        var record_1 = {\n          window: window_1,\n          subs: subs,\n          seen: 0\n        };\n        windowRecords.push(record_1);\n        subscriber.next(window_1.asObservable());\n        subs.add(scheduler.schedule(function () {\n          return closeWindow(record_1);\n        }, windowTimeSpan));\n      }\n    };\n\n    windowCreationInterval !== null && windowCreationInterval >= 0 ? subscriber.add(scheduler.schedule(function () {\n      startWindow();\n      !this.closed && subscriber.add(this.schedule(null, windowCreationInterval));\n    }, windowCreationInterval)) : restartOnClose = true;\n    startWindow();\n\n    var loop = function (cb) {\n      return windowRecords.slice().forEach(cb);\n    };\n\n    var terminate = function (cb) {\n      loop(function (_a) {\n        var window = _a.window;\n        return cb(window);\n      });\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      loop(function (record) {\n        record.window.next(value);\n        maxWindowSize <= ++record.seen && closeWindow(record);\n      });\n    }, function () {\n      return terminate(function (consumer) {\n        return consumer.complete();\n      });\n    }, function (err) {\n      return terminate(function (consumer) {\n        return consumer.error(err);\n      });\n    }));\n    return function () {\n      windowRecords = null;\n    };\n  });\n}\n\nfunction windowToggle(openings, closingSelector) {\n  return operate(function (source, subscriber) {\n    var windows = [];\n\n    var handleError = function (err) {\n      while (0 < windows.length) {\n        windows.shift().error(err);\n      }\n\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(new OperatorSubscriber(subscriber, function (openValue) {\n      var window = new Subject();\n      windows.push(window);\n      var closingSubscription = new Subscription();\n\n      var closeWindow = function () {\n        arrRemove(windows, window);\n        window.complete();\n        closingSubscription.unsubscribe();\n      };\n\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom(closingSelector(openValue));\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      subscriber.next(window.asObservable());\n      closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n    }, noop));\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      var e_1, _a;\n\n      var windowsCopy = windows.slice();\n\n      try {\n        for (var windowsCopy_1 = __values(windowsCopy), windowsCopy_1_1 = windowsCopy_1.next(); !windowsCopy_1_1.done; windowsCopy_1_1 = windowsCopy_1.next()) {\n          var window_1 = windowsCopy_1_1.value;\n          window_1.next(value);\n        }\n      } catch (e_1_1) {\n        e_1 = {\n          error: e_1_1\n        };\n      } finally {\n        try {\n          if (windowsCopy_1_1 && !windowsCopy_1_1.done && (_a = windowsCopy_1.return)) _a.call(windowsCopy_1);\n        } finally {\n          if (e_1) throw e_1.error;\n        }\n      }\n    }, function () {\n      while (0 < windows.length) {\n        windows.shift().complete();\n      }\n\n      subscriber.complete();\n    }, handleError, function () {\n      while (0 < windows.length) {\n        windows.shift().unsubscribe();\n      }\n    }));\n  });\n}\n\nfunction windowWhen(closingSelector) {\n  return operate(function (source, subscriber) {\n    var window;\n    var closingSubscriber;\n\n    var handleError = function (err) {\n      window.error(err);\n      subscriber.error(err);\n    };\n\n    var openWindow = function () {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window === null || window === void 0 ? void 0 : window.complete();\n      window = new Subject();\n      subscriber.next(window.asObservable());\n      var closingNotifier;\n\n      try {\n        closingNotifier = innerFrom(closingSelector());\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      closingNotifier.subscribe(closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError));\n    };\n\n    openWindow();\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      return window.next(value);\n    }, function () {\n      window.complete();\n      subscriber.complete();\n    }, handleError, function () {\n      closingSubscriber === null || closingSubscriber === void 0 ? void 0 : closingSubscriber.unsubscribe();\n      window = null;\n    }));\n  });\n}\n\nfunction withLatestFrom() {\n  var inputs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    inputs[_i] = arguments[_i];\n  }\n\n  var project = popResultSelector(inputs);\n  return operate(function (source, subscriber) {\n    var len = inputs.length;\n    var otherValues = new Array(len);\n    var hasValue = inputs.map(function () {\n      return false;\n    });\n    var ready = false;\n\n    var _loop_1 = function (i) {\n      innerFrom(inputs[i]).subscribe(new OperatorSubscriber(subscriber, function (value) {\n        otherValues[i] = value;\n\n        if (!ready && !hasValue[i]) {\n          hasValue[i] = true;\n          (ready = hasValue.every(identity)) && (hasValue = null);\n        }\n      }, noop));\n    };\n\n    for (var i = 0; i < len; i++) {\n      _loop_1(i);\n    }\n\n    source.subscribe(new OperatorSubscriber(subscriber, function (value) {\n      if (ready) {\n        var values = __spreadArray([value], __read(otherValues));\n\n        subscriber.next(project ? project.apply(void 0, __spreadArray([], __read(values))) : values);\n      }\n    }));\n  });\n}\n\nfunction zipAll(project) {\n  return joinAllInternals(zip$1, project);\n}\n\nfunction zip() {\n  var sources = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    sources[_i] = arguments[_i];\n  }\n\n  return operate(function (source, subscriber) {\n    zip$1.apply(void 0, __spreadArray([source], __read(sources))).subscribe(subscriber);\n  });\n}\n\nfunction zipWith() {\n  var otherInputs = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    otherInputs[_i] = arguments[_i];\n  }\n\n  return zip.apply(void 0, __spreadArray([], __read(otherInputs)));\n}\n\nvar esm5 = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  Observable: Observable,\n  ConnectableObservable: ConnectableObservable,\n  observable: observable,\n  animationFrames: animationFrames,\n  Subject: Subject,\n  BehaviorSubject: BehaviorSubject,\n  ReplaySubject: ReplaySubject,\n  AsyncSubject: AsyncSubject,\n  asap: asap,\n  asapScheduler: asapScheduler,\n  async: async,\n  asyncScheduler: asyncScheduler,\n  queue: queue,\n  queueScheduler: queueScheduler,\n  animationFrame: animationFrame,\n  animationFrameScheduler: animationFrameScheduler,\n  VirtualTimeScheduler: VirtualTimeScheduler,\n  VirtualAction: VirtualAction,\n  Scheduler: Scheduler,\n  Subscription: Subscription,\n  Subscriber: Subscriber,\n  Notification: Notification,\n\n  get NotificationKind() {\n    return NotificationKind;\n  },\n\n  pipe: pipe,\n  noop: noop,\n  identity: identity,\n  isObservable: isObservable,\n  lastValueFrom: lastValueFrom,\n  firstValueFrom: firstValueFrom,\n  ArgumentOutOfRangeError: ArgumentOutOfRangeError,\n  EmptyError: EmptyError,\n  NotFoundError: NotFoundError,\n  ObjectUnsubscribedError: ObjectUnsubscribedError,\n  SequenceError: SequenceError,\n  TimeoutError: TimeoutError,\n  UnsubscriptionError: UnsubscriptionError,\n  bindCallback: bindCallback,\n  bindNodeCallback: bindNodeCallback,\n  combineLatest: combineLatest$1,\n  concat: concat$1,\n  connectable: connectable,\n  defer: defer,\n  empty: empty,\n  forkJoin: forkJoin,\n  from: from,\n  fromEvent: fromEvent,\n  fromEventPattern: fromEventPattern,\n  generate: generate,\n  iif: iif,\n  interval: interval,\n  merge: merge$1,\n  never: never,\n  of: of,\n  onErrorResumeNext: onErrorResumeNext,\n  pairs: pairs,\n  partition: partition,\n  race: race,\n  range: range,\n  throwError: throwError,\n  timer: timer,\n  using: using,\n  zip: zip$1,\n  scheduled: scheduled,\n  EMPTY: EMPTY,\n  NEVER: NEVER,\n  config: config,\n  audit: audit,\n  auditTime: auditTime,\n  buffer: buffer,\n  bufferCount: bufferCount,\n  bufferTime: bufferTime,\n  bufferToggle: bufferToggle,\n  bufferWhen: bufferWhen,\n  catchError: catchError,\n  combineAll: combineAll,\n  combineLatestAll: combineLatestAll,\n  combineLatestWith: combineLatestWith,\n  concatAll: concatAll,\n  concatMap: concatMap,\n  concatMapTo: concatMapTo,\n  concatWith: concatWith,\n  connect: connect,\n  count: count,\n  debounce: debounce,\n  debounceTime: debounceTime,\n  defaultIfEmpty: defaultIfEmpty,\n  delay: delay,\n  delayWhen: delayWhen,\n  dematerialize: dematerialize,\n  distinct: distinct,\n  distinctUntilChanged: distinctUntilChanged,\n  distinctUntilKeyChanged: distinctUntilKeyChanged,\n  elementAt: elementAt,\n  endWith: endWith,\n  every: every,\n  exhaust: exhaust,\n  exhaustAll: exhaustAll,\n  exhaustMap: exhaustMap,\n  expand: expand,\n  filter: filter,\n  finalize: finalize,\n  find: find,\n  findIndex: findIndex,\n  first: first,\n  groupBy: groupBy,\n  ignoreElements: ignoreElements,\n  isEmpty: isEmpty,\n  last: last,\n  map: map,\n  mapTo: mapTo,\n  materialize: materialize,\n  max: max,\n  mergeAll: mergeAll,\n  flatMap: flatMap,\n  mergeMap: mergeMap,\n  mergeMapTo: mergeMapTo,\n  mergeScan: mergeScan,\n  mergeWith: mergeWith,\n  min: min,\n  multicast: multicast,\n  observeOn: observeOn,\n  pairwise: pairwise,\n  pluck: pluck,\n  publish: publish,\n  publishBehavior: publishBehavior,\n  publishLast: publishLast,\n  publishReplay: publishReplay,\n  raceWith: raceWith,\n  reduce: reduce,\n  repeat: repeat,\n  repeatWhen: repeatWhen,\n  retry: retry,\n  retryWhen: retryWhen,\n  refCount: refCount,\n  sample: sample,\n  sampleTime: sampleTime,\n  scan: scan,\n  sequenceEqual: sequenceEqual,\n  share: share,\n  shareReplay: shareReplay,\n  single: single,\n  skip: skip,\n  skipLast: skipLast,\n  skipUntil: skipUntil,\n  skipWhile: skipWhile,\n  startWith: startWith,\n  subscribeOn: subscribeOn,\n  switchAll: switchAll,\n  switchMap: switchMap,\n  switchMapTo: switchMapTo,\n  switchScan: switchScan,\n  take: take,\n  takeLast: takeLast,\n  takeUntil: takeUntil,\n  takeWhile: takeWhile,\n  tap: tap,\n  throttle: throttle,\n  throttleTime: throttleTime,\n  throwIfEmpty: throwIfEmpty,\n  timeInterval: timeInterval,\n  timeout: timeout,\n  timeoutWith: timeoutWith,\n  timestamp: timestamp,\n  toArray: toArray,\n  window: window$1,\n  windowCount: windowCount,\n  windowTime: windowTime,\n  windowToggle: windowToggle,\n  windowWhen: windowWhen,\n  withLatestFrom: withLatestFrom,\n  zipAll: zipAll,\n  zipWith: zipWith\n});\nvar common = createCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.ResponseType = exports.RequestType = exports.ProxyPropertyType = void 0;\n\n  (function (ProxyPropertyType) {\n    ProxyPropertyType[\"Function\"] = \"function\";\n    ProxyPropertyType[\"Function$\"] = \"function$\";\n    ProxyPropertyType[\"Value\"] = \"value\";\n    ProxyPropertyType[\"Value$\"] = \"value$\";\n  })(exports.ProxyPropertyType || (exports.ProxyPropertyType = {}));\n\n  (function (RequestType) {\n    RequestType[\"Apply\"] = \"apply\";\n    RequestType[\"ApplySubscribe\"] = \"applySubscribe\";\n    RequestType[\"Get\"] = \"get\";\n    RequestType[\"Subscribe\"] = \"subscribe\";\n    RequestType[\"Unsubscribe\"] = \"unsubscribe\";\n  })(exports.RequestType || (exports.RequestType = {}));\n\n  (function (ResponseType) {\n    ResponseType[\"Complete\"] = \"complete\";\n    ResponseType[\"Error\"] = \"error\";\n    ResponseType[\"Next\"] = \"next\";\n    ResponseType[\"Result\"] = \"result\";\n  })(exports.ResponseType || (exports.ResponseType = {}));\n});\nvar errio = createCommonjsModule(function (module, exports) {\n  // Default options for all serializations.\n  var defaultOptions = {\n    recursive: true,\n    // Recursively serialize and deserialize nested errors\n    inherited: true,\n    // Include inherited properties\n    stack: false,\n    // Include stack property\n    private: false,\n    // Include properties with leading or trailing underscores\n    exclude: [],\n    // Property names to exclude (low priority)\n    include: [] // Property names to include (high priority)\n\n  }; // Overwrite global default options.\n\n  exports.setDefaults = function (options) {\n    for (var key in options) defaultOptions[key] = options[key];\n  }; // Object containing registered error constructors and their options.\n\n\n  var errors = {}; // Register an error constructor for serialization and deserialization with\n  // option overrides. Name can be specified in options, otherwise it will be\n  // taken from the prototype's name property (if it is not set to Error), the\n  // constructor's name property, or the name property of an instance of the\n  // constructor.\n\n  exports.register = function (constructor, options) {\n    options = options || {};\n    var prototypeName = constructor.prototype.name !== 'Error' ? constructor.prototype.name : null;\n    var name = options.name || prototypeName || constructor.name || new constructor().name;\n    errors[name] = {\n      constructor: constructor,\n      options: options\n    };\n  }; // Register an array of error constructors all with the same option overrides.\n\n\n  exports.registerAll = function (constructors, options) {\n    constructors.forEach(function (constructor) {\n      exports.register(constructor, options);\n    });\n  }; // Shallow clone a plain object.\n\n\n  function cloneObject(object) {\n    var clone = {};\n\n    for (var key in object) {\n      if (object.hasOwnProperty(key)) clone[key] = object[key];\n    }\n\n    return clone;\n  } // Register a plain object of constructor names mapped to constructors with\n  // common option overrides.\n\n\n  exports.registerObject = function (constructors, commonOptions) {\n    for (var name in constructors) {\n      if (!constructors.hasOwnProperty(name)) continue;\n      var constructor = constructors[name];\n      var options = cloneObject(commonOptions);\n      options.name = name;\n      exports.register(constructor, options);\n    }\n  }; // Register the built-in error constructors.\n\n\n  exports.registerAll([Error, EvalError, RangeError, ReferenceError, SyntaxError, TypeError, URIError]); // Serialize an error instance to a plain object with option overrides, applied\n  // on top of the global defaults and the registered option overrides. If the\n  // constructor of the error instance has not been registered yet, register it\n  // with the provided options.\n\n  exports.toObject = function (error, callOptions) {\n    callOptions = callOptions || {};\n\n    if (!errors[error.name]) {\n      // Make sure we register with the name of this instance.\n      callOptions.name = error.name;\n      exports.register(error.constructor, callOptions);\n    }\n\n    var errorOptions = errors[error.name].options;\n    var options = {};\n\n    for (var key in defaultOptions) {\n      if (callOptions.hasOwnProperty(key)) options[key] = callOptions[key];else if (errorOptions.hasOwnProperty(key)) options[key] = errorOptions[key];else options[key] = defaultOptions[key];\n    } // Always explicitly include essential error properties.\n\n\n    var object = {\n      name: error.name,\n      message: error.message\n    }; // Explicitly include stack since it is not always an enumerable property.\n\n    if (options.stack) object.stack = error.stack;\n\n    for (var prop in error) {\n      // Skip exclusion checks if property is in include list.\n      if (options.include.indexOf(prop) === -1) {\n        if (typeof error[prop] === 'function') continue;\n        if (options.exclude.indexOf(prop) !== -1) continue;\n        if (!options.inherited) if (!error.hasOwnProperty(prop)) continue;\n        if (!options.stack) if (prop === 'stack') continue;\n        if (!options.private) if (prop[0] === '_' || prop[prop.length - 1] === '_') continue;\n      }\n\n      var value = error[prop]; // Recurse if nested object has name and message properties.\n\n      if (typeof value === 'object' && value && value.name && value.message) {\n        if (options.recursive) {\n          object[prop] = exports.toObject(value, callOptions);\n        }\n\n        continue;\n      }\n\n      object[prop] = value;\n    }\n\n    return object;\n  }; // Deserialize a plain object to an instance of a registered error constructor\n  // with option overrides.  If the specific constructor is not registered,\n  // return a generic Error instance. If stack was not serialized, capture a new\n  // stack trace.\n\n\n  exports.fromObject = function (object, callOptions) {\n    callOptions = callOptions || {};\n    var registration = errors[object.name];\n    if (!registration) registration = errors.Error;\n    var constructor = registration.constructor;\n    var errorOptions = registration.options;\n    var options = {};\n\n    for (var key in defaultOptions) {\n      if (callOptions.hasOwnProperty(key)) options[key] = callOptions[key];else if (errorOptions.hasOwnProperty(key)) options[key] = errorOptions[key];else options[key] = defaultOptions[key];\n    } // Instantiate the error without actually calling the constructor.\n\n\n    var error = Object.create(constructor.prototype);\n\n    for (var prop in object) {\n      // Recurse if nested object has name and message properties.\n      if (options.recursive && typeof object[prop] === 'object') {\n        var nested = object[prop];\n\n        if (nested && nested.name && nested.message) {\n          error[prop] = exports.fromObject(nested, callOptions);\n          continue;\n        }\n      }\n\n      error[prop] = object[prop];\n    } // Capture a new stack trace such that the first trace line is the caller of\n    // fromObject.\n\n\n    if (!error.stack && Error.captureStackTrace) {\n      Error.captureStackTrace(error, exports.fromObject);\n    }\n\n    return error;\n  }; // Serialize an error instance to a JSON string with option overrides.\n\n\n  exports.stringify = function (error, callOptions) {\n    return JSON.stringify(exports.toObject(error, callOptions));\n  }; // Deserialize a JSON string to an instance of a registered error constructor.\n\n\n  exports.parse = function (string, callOptions) {\n    return exports.fromObject(JSON.parse(string), callOptions);\n  };\n});\nvar utils = createCommonjsModule(function (module, exports) {\n  var __importDefault = commonjsGlobal && commonjsGlobal.__importDefault || function (mod) {\n    return mod && mod.__esModule ? mod : {\n      \"default\": mod\n    };\n  };\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.getSubscriptionKey = exports.isFunction = exports.IpcProxyError = void 0;\n\n  const errio_1 = __importDefault(errio);\n  /* Custom Error */\n\n\n  class IpcProxyError extends Error {\n    constructor(message) {\n      super(message);\n      this.name = this.constructor.name;\n    }\n\n  }\n\n  exports.IpcProxyError = IpcProxyError;\n  errio_1.default.register(IpcProxyError);\n  /* Utils */\n  // eslint-disable-next-line @typescript-eslint/ban-types\n\n  function isFunction(value) {\n    return value !== undefined && typeof value === 'function';\n  }\n\n  exports.isFunction = isFunction;\n  /**\n   * Fix ContextIsolation\n   * @param key original key\n   * @returns\n   */\n\n  function getSubscriptionKey(key) {\n    return `${key}Subscribe`;\n  }\n\n  exports.getSubscriptionKey = getSubscriptionKey;\n});\nvar rxjs_1 = /*@__PURE__*/getAugmentedNamespace(esm5);\ncreateCommonjsModule(function (module, exports) {\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.fixContextIsolation = exports.ipcProxyFixContextIsolation = void 0;\n  /* eslint-disable @typescript-eslint/no-unsafe-return */\n\n  /* eslint-disable @typescript-eslint/no-unsafe-call */\n\n  /* eslint-disable @typescript-eslint/no-unsafe-member-access */\n\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n\n  /* eslint-disable @typescript-eslint/consistent-type-assertions */\n\n  /**\n   * fix https://github.com/electron/electron/issues/28176\n   * We cannot pass Observable across contextBridge, so we have to add a hidden patch to the object on preload script, and use that patch to regenerate Observable on renderer side\n   * This file is \"unsafe\" and will full of type warnings, which is necessary\n   */\n\n  /**\n   * Create `(window as IWindow).observables.xxx` from `(window as IWindow).service.xxx`\n   * @param name service name\n   * @param service service client proxy created in preload script\n   * @param descriptor electron ipc proxy descriptor\n   */\n\n  function ipcProxyFixContextIsolation(name, service, descriptor) {\n    if (window.observables === undefined) {\n      window.observables = {};\n    }\n\n    for (const key in descriptor.properties) {\n      // Process all Observables, we pass a `.next` function from preload script, that we can used to reconstruct Observable\n      if (common.ProxyPropertyType.Value$ === descriptor.properties[key] && !(key in service) && utils.getSubscriptionKey(key) in service) {\n        const subscribedObservable = new rxjs_1.Observable(observer => {\n          service[utils.getSubscriptionKey(key)](value => observer.next(value));\n        }); // store newly created Observable to `(window as IWindow).observables.xxx.yyy`\n\n        if (window.observables[name] === undefined) {\n          window.observables[name] = {\n            [key]: subscribedObservable\n          };\n        } else {\n          window.observables[name][key] = subscribedObservable;\n        }\n      } // create (id: string) => Observable\n\n\n      if (common.ProxyPropertyType.Function$ === descriptor.properties[key] && !(key in service) && utils.getSubscriptionKey(key) in service) {\n        const subscribingObservable = (...arguments_) => new rxjs_1.Observable(observer => {\n          service[utils.getSubscriptionKey(key)](...arguments_)(value => observer.next(value));\n        }); // store newly created Observable to `(window as IWindow).observables.xxx.yyy`\n\n\n        if (window.observables[name] === undefined) {\n          window.observables[name] = {\n            [key]: subscribingObservable\n          };\n        } else {\n          window.observables[name][key] = subscribingObservable;\n        }\n      }\n    }\n  }\n\n  exports.ipcProxyFixContextIsolation = ipcProxyFixContextIsolation;\n  /**\n   * Process `(window as IWindow).service`, reconstruct Observables into `(window as IWindow).observables`\n   */\n\n  function fixContextIsolation() {\n    const {\n      descriptors,\n      ...services\n    } = window.service;\n\n    for (const key in services) {\n      const serviceName = key;\n      ipcProxyFixContextIsolation(serviceName, services[serviceName], descriptors[serviceName]);\n    }\n  }\n\n  exports.fixContextIsolation = fixContextIsolation;\n  fixContextIsolation();\n});\nvar electronIpcCat = {};\nexports['default'] = electronIpcCat;\n","creator":"LinOnetwo","type":"application/javascript","module-type":"library"},"$:/plugins/linonetwo/itonnote/Startup/install-electron-ipc-cat.js":{"title":"$:/plugins/linonetwo/itonnote/Startup/install-electron-ipc-cat.js","text":"if (typeof window !== 'undefined' && typeof window.service !== 'undefined') {\n  require('./electron-ipc-cat');\n}\n","creator":"LinOnetwo","type":"application/javascript","module-type":"startup"},"$:/plugins/linonetwo/itonnote/description":{"title":"$:/plugins/linonetwo/itonnote/description","type":"text/vnd.tiddlywiki","text":"!!! TW-Locator\n\n根据[[$:/plugins/bimlas/locator/README/macros]]创建了下列文件：\n\n* [[$:/plugins/linonetwo/itonnote/Sidebar/Locator Fields]] 侧边栏的 Fields 标签页，用于查看含有各种字段的Tiddlers\n* [[$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFacets]] 搜索结果中的 Facets 标签页，用于分面搜索\n* [[$:/plugins/linonetwo/itonnote/Sidebar/SearchResultByFields]] 搜索结果中的 Fields 标签页，用于按字段进行精准搜索\n\n!!! macros\n\n!!!! TransclusionWithEditMe\n\n[[$:/plugins/linonetwo/itonnote/Macros/TransclusionWithEditMe]] Usage:\n\n使用普通的 [[Transclusion|https://tiddlywiki.com/#Transclusion]] 时，你没法得知源文件在哪里，如果想要修改内容，还得打开编辑模式、复制被引用的 Tiddler 的标题，然后搜索打开编辑，比较麻烦。\n\n使用此宏进行引用就很方便了：\n\n```tid\n<<reuse-tiddler \"快速创建新笔记按钮\">>\n```\n\n会直接在引用的区块旁边显示一个「查看引文」的小浮窗，带有指向源文件的链接，直接点开编辑即可。\n\n!!!! OpenImageInGithub\n\n[[$:/plugins/linonetwo/itonnote/Macros/OpenImageInGithub]] Usage:\n\nIf you have `webcatalog-tiddlywiki-menu-app.jpg` in your Wiki, you normally can just `{{webcatalog-tiddlywiki-menu-app.jpg}}` to place it in your tiddler, but you can use this macro to make it clickable, and open large image in the new browser tab:\n\n```tid\n<<view-big-image webcatalog-tiddlywiki-menu-app.jpg>>\n```\n\n!!! snippets（文本片段）\n\n在编辑模式下，有一个图章按钮，点击后会列出一系列文本片段，可以一键添加预制内容，因而无需用脑记住这些复杂的文本片段了。\n\n本插件预置了一些文本片段，详见相应的 Macros 的介绍，或相应的插件的介绍：\n\n* [[$:/plugins/linonetwo/itonnote/Snippets/LocatorAboutCurrentTiddler]]\n* [[$:/plugins/linonetwo/itonnote/Snippets/OpenImageInGithub]]\n* [[$:/plugins/linonetwo/itonnote/Snippets/TransclusionWithEditMe]]\n"},"$:/plugins/linonetwo/itonnote/readme":{"title":"$:/plugins/linonetwo/itonnote/readme","type":"text/vnd.tiddlywiki","text":"!! 功能\n\n预配置了一系列琐碎的内容，一般来自各插件的Readme和论坛讨论，但大多数人懒得看Readme，故在此直接帮忙配置好了。\n\n具体预置内容介绍可见[[Description|$:/plugins/linonetwo/itonnote/description]]。\n\n{{$:/plugins/linonetwo/itonnote/ControlPanel}}\n"}}}