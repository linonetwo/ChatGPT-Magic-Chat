{"tiddlers":{"$:/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.js":{"title":"$:/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.js","text":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n/**\n * Fuse.js v6.4.6 - Lightweight fuzzy-search (http://fusejs.io)\n *\n * Copyright (c) 2021 Kiro Risk (http://kiro.me)\n * All Rights Reserved. Apache Software License 2.0\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n */\n\nfunction isArray(value) {\n  return !Array.isArray ? getTag(value) === '[object Array]' : Array.isArray(value);\n} // Adapted from: https://github.com/lodash/lodash/blob/master/.internal/baseToString.js\n\n\nconst INFINITY = 1 / 0;\n\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n\n  let result = value + '';\n  return result == '0' && 1 / value == -INFINITY ? '-0' : result;\n}\n\nfunction toString(value) {\n  return value == null ? '' : baseToString(value);\n}\n\nfunction isString(value) {\n  return typeof value === 'string';\n}\n\nfunction isNumber(value) {\n  return typeof value === 'number';\n} // Adapted from: https://github.com/lodash/lodash/blob/master/isBoolean.js\n\n\nfunction isBoolean(value) {\n  return value === true || value === false || isObjectLike(value) && getTag(value) == '[object Boolean]';\n}\n\nfunction isObject(value) {\n  return typeof value === 'object';\n} // Checks if `value` is object-like.\n\n\nfunction isObjectLike(value) {\n  return isObject(value) && value !== null;\n}\n\nfunction isDefined(value) {\n  return value !== undefined && value !== null;\n}\n\nfunction isBlank(value) {\n  return !value.trim().length;\n} // Gets the `toStringTag` of `value`.\n// Adapted from: https://github.com/lodash/lodash/blob/master/.internal/getTag.js\n\n\nfunction getTag(value) {\n  return value == null ? value === undefined ? '[object Undefined]' : '[object Null]' : Object.prototype.toString.call(value);\n}\n\nconst EXTENDED_SEARCH_UNAVAILABLE = 'Extended search is not available';\nconst INCORRECT_INDEX_TYPE = \"Incorrect 'index' type\";\n\nconst LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY = key => `Invalid value for key ${key}`;\n\nconst PATTERN_LENGTH_TOO_LARGE = max => `Pattern length exceeds max of ${max}.`;\n\nconst MISSING_KEY_PROPERTY = name => `Missing ${name} property in key`;\n\nconst INVALID_KEY_WEIGHT_VALUE = key => `Property 'weight' in key '${key}' must be a positive integer`;\n\nconst hasOwn = Object.prototype.hasOwnProperty;\n\nclass KeyStore {\n  constructor(keys) {\n    this._keys = [];\n    this._keyMap = {};\n    let totalWeight = 0;\n    keys.forEach(key => {\n      let obj = createKey(key);\n      totalWeight += obj.weight;\n\n      this._keys.push(obj);\n\n      this._keyMap[obj.id] = obj;\n      totalWeight += obj.weight;\n    }); // Normalize weights so that their sum is equal to 1\n\n    this._keys.forEach(key => {\n      key.weight /= totalWeight;\n    });\n  }\n\n  get(keyId) {\n    return this._keyMap[keyId];\n  }\n\n  keys() {\n    return this._keys;\n  }\n\n  toJSON() {\n    return JSON.stringify(this._keys);\n  }\n\n}\n\nfunction createKey(key) {\n  let path = null;\n  let id = null;\n  let src = null;\n  let weight = 1;\n\n  if (isString(key) || isArray(key)) {\n    src = key;\n    path = createKeyPath(key);\n    id = createKeyId(key);\n  } else {\n    if (!hasOwn.call(key, 'name')) {\n      throw new Error(MISSING_KEY_PROPERTY('name'));\n    }\n\n    const name = key.name;\n    src = name;\n\n    if (hasOwn.call(key, 'weight')) {\n      weight = key.weight;\n\n      if (weight <= 0) {\n        throw new Error(INVALID_KEY_WEIGHT_VALUE(name));\n      }\n    }\n\n    path = createKeyPath(name);\n    id = createKeyId(name);\n  }\n\n  return {\n    path,\n    id,\n    weight,\n    src\n  };\n}\n\nfunction createKeyPath(key) {\n  return isArray(key) ? key : key.split('.');\n}\n\nfunction createKeyId(key) {\n  return isArray(key) ? key.join('.') : key;\n}\n\nfunction get(obj, path) {\n  let list = [];\n  let arr = false;\n\n  const deepGet = (obj, path, index) => {\n    if (!isDefined(obj)) {\n      return;\n    }\n\n    if (!path[index]) {\n      // If there's no path left, we've arrived at the object we care about.\n      list.push(obj);\n    } else {\n      let key = path[index];\n      const value = obj[key];\n\n      if (!isDefined(value)) {\n        return;\n      } // If we're at the last value in the path, and if it's a string/number/bool,\n      // add it to the list\n\n\n      if (index === path.length - 1 && (isString(value) || isNumber(value) || isBoolean(value))) {\n        list.push(toString(value));\n      } else if (isArray(value)) {\n        arr = true; // Search each item in the array.\n\n        for (let i = 0, len = value.length; i < len; i += 1) {\n          deepGet(value[i], path, index + 1);\n        }\n      } else if (path.length) {\n        // An object. Recurse further.\n        deepGet(value, path, index + 1);\n      }\n    }\n  }; // Backwards compatibility (since path used to be a string)\n\n\n  deepGet(obj, isString(path) ? path.split('.') : path, 0);\n  return arr ? list : list[0];\n}\n\nconst MatchOptions = {\n  // Whether the matches should be included in the result set. When `true`, each record in the result\n  // set will include the indices of the matched characters.\n  // These can consequently be used for highlighting purposes.\n  includeMatches: false,\n  // When `true`, the matching function will continue to the end of a search pattern even if\n  // a perfect match has already been located in the string.\n  findAllMatches: false,\n  // Minimum number of characters that must be matched before a result is considered a match\n  minMatchCharLength: 1\n};\nconst BasicOptions = {\n  // When `true`, the algorithm continues searching to the end of the input even if a perfect\n  // match is found before the end of the same input.\n  isCaseSensitive: false,\n  // When true, the matching function will continue to the end of a search pattern even if\n  includeScore: false,\n  // List of properties that will be searched. This also supports nested properties.\n  keys: [],\n  // Whether to sort the result list, by score\n  shouldSort: true,\n  // Default sort function: sort by ascending score, ascending index\n  sortFn: (a, b) => a.score === b.score ? a.idx < b.idx ? -1 : 1 : a.score < b.score ? -1 : 1\n};\nconst FuzzyOptions = {\n  // Approximately where in the text is the pattern expected to be found?\n  location: 0,\n  // At what point does the match algorithm give up. A threshold of '0.0' requires a perfect match\n  // (of both letters and location), a threshold of '1.0' would match anything.\n  threshold: 0.6,\n  // Determines how close the match must be to the fuzzy location (specified above).\n  // An exact letter match which is 'distance' characters away from the fuzzy location\n  // would score as a complete mismatch. A distance of '0' requires the match be at\n  // the exact location specified, a threshold of '1000' would require a perfect match\n  // to be within 800 characters of the fuzzy location to be found using a 0.8 threshold.\n  distance: 100\n};\nconst AdvancedOptions = {\n  // When `true`, it enables the use of unix-like search commands\n  useExtendedSearch: false,\n  // The get function to use when fetching an object's properties.\n  // The default will search nested paths *ie foo.bar.baz*\n  getFn: get,\n  // When `true`, search will ignore `location` and `distance`, so it won't matter\n  // where in the string the pattern appears.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#fuzziness-score\n  ignoreLocation: false,\n  // When `true`, the calculation for the relevance score (used for sorting) will\n  // ignore the field-length norm.\n  // More info: https://fusejs.io/concepts/scoring-theory.html#field-length-norm\n  ignoreFieldNorm: false\n};\nvar Config = { ...BasicOptions,\n  ...MatchOptions,\n  ...FuzzyOptions,\n  ...AdvancedOptions\n};\nconst SPACE = /[^ ]+/g; // Field-length norm: the shorter the field, the higher the weight.\n// Set to 3 decimals to reduce index size.\n\nfunction norm(mantissa = 3) {\n  const cache = new Map();\n  const m = Math.pow(10, mantissa);\n  return {\n    get(value) {\n      const numTokens = value.match(SPACE).length;\n\n      if (cache.has(numTokens)) {\n        return cache.get(numTokens);\n      }\n\n      const norm = 1 / Math.sqrt(numTokens); // In place of `toFixed(mantissa)`, for faster computation\n\n      const n = parseFloat(Math.round(norm * m) / m);\n      cache.set(numTokens, n);\n      return n;\n    },\n\n    clear() {\n      cache.clear();\n    }\n\n  };\n}\n\nclass FuseIndex {\n  constructor({\n    getFn = Config.getFn\n  } = {}) {\n    this.norm = norm(3);\n    this.getFn = getFn;\n    this.isCreated = false;\n    this.setIndexRecords();\n  }\n\n  setSources(docs = []) {\n    this.docs = docs;\n  }\n\n  setIndexRecords(records = []) {\n    this.records = records;\n  }\n\n  setKeys(keys = []) {\n    this.keys = keys;\n    this._keysMap = {};\n    keys.forEach((key, idx) => {\n      this._keysMap[key.id] = idx;\n    });\n  }\n\n  create() {\n    if (this.isCreated || !this.docs.length) {\n      return;\n    }\n\n    this.isCreated = true; // List is Array<String>\n\n    if (isString(this.docs[0])) {\n      this.docs.forEach((doc, docIndex) => {\n        this._addString(doc, docIndex);\n      });\n    } else {\n      // List is Array<Object>\n      this.docs.forEach((doc, docIndex) => {\n        this._addObject(doc, docIndex);\n      });\n    }\n\n    this.norm.clear();\n  } // Adds a doc to the end of the index\n\n\n  add(doc) {\n    const idx = this.size();\n\n    if (isString(doc)) {\n      this._addString(doc, idx);\n    } else {\n      this._addObject(doc, idx);\n    }\n  } // Removes the doc at the specified index of the index\n\n\n  removeAt(idx) {\n    this.records.splice(idx, 1); // Change ref index of every subsquent doc\n\n    for (let i = idx, len = this.size(); i < len; i += 1) {\n      this.records[i].i -= 1;\n    }\n  }\n\n  getValueForItemAtKeyId(item, keyId) {\n    return item[this._keysMap[keyId]];\n  }\n\n  size() {\n    return this.records.length;\n  }\n\n  _addString(doc, docIndex) {\n    if (!isDefined(doc) || isBlank(doc)) {\n      return;\n    }\n\n    let record = {\n      v: doc,\n      i: docIndex,\n      n: this.norm.get(doc)\n    };\n    this.records.push(record);\n  }\n\n  _addObject(doc, docIndex) {\n    let record = {\n      i: docIndex,\n      $: {}\n    }; // Iterate over every key (i.e, path), and fetch the value at that key\n\n    this.keys.forEach((key, keyIndex) => {\n      // console.log(key)\n      let value = this.getFn(doc, key.path);\n\n      if (!isDefined(value)) {\n        return;\n      }\n\n      if (isArray(value)) {\n        let subRecords = [];\n        const stack = [{\n          nestedArrIndex: -1,\n          value\n        }];\n\n        while (stack.length) {\n          const {\n            nestedArrIndex,\n            value\n          } = stack.pop();\n\n          if (!isDefined(value)) {\n            continue;\n          }\n\n          if (isString(value) && !isBlank(value)) {\n            let subRecord = {\n              v: value,\n              i: nestedArrIndex,\n              n: this.norm.get(value)\n            };\n            subRecords.push(subRecord);\n          } else if (isArray(value)) {\n            value.forEach((item, k) => {\n              stack.push({\n                nestedArrIndex: k,\n                value: item\n              });\n            });\n          }\n        }\n\n        record.$[keyIndex] = subRecords;\n      } else if (!isBlank(value)) {\n        let subRecord = {\n          v: value,\n          n: this.norm.get(value)\n        };\n        record.$[keyIndex] = subRecord;\n      }\n    });\n    this.records.push(record);\n  }\n\n  toJSON() {\n    return {\n      keys: this.keys,\n      records: this.records\n    };\n  }\n\n}\n\nfunction createIndex(keys, docs, {\n  getFn = Config.getFn\n} = {}) {\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys.map(createKey));\n  myIndex.setSources(docs);\n  myIndex.create();\n  return myIndex;\n}\n\nfunction parseIndex(data, {\n  getFn = Config.getFn\n} = {}) {\n  const {\n    keys,\n    records\n  } = data;\n  const myIndex = new FuseIndex({\n    getFn\n  });\n  myIndex.setKeys(keys);\n  myIndex.setIndexRecords(records);\n  return myIndex;\n}\n\nfunction computeScore(pattern, {\n  errors = 0,\n  currentLocation = 0,\n  expectedLocation = 0,\n  distance = Config.distance,\n  ignoreLocation = Config.ignoreLocation\n} = {}) {\n  const accuracy = errors / pattern.length;\n\n  if (ignoreLocation) {\n    return accuracy;\n  }\n\n  const proximity = Math.abs(expectedLocation - currentLocation);\n\n  if (!distance) {\n    // Dodge divide by zero error.\n    return proximity ? 1.0 : accuracy;\n  }\n\n  return accuracy + proximity / distance;\n}\n\nfunction convertMaskToIndices(matchmask = [], minMatchCharLength = Config.minMatchCharLength) {\n  let indices = [];\n  let start = -1;\n  let end = -1;\n  let i = 0;\n\n  for (let len = matchmask.length; i < len; i += 1) {\n    let match = matchmask[i];\n\n    if (match && start === -1) {\n      start = i;\n    } else if (!match && start !== -1) {\n      end = i - 1;\n\n      if (end - start + 1 >= minMatchCharLength) {\n        indices.push([start, end]);\n      }\n\n      start = -1;\n    }\n  } // (i-1 - start) + 1 => i - start\n\n\n  if (matchmask[i - 1] && i - start >= minMatchCharLength) {\n    indices.push([start, i - 1]);\n  }\n\n  return indices;\n} // Machine word size\n\n\nconst MAX_BITS = 32;\n\nfunction search(text, pattern, patternAlphabet, {\n  location = Config.location,\n  distance = Config.distance,\n  threshold = Config.threshold,\n  findAllMatches = Config.findAllMatches,\n  minMatchCharLength = Config.minMatchCharLength,\n  includeMatches = Config.includeMatches,\n  ignoreLocation = Config.ignoreLocation\n} = {}) {\n  if (pattern.length > MAX_BITS) {\n    throw new Error(PATTERN_LENGTH_TOO_LARGE(MAX_BITS));\n  }\n\n  const patternLen = pattern.length; // Set starting location at beginning text and initialize the alphabet.\n\n  const textLen = text.length; // Handle the case when location > text.length\n\n  const expectedLocation = Math.max(0, Math.min(location, textLen)); // Highest score beyond which we give up.\n\n  let currentThreshold = threshold; // Is there a nearby exact match? (speedup)\n\n  let bestLocation = expectedLocation; // Performance: only computer matches when the minMatchCharLength > 1\n  // OR if `includeMatches` is true.\n\n  const computeMatches = minMatchCharLength > 1 || includeMatches; // A mask of the matches, used for building the indices\n\n  const matchMask = computeMatches ? Array(textLen) : [];\n  let index; // Get all exact matches, here for speed up\n\n  while ((index = text.indexOf(pattern, bestLocation)) > -1) {\n    let score = computeScore(pattern, {\n      currentLocation: index,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n    currentThreshold = Math.min(score, currentThreshold);\n    bestLocation = index + patternLen;\n\n    if (computeMatches) {\n      let i = 0;\n\n      while (i < patternLen) {\n        matchMask[index + i] = 1;\n        i += 1;\n      }\n    }\n  } // Reset the best location\n\n\n  bestLocation = -1;\n  let lastBitArr = [];\n  let finalScore = 1;\n  let binMax = patternLen + textLen;\n  const mask = 1 << patternLen - 1;\n\n  for (let i = 0; i < patternLen; i += 1) {\n    // Scan for the best match; each iteration allows for one more error.\n    // Run a binary search to determine how far from the match location we can stray\n    // at this error level.\n    let binMin = 0;\n    let binMid = binMax;\n\n    while (binMin < binMid) {\n      const score = computeScore(pattern, {\n        errors: i,\n        currentLocation: expectedLocation + binMid,\n        expectedLocation,\n        distance,\n        ignoreLocation\n      });\n\n      if (score <= currentThreshold) {\n        binMin = binMid;\n      } else {\n        binMax = binMid;\n      }\n\n      binMid = Math.floor((binMax - binMin) / 2 + binMin);\n    } // Use the result from this iteration as the maximum for the next.\n\n\n    binMax = binMid;\n    let start = Math.max(1, expectedLocation - binMid + 1);\n    let finish = findAllMatches ? textLen : Math.min(expectedLocation + binMid, textLen) + patternLen; // Initialize the bit array\n\n    let bitArr = Array(finish + 2);\n    bitArr[finish + 1] = (1 << i) - 1;\n\n    for (let j = finish; j >= start; j -= 1) {\n      let currentLocation = j - 1;\n      let charMatch = patternAlphabet[text.charAt(currentLocation)];\n\n      if (computeMatches) {\n        // Speed up: quick bool to int conversion (i.e, `charMatch ? 1 : 0`)\n        matchMask[currentLocation] = +!!charMatch;\n      } // First pass: exact match\n\n\n      bitArr[j] = (bitArr[j + 1] << 1 | 1) & charMatch; // Subsequent passes: fuzzy match\n\n      if (i) {\n        bitArr[j] |= (lastBitArr[j + 1] | lastBitArr[j]) << 1 | 1 | lastBitArr[j + 1];\n      }\n\n      if (bitArr[j] & mask) {\n        finalScore = computeScore(pattern, {\n          errors: i,\n          currentLocation,\n          expectedLocation,\n          distance,\n          ignoreLocation\n        }); // This match will almost certainly be better than any existing match.\n        // But check anyway.\n\n        if (finalScore <= currentThreshold) {\n          // Indeed it is\n          currentThreshold = finalScore;\n          bestLocation = currentLocation; // Already passed `loc`, downhill from here on in.\n\n          if (bestLocation <= expectedLocation) {\n            break;\n          } // When passing `bestLocation`, don't exceed our current distance from `expectedLocation`.\n\n\n          start = Math.max(1, 2 * expectedLocation - bestLocation);\n        }\n      }\n    } // No hope for a (better) match at greater error levels.\n\n\n    const score = computeScore(pattern, {\n      errors: i + 1,\n      currentLocation: expectedLocation,\n      expectedLocation,\n      distance,\n      ignoreLocation\n    });\n\n    if (score > currentThreshold) {\n      break;\n    }\n\n    lastBitArr = bitArr;\n  }\n\n  const result = {\n    isMatch: bestLocation >= 0,\n    // Count exact matches (those with a score of 0) to be \"almost\" exact\n    score: Math.max(0.001, finalScore)\n  };\n\n  if (computeMatches) {\n    const indices = convertMaskToIndices(matchMask, minMatchCharLength);\n\n    if (!indices.length) {\n      result.isMatch = false;\n    } else if (includeMatches) {\n      result.indices = indices;\n    }\n  }\n\n  return result;\n}\n\nfunction createPatternAlphabet(pattern) {\n  let mask = {};\n\n  for (let i = 0, len = pattern.length; i < len; i += 1) {\n    const char = pattern.charAt(i);\n    mask[char] = (mask[char] || 0) | 1 << len - i - 1;\n  }\n\n  return mask;\n}\n\nclass BitapSearch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive,\n    ignoreLocation = Config.ignoreLocation\n  } = {}) {\n    this.options = {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.chunks = [];\n\n    if (!this.pattern.length) {\n      return;\n    }\n\n    const addChunk = (pattern, startIndex) => {\n      this.chunks.push({\n        pattern,\n        alphabet: createPatternAlphabet(pattern),\n        startIndex\n      });\n    };\n\n    const len = this.pattern.length;\n\n    if (len > MAX_BITS) {\n      let i = 0;\n      const remainder = len % MAX_BITS;\n      const end = len - remainder;\n\n      while (i < end) {\n        addChunk(this.pattern.substr(i, MAX_BITS), i);\n        i += MAX_BITS;\n      }\n\n      if (remainder) {\n        const startIndex = len - MAX_BITS;\n        addChunk(this.pattern.substr(startIndex), startIndex);\n      }\n    } else {\n      addChunk(this.pattern, 0);\n    }\n  }\n\n  searchIn(text) {\n    const {\n      isCaseSensitive,\n      includeMatches\n    } = this.options;\n\n    if (!isCaseSensitive) {\n      text = text.toLowerCase();\n    } // Exact match\n\n\n    if (this.pattern === text) {\n      let result = {\n        isMatch: true,\n        score: 0\n      };\n\n      if (includeMatches) {\n        result.indices = [[0, text.length - 1]];\n      }\n\n      return result;\n    } // Otherwise, use Bitap algorithm\n\n\n    const {\n      location,\n      distance,\n      threshold,\n      findAllMatches,\n      minMatchCharLength,\n      ignoreLocation\n    } = this.options;\n    let allIndices = [];\n    let totalScore = 0;\n    let hasMatches = false;\n    this.chunks.forEach(({\n      pattern,\n      alphabet,\n      startIndex\n    }) => {\n      const {\n        isMatch,\n        score,\n        indices\n      } = search(text, pattern, alphabet, {\n        location: location + startIndex,\n        distance,\n        threshold,\n        findAllMatches,\n        minMatchCharLength,\n        includeMatches,\n        ignoreLocation\n      });\n\n      if (isMatch) {\n        hasMatches = true;\n      }\n\n      totalScore += score;\n\n      if (isMatch && indices) {\n        allIndices = [...allIndices, ...indices];\n      }\n    });\n    let result = {\n      isMatch: hasMatches,\n      score: hasMatches ? totalScore / this.chunks.length : 1\n    };\n\n    if (hasMatches && includeMatches) {\n      result.indices = allIndices;\n    }\n\n    return result;\n  }\n\n}\n\nclass BaseMatch {\n  constructor(pattern) {\n    this.pattern = pattern;\n  }\n\n  static isMultiMatch(pattern) {\n    return getMatch(pattern, this.multiRegex);\n  }\n\n  static isSingleMatch(pattern) {\n    return getMatch(pattern, this.singleRegex);\n  }\n\n  search() {}\n\n}\n\nfunction getMatch(pattern, exp) {\n  const matches = pattern.match(exp);\n  return matches ? matches[1] : null;\n} // Token: 'file\n\n\nclass ExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'exact';\n  }\n\n  static get multiRegex() {\n    return /^=\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^=(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text === this.pattern;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !fire\n\n\nclass InverseExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)$/;\n  }\n\n  search(text) {\n    const index = text.indexOf(this.pattern);\n    const isMatch = index === -1;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: ^file\n\n\nclass PrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, this.pattern.length - 1]\n    };\n  }\n\n} // Token: !^fire\n\n\nclass InversePrefixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-prefix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\\^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^!\\^(.*)$/;\n  }\n\n  search(text) {\n    const isMatch = !text.startsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n} // Token: .file$\n\n\nclass SuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [text.length - this.pattern.length, text.length - 1]\n    };\n  }\n\n} // Token: !.file$\n\n\nclass InverseSuffixExactMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'inverse-suffix-exact';\n  }\n\n  static get multiRegex() {\n    return /^!\"(.*)\"\\$$/;\n  }\n\n  static get singleRegex() {\n    return /^!(.*)\\$$/;\n  }\n\n  search(text) {\n    const isMatch = !text.endsWith(this.pattern);\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices: [0, text.length - 1]\n    };\n  }\n\n}\n\nclass FuzzyMatch extends BaseMatch {\n  constructor(pattern, {\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance,\n    includeMatches = Config.includeMatches,\n    findAllMatches = Config.findAllMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    isCaseSensitive = Config.isCaseSensitive,\n    ignoreLocation = Config.ignoreLocation\n  } = {}) {\n    super(pattern);\n    this._bitapSearch = new BitapSearch(pattern, {\n      location,\n      threshold,\n      distance,\n      includeMatches,\n      findAllMatches,\n      minMatchCharLength,\n      isCaseSensitive,\n      ignoreLocation\n    });\n  }\n\n  static get type() {\n    return 'fuzzy';\n  }\n\n  static get multiRegex() {\n    return /^\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^(.*)$/;\n  }\n\n  search(text) {\n    return this._bitapSearch.searchIn(text);\n  }\n\n} // Token: 'file\n\n\nclass IncludeMatch extends BaseMatch {\n  constructor(pattern) {\n    super(pattern);\n  }\n\n  static get type() {\n    return 'include';\n  }\n\n  static get multiRegex() {\n    return /^'\"(.*)\"$/;\n  }\n\n  static get singleRegex() {\n    return /^'(.*)$/;\n  }\n\n  search(text) {\n    let location = 0;\n    let index;\n    const indices = [];\n    const patternLen = this.pattern.length; // Get all exact matches\n\n    while ((index = text.indexOf(this.pattern, location)) > -1) {\n      location = index + patternLen;\n      indices.push([index, location - 1]);\n    }\n\n    const isMatch = !!indices.length;\n    return {\n      isMatch,\n      score: isMatch ? 0 : 1,\n      indices\n    };\n  }\n\n} // ❗Order is important. DO NOT CHANGE.\n\n\nconst searchers = [ExactMatch, IncludeMatch, PrefixExactMatch, InversePrefixExactMatch, InverseSuffixExactMatch, SuffixExactMatch, InverseExactMatch, FuzzyMatch];\nconst searchersLen = searchers.length; // Regex to split by spaces, but keep anything in quotes together\n\nconst SPACE_RE = / +(?=([^\\\"]*\\\"[^\\\"]*\\\")*[^\\\"]*$)/;\nconst OR_TOKEN = '|'; // Return a 2D array representation of the query, for simpler parsing.\n// Example:\n// \"^core go$ | rb$ | py$ xy$\" => [[\"^core\", \"go$\"], [\"rb$\"], [\"py$\", \"xy$\"]]\n\nfunction parseQuery(pattern, options = {}) {\n  return pattern.split(OR_TOKEN).map(item => {\n    let query = item.trim().split(SPACE_RE).filter(item => item && !!item.trim());\n    let results = [];\n\n    for (let i = 0, len = query.length; i < len; i += 1) {\n      const queryItem = query[i]; // 1. Handle multiple query match (i.e, once that are quoted, like `\"hello world\"`)\n\n      let found = false;\n      let idx = -1;\n\n      while (!found && ++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isMultiMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          found = true;\n        }\n      }\n\n      if (found) {\n        continue;\n      } // 2. Handle single query matches (i.e, once that are *not* quoted)\n\n\n      idx = -1;\n\n      while (++idx < searchersLen) {\n        const searcher = searchers[idx];\n        let token = searcher.isSingleMatch(queryItem);\n\n        if (token) {\n          results.push(new searcher(token, options));\n          break;\n        }\n      }\n    }\n\n    return results;\n  });\n} // These extended matchers can return an array of matches, as opposed\n// to a singl match\n\n\nconst MultiMatchSet = new Set([FuzzyMatch.type, IncludeMatch.type]);\n/**\n * Command-like searching\n * ======================\n *\n * Given multiple search terms delimited by spaces.e.g. `^jscript .python$ ruby !java`,\n * search in a given text.\n *\n * Search syntax:\n *\n * | Token       | Match type                 | Description                            |\n * | ----------- | -------------------------- | -------------------------------------- |\n * | `jscript`   | fuzzy-match                | Items that fuzzy match `jscript`       |\n * | `=scheme`   | exact-match                | Items that are `scheme`                |\n * | `'python`   | include-match              | Items that include `python`            |\n * | `!ruby`     | inverse-exact-match        | Items that do not include `ruby`       |\n * | `^java`     | prefix-exact-match         | Items that start with `java`           |\n * | `!^earlang` | inverse-prefix-exact-match | Items that do not start with `earlang` |\n * | `.js$`      | suffix-exact-match         | Items that end with `.js`              |\n * | `!.go$`     | inverse-suffix-exact-match | Items that do not end with `.go`       |\n *\n * A single pipe character acts as an OR operator. For example, the following\n * query matches entries that start with `core` and end with either`go`, `rb`,\n * or`py`.\n *\n * ```\n * ^core go$ | rb$ | py$\n * ```\n */\n\nclass ExtendedSearch {\n  constructor(pattern, {\n    isCaseSensitive = Config.isCaseSensitive,\n    includeMatches = Config.includeMatches,\n    minMatchCharLength = Config.minMatchCharLength,\n    ignoreLocation = Config.ignoreLocation,\n    findAllMatches = Config.findAllMatches,\n    location = Config.location,\n    threshold = Config.threshold,\n    distance = Config.distance\n  } = {}) {\n    this.query = null;\n    this.options = {\n      isCaseSensitive,\n      includeMatches,\n      minMatchCharLength,\n      findAllMatches,\n      ignoreLocation,\n      location,\n      threshold,\n      distance\n    };\n    this.pattern = isCaseSensitive ? pattern : pattern.toLowerCase();\n    this.query = parseQuery(this.pattern, this.options);\n  }\n\n  static condition(_, options) {\n    return options.useExtendedSearch;\n  }\n\n  searchIn(text) {\n    const query = this.query;\n\n    if (!query) {\n      return {\n        isMatch: false,\n        score: 1\n      };\n    }\n\n    const {\n      includeMatches,\n      isCaseSensitive\n    } = this.options;\n    text = isCaseSensitive ? text : text.toLowerCase();\n    let numMatches = 0;\n    let allIndices = [];\n    let totalScore = 0; // ORs\n\n    for (let i = 0, qLen = query.length; i < qLen; i += 1) {\n      const searchers = query[i]; // Reset indices\n\n      allIndices.length = 0;\n      numMatches = 0; // ANDs\n\n      for (let j = 0, pLen = searchers.length; j < pLen; j += 1) {\n        const searcher = searchers[j];\n        const {\n          isMatch,\n          indices,\n          score\n        } = searcher.search(text);\n\n        if (isMatch) {\n          numMatches += 1;\n          totalScore += score;\n\n          if (includeMatches) {\n            const type = searcher.constructor.type;\n\n            if (MultiMatchSet.has(type)) {\n              allIndices = [...allIndices, ...indices];\n            } else {\n              allIndices.push(indices);\n            }\n          }\n        } else {\n          totalScore = 0;\n          numMatches = 0;\n          allIndices.length = 0;\n          break;\n        }\n      } // OR condition, so if TRUE, return\n\n\n      if (numMatches) {\n        let result = {\n          isMatch: true,\n          score: totalScore / numMatches\n        };\n\n        if (includeMatches) {\n          result.indices = allIndices;\n        }\n\n        return result;\n      }\n    } // Nothing was matched\n\n\n    return {\n      isMatch: false,\n      score: 1\n    };\n  }\n\n}\n\nconst registeredSearchers = [];\n\nfunction register(...args) {\n  registeredSearchers.push(...args);\n}\n\nfunction createSearcher(pattern, options) {\n  for (let i = 0, len = registeredSearchers.length; i < len; i += 1) {\n    let searcherClass = registeredSearchers[i];\n\n    if (searcherClass.condition(pattern, options)) {\n      return new searcherClass(pattern, options);\n    }\n  }\n\n  return new BitapSearch(pattern, options);\n}\n\nconst LogicalOperator = {\n  AND: '$and',\n  OR: '$or'\n};\nconst KeyType = {\n  PATH: '$path',\n  PATTERN: '$val'\n};\n\nconst isExpression = query => !!(query[LogicalOperator.AND] || query[LogicalOperator.OR]);\n\nconst isPath = query => !!query[KeyType.PATH];\n\nconst isLeaf = query => !isArray(query) && isObject(query) && !isExpression(query);\n\nconst convertToExplicit = query => ({\n  [LogicalOperator.AND]: Object.keys(query).map(key => ({\n    [key]: query[key]\n  }))\n}); // When `auto` is `true`, the parse function will infer and initialize and add\n// the appropriate `Searcher` instance\n\n\nfunction parse(query, options, {\n  auto = true\n} = {}) {\n  const next = query => {\n    let keys = Object.keys(query);\n    const isQueryPath = isPath(query);\n\n    if (!isQueryPath && keys.length > 1 && !isExpression(query)) {\n      return next(convertToExplicit(query));\n    }\n\n    if (isLeaf(query)) {\n      const key = isQueryPath ? query[KeyType.PATH] : keys[0];\n      const pattern = isQueryPath ? query[KeyType.PATTERN] : query[key];\n\n      if (!isString(pattern)) {\n        throw new Error(LOGICAL_SEARCH_INVALID_QUERY_FOR_KEY(key));\n      }\n\n      const obj = {\n        keyId: createKeyId(key),\n        pattern\n      };\n\n      if (auto) {\n        obj.searcher = createSearcher(pattern, options);\n      }\n\n      return obj;\n    }\n\n    let node = {\n      children: [],\n      operator: keys[0]\n    };\n    keys.forEach(key => {\n      const value = query[key];\n\n      if (isArray(value)) {\n        value.forEach(item => {\n          node.children.push(next(item));\n        });\n      }\n    });\n    return node;\n  };\n\n  if (!isExpression(query)) {\n    query = convertToExplicit(query);\n  }\n\n  return next(query);\n} // Practical scoring function\n\n\nfunction computeScore$1(results, {\n  ignoreFieldNorm = Config.ignoreFieldNorm\n}) {\n  results.forEach(result => {\n    let totalScore = 1;\n    result.matches.forEach(({\n      key,\n      norm,\n      score\n    }) => {\n      const weight = key ? key.weight : null;\n      totalScore *= Math.pow(score === 0 && weight ? Number.EPSILON : score, (weight || 1) * (ignoreFieldNorm ? 1 : norm));\n    });\n    result.score = totalScore;\n  });\n}\n\nfunction transformMatches(result, data) {\n  const matches = result.matches;\n  data.matches = [];\n\n  if (!isDefined(matches)) {\n    return;\n  }\n\n  matches.forEach(match => {\n    if (!isDefined(match.indices) || !match.indices.length) {\n      return;\n    }\n\n    const {\n      indices,\n      value\n    } = match;\n    let obj = {\n      indices,\n      value\n    };\n\n    if (match.key) {\n      obj.key = match.key.src;\n    }\n\n    if (match.idx > -1) {\n      obj.refIndex = match.idx;\n    }\n\n    data.matches.push(obj);\n  });\n}\n\nfunction transformScore(result, data) {\n  data.score = result.score;\n}\n\nfunction format(results, docs, {\n  includeMatches = Config.includeMatches,\n  includeScore = Config.includeScore\n} = {}) {\n  const transformers = [];\n  if (includeMatches) transformers.push(transformMatches);\n  if (includeScore) transformers.push(transformScore);\n  return results.map(result => {\n    const {\n      idx\n    } = result;\n    const data = {\n      item: docs[idx],\n      refIndex: idx\n    };\n\n    if (transformers.length) {\n      transformers.forEach(transformer => {\n        transformer(result, data);\n      });\n    }\n\n    return data;\n  });\n}\n\nclass Fuse {\n  constructor(docs, options = {}, index) {\n    this.options = { ...Config,\n      ...options\n    };\n\n    if (this.options.useExtendedSearch && !true) {\n      throw new Error(EXTENDED_SEARCH_UNAVAILABLE);\n    }\n\n    this._keyStore = new KeyStore(this.options.keys);\n    this.setCollection(docs, index);\n  }\n\n  setCollection(docs, index) {\n    this._docs = docs;\n\n    if (index && !(index instanceof FuseIndex)) {\n      throw new Error(INCORRECT_INDEX_TYPE);\n    }\n\n    this._myIndex = index || createIndex(this.options.keys, this._docs, {\n      getFn: this.options.getFn\n    });\n  }\n\n  add(doc) {\n    if (!isDefined(doc)) {\n      return;\n    }\n\n    this._docs.push(doc);\n\n    this._myIndex.add(doc);\n  }\n\n  remove(predicate = () => false) {\n    const results = [];\n\n    for (let i = 0, len = this._docs.length; i < len; i += 1) {\n      const doc = this._docs[i];\n\n      if (predicate(doc, i)) {\n        this.removeAt(i);\n        i -= 1;\n        len -= 1;\n        results.push(doc);\n      }\n    }\n\n    return results;\n  }\n\n  removeAt(idx) {\n    this._docs.splice(idx, 1);\n\n    this._myIndex.removeAt(idx);\n  }\n\n  getIndex() {\n    return this._myIndex;\n  }\n\n  search(query, {\n    limit = -1\n  } = {}) {\n    const {\n      includeMatches,\n      includeScore,\n      shouldSort,\n      sortFn,\n      ignoreFieldNorm\n    } = this.options;\n    let results = isString(query) ? isString(this._docs[0]) ? this._searchStringList(query) : this._searchObjectList(query) : this._searchLogical(query);\n    computeScore$1(results, {\n      ignoreFieldNorm\n    });\n\n    if (shouldSort) {\n      results.sort(sortFn);\n    }\n\n    if (isNumber(limit) && limit > -1) {\n      results = results.slice(0, limit);\n    }\n\n    return format(results, this._docs, {\n      includeMatches,\n      includeScore\n    });\n  }\n\n  _searchStringList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      records\n    } = this._myIndex;\n    const results = []; // Iterate over every string in the index\n\n    records.forEach(({\n      v: text,\n      i: idx,\n      n: norm\n    }) => {\n      if (!isDefined(text)) {\n        return;\n      }\n\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        results.push({\n          item: text,\n          idx,\n          matches: [{\n            score,\n            value: text,\n            norm,\n            indices\n          }]\n        });\n      }\n    });\n    return results;\n  }\n\n  _searchLogical(query) {\n    const expression = parse(query, this.options);\n\n    const evaluate = (node, item, idx) => {\n      if (!node.children) {\n        const {\n          keyId,\n          searcher\n        } = node;\n\n        const matches = this._findMatches({\n          key: this._keyStore.get(keyId),\n          value: this._myIndex.getValueForItemAtKeyId(item, keyId),\n          searcher\n        });\n\n        if (matches && matches.length) {\n          return [{\n            idx,\n            item,\n            matches\n          }];\n        }\n\n        return [];\n      }\n      /*eslint indent: [2, 2, {\"SwitchCase\": 1}]*/\n\n\n      switch (node.operator) {\n        case LogicalOperator.AND:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n              } else {\n                return [];\n              }\n            }\n\n            return res;\n          }\n\n        case LogicalOperator.OR:\n          {\n            const res = [];\n\n            for (let i = 0, len = node.children.length; i < len; i += 1) {\n              const child = node.children[i];\n              const result = evaluate(child, item, idx);\n\n              if (result.length) {\n                res.push(...result);\n                break;\n              }\n            }\n\n            return res;\n          }\n      }\n    };\n\n    const records = this._myIndex.records;\n    const resultMap = {};\n    const results = [];\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (isDefined(item)) {\n        let expResults = evaluate(expression, item, idx);\n\n        if (expResults.length) {\n          // Dedupe when adding\n          if (!resultMap[idx]) {\n            resultMap[idx] = {\n              idx,\n              item,\n              matches: []\n            };\n            results.push(resultMap[idx]);\n          }\n\n          expResults.forEach(({\n            matches\n          }) => {\n            resultMap[idx].matches.push(...matches);\n          });\n        }\n      }\n    });\n    return results;\n  }\n\n  _searchObjectList(query) {\n    const searcher = createSearcher(query, this.options);\n    const {\n      keys,\n      records\n    } = this._myIndex;\n    const results = []; // List is Array<Object>\n\n    records.forEach(({\n      $: item,\n      i: idx\n    }) => {\n      if (!isDefined(item)) {\n        return;\n      }\n\n      let matches = []; // Iterate over every key (i.e, path), and fetch the value at that key\n\n      keys.forEach((key, keyIndex) => {\n        matches.push(...this._findMatches({\n          key,\n          value: item[keyIndex],\n          searcher\n        }));\n      });\n\n      if (matches.length) {\n        results.push({\n          idx,\n          item,\n          matches\n        });\n      }\n    });\n    return results;\n  }\n\n  _findMatches({\n    key,\n    value,\n    searcher\n  }) {\n    if (!isDefined(value)) {\n      return [];\n    }\n\n    let matches = [];\n\n    if (isArray(value)) {\n      value.forEach(({\n        v: text,\n        i: idx,\n        n: norm\n      }) => {\n        if (!isDefined(text)) {\n          return;\n        }\n\n        const {\n          isMatch,\n          score,\n          indices\n        } = searcher.searchIn(text);\n\n        if (isMatch) {\n          matches.push({\n            score,\n            key,\n            value: text,\n            idx,\n            norm,\n            indices\n          });\n        }\n      });\n    } else {\n      const {\n        v: text,\n        n: norm\n      } = value;\n      const {\n        isMatch,\n        score,\n        indices\n      } = searcher.searchIn(text);\n\n      if (isMatch) {\n        matches.push({\n          score,\n          key,\n          value: text,\n          norm,\n          indices\n        });\n      }\n    }\n\n    return matches;\n  }\n\n}\n\nFuse.version = '6.4.6';\nFuse.createIndex = createIndex;\nFuse.parseIndex = parseIndex;\nFuse.config = Config;\n{\n  Fuse.parseQuery = parse;\n}\n{\n  register(ExtendedSearch);\n}\nvar dictZiWeb = {\n  \"a\": \"\",\n  \"ā\": \"吖锕錒\",\n  \"á\": \"嗄\",\n  \"ǎ\": \"\",\n  \"à\": \"\",\n  \"āi\": \"哎哀埃娭溾嗳銰锿噯諰鎄\",\n  \"ái\": \"啀娾捱皑凒隑嵦溰嘊敱敳皚磑癌\",\n  \"ǎi\": \"毐昹娾欸絠嗳矮蔼躷噯濭藹譪霭靄\",\n  \"ài\": \"艾伌欬爱砹硋堨焥隘嗌嗳塧嫒愛碍叆暧瑷僾噯壒嬡懓薆鴱懝曖璦賹餲皧瞹馤礙譺鑀鱫靉\",\n  \"ān\": \"安侒峖桉氨偣庵菴谙啽媕萻葊痷腤裺鹌蓭誝鞍鞌盦諳馣鮟盫鵪韽鶕\",\n  \"án\": \"玵啽雸儑\",\n  \"ǎn\": \"垵俺唵埯铵揞晻罯銨\",\n  \"àn\": \"厈屵屽犴岸咹按洝荌案胺豻堓隌晻暗貋儑錌闇黯\",\n  \"āng\": \"肮骯\",\n  \"áng\": \"卬岇昂昻\",\n  \"ǎng\": \"\",\n  \"àng\": \"枊盎醠\",\n  \"āo\": \"泑柪眑梎軪熝爊\",\n  \"áo\": \"敖厫隞嗷嗸嶅廒慠滶獓蔜遨骜摮獒璈磝墽翱聱螯翶謷謸翺鳌鏕鏖鰲鷔鼇\",\n  \"ǎo\": \"艹抝芺袄眑郩镺媪媼襖\",\n  \"ào\": \"岙扷抝坳垇岰柪傲奡軪奧嫯嶅慠澚隩墺嶴懊擙澳鏊驁\",\n  \"ba\": \"罷\",\n  \"bā\": \"丷八仈巴叭朳玐夿岜扷芭峇柭疤哱哵捌笆粑羓蚆釟豝鲃魞\",\n  \"bá\": \"叐犮抜妭拔茇炦癹胈菝詙跋軷颰魃鼥\",\n  \"bǎ\": \"钯鈀靶\",\n  \"bà\": \"坝弝爸皅垻跁鲃魞鲅鲌罷鮁鮊覇矲霸壩灞欛\",\n  \"bāi\": \"挀掰擘\",\n  \"bái\": \"白\",\n  \"bǎi\": \"百佰栢瓸捭竡粨絔摆擺襬\",\n  \"bài\": \"呗庍拝败拜唄敗猈稗粺薭贁韛\",\n  \"bān\": \"扳攽朌肦班般颁斑搬斒頒搫瘢鳻螌褩癍辬\",\n  \"bǎn\": \"阪坂岅昄板版瓪钣粄舨鈑蝂魬闆\",\n  \"bàn\": \"办半伴扮坢姅怑绊柈秚湴絆跘鉡靽辦瓣\",\n  \"bāng\": \"邦垹帮捠梆浜邫幇幚縍幫鞤\",\n  \"bǎng\": \"绑綁牓膀髈\",\n  \"bàng\": \"玤挷蚄傍棒棓硥谤塝搒稖蒡蛖蜯镑縍艕謗鎊\",\n  \"bāo\": \"勹包佨孢苞枹胞剝笣煲龅裦蕔褒襃闁齙\",\n  \"báo\": \"窇雹\",\n  \"bǎo\": \"宝怉饱保鸨宲珤堢媬葆寚飹飽褓駂鳵緥鴇賲藵寳寶靌\",\n  \"bào\": \"勽犳报怉抱豹趵铇菢蚫袌報鉋鲍骲髱虣鮑儤曓嚗曝爆犦忁鑤\",\n  \"bei\": \"呗唄\",\n  \"bēi\": \"陂卑杯柸盃庳桮悲揹棓椑碑鹎箄諀鞞藣鵯\",\n  \"běi\": \"鉳\",\n  \"bèi\": \"贝孛狈貝邶备昁杮牬苝郥钡俻倍悖狽偝偹梖珼鄁備僃惫棑棓焙琲軰辈愂碚禙蓓蛽犕褙誖鞁骳輩鋇憊糒鞴鐾\",\n  \"bēn\": \"泍贲栟喯犇賁锛漰錛蟦\",\n  \"běn\": \"夲本苯奙畚翉楍\",\n  \"bèn\": \"坋坌泍炃倴捹桳渀笨逩撪\",\n  \"bēng\": \"伻祊奟崩絣閍嗙嵭痭嘣綳繃\",\n  \"béng\": \"甮甭\",\n  \"běng\": \"埄埲菶琣琫綳繃鞛\",\n  \"bèng\": \"泵迸堋逬揼跰塴綳甏镚繃蹦鏰\",\n  \"bī\": \"皀屄偪毴逼楅榌豍螕鵖鲾鎞鰏\",\n  \"bí\": \"荸鼻嬶\",\n  \"bǐ\": \"匕比夶朼佊吡妣沘疕纰彼毞肶柀秕俾娝笔粃紕舭啚崥筆鄙聛貏\",\n  \"bì\": \"币必毕闬闭佖坒庇芘诐邲咇妼怭怶畁畀肶苾哔柲毖珌畐疪祕胇荜贲陛毙狴畢笓粊袐铋婢敝旇梐紴翍萆萞閇閈閉堛弼弻愊愎湢皕禆筚詖貱賁赑嗶彃滗滭煏痺痹睤睥腷蓖蓽蜌裨跸鉍閟飶幣弊熚獙碧稫箅箆綼蔽鄪馝幤潷獘罼襅駜髲壁嬖廦篦篳縪薜觱避鮅斃濞蹕鞞髀奰璧鄨鎞鏎饆繴襣襞鞸韠魓躃躄驆鶝朇贔鐴鷝鷩鼊\",\n  \"biān\": \"辺边炞砭笾猵编萹煸牑甂箯糄編臱蝙鞕獱邉鍽鳊邊鞭鯾鯿籓籩\",\n  \"biǎn\": \"贬疺窆匾貶惼揙碥稨褊糄鴘藊覵鶣\",\n  \"biàn\": \"卞弁忭抃汳汴苄釆变峅玣変昪覍徧缏遍閞辡緶艑諚辧辨辩辫辮辯變\",\n  \"biāo\": \"灬杓标飑骉髟彪淲猋脿颩僄墂幖摽滮蔈颮骠標熛膔膘麃瘭磦镖飚飙儦檦篻颷瀌藨謤爂臕贆鏢穮镳飈飆飊飇鑣驫\",\n  \"biáo\": \"嫑\",\n  \"biǎo\": \"表婊裱諘褾錶檦\",\n  \"biào\": \"俵摽鳔\",\n  \"biē\": \"柭憋蟞癟鳖鱉鼈虌龞\",\n  \"bié\": \"別柲莂蛂徶襒蟞蹩\",\n  \"biě\": \"癟\",\n  \"biè\": \"別彆\",\n  \"bīn\": \"汃邠玢砏宾彬梹傧斌椕滨缤槟瑸豩賓賔镔儐濒頻濱濵虨豳檳璸瀕霦繽鑌顮\",\n  \"bǐn\": \"\",\n  \"bìn\": \"摈殡膑髩儐擯鬂殯臏髌鬓髕鬢\",\n  \"bīng\": \"冫仌仒氷冰兵幷栟掤梹蛃絣槟鋲檳\",\n  \"bǐng\": \"丙邴陃怲抦秉苪昞昺柄炳饼眪偋屛寎棅琕禀稟鈵鉼鞆餅餠鞞鞸\",\n  \"bìng\": \"並併幷枋垪庰倂栤病窉竝偋傡寎摒誁鮩靐\",\n  \"bo\": \"啵蔔噃\",\n  \"bō\": \"癶拨波癷玻剝哱盋砵趵钵饽紴缽菠袰溊碆鉢僠嶓撥播餑磻礡蹳皪驋鱍\",\n  \"bó\": \"仢彴肑驳帛狛瓝苩侼柭胉郣亳挬浡瓟秡袯钹铂桲淿脖舶萡袹博殕渤葧鹁愽搏猼鉑鈸馎鲌僰榑煿牔箔膊艊誖馛駁踣鋍镈壆馞駮鮊穛襏謈嚗懪簙鎛餺鵓糪髆髉欂襮礴鑮\",\n  \"bǒ\": \"癷蚾跛\",\n  \"bò\": \"孹擗擘檗檘譒蘗\",\n  \"bū\": \"峬庯逋钸晡鈽誧餔錻鯆鵏\",\n  \"bú\": \"鳪轐醭\",\n  \"bǔ\": \"卟补哺捕捬補鸔\",\n  \"bù\": \"布佈吥步咘怖抪歩歨柨钚勏埔埗悑捗荹部埠婄瓿鈈廍蔀箁踄郶篰餢\",\n  \"cā\": \"嚓擦攃\",\n  \"cǎ\": \"礤礸\",\n  \"cà\": \"遪囃\",\n  \"cāi\": \"偲猜\",\n  \"cái\": \"才扐材财財裁纔\",\n  \"cǎi\": \"毝倸啋埰婇寀彩採棌睬跴綵踩\",\n  \"cài\": \"埰寀菜蔡縩\",\n  \"cān\": \"參叄飡骖叅喰湌傪嬠餐爘驂囋\",\n  \"cán\": \"残蚕惭殘慚摲蝅慙蠺蠶\",\n  \"cǎn\": \"惨朁慘憯穇篸黪黲\",\n  \"càn\": \"灿孱傪粲嘇摻儏澯薒燦璨謲鏒\",\n  \"cāng\": \"仓仺伧沧苍玱鸧倉舱傖凔嵢滄獊蒼瑲濸篬艙螥鶬\",\n  \"cáng\": \"匨臧欌鑶\",\n  \"càng\": \"賶\",\n  \"cāo\": \"撡操糙\",\n  \"cáo\": \"曺曹傮嘈嶆慒漕蓸槽褿艚螬鏪\",\n  \"cǎo\": \"屮艸草愺慅懆騲\",\n  \"cào\": \"肏鄵襙鼜\",\n  \"cè\": \"夨冊册厕恻拺测荝敇畟側厠笧粣萗廁惻測策萴筞筴蓛箣憡簎\",\n  \"cēn\": \"參叄叅嵾穇篸\",\n  \"cén\": \"岑汵埁涔笒\",\n  \"cēng\": \"噌\",\n  \"céng\": \"层曽層嶒橧竲驓\",\n  \"cèng\": \"蹭\",\n  \"cī\": \"呰呲玼疵趀偨跐縒骴髊蠀齹\",\n  \"cí\": \"词珁兹垐柌祠茨瓷粢詞辝慈甆辞磁雌鹚糍辤飺餈嬨濨薋鴜礠辭鷀鶿\",\n  \"cǐ\": \"此佌泚玼皉啙跐鮆\",\n  \"cì\": \"朿次佽刾庛茦栨莿絘蛓赐螆賜\",\n  \"cōng\": \"匆囪囱苁忩枞茐怱悤棇焧葱楤漗聡蓯蔥骢暰樅樬潨熜瑽璁聦聪瞛篵聰蟌鍯繱鏓鏦騘驄\",\n  \"cóng\": \"丛徔従婃孮徖從悰淙琮碂慒漎潀潈誴賨賩樷錝藂叢灇欉爜\",\n  \"cǒng\": \"\",\n  \"còng\": \"愡憁謥\",\n  \"cōu\": \"\",\n  \"cóu\": \"\",\n  \"cǒu\": \"\",\n  \"còu\": \"凑湊傶楱腠辏輳\",\n  \"cū\": \"怚粗觕麁麄橻麆麤\",\n  \"cú\": \"徂殂\",\n  \"cǔ\": \"皻\",\n  \"cù\": \"促猝脨媨瘄蔟誎趗噈憱踧醋瘯踿簇縬趨鼀蹙蹵蹴顣\",\n  \"cuān\": \"汆撺鋑镩蹿攛躥鑹\",\n  \"cuán\": \"濽櫕巑攢灒欑穳\",\n  \"cuàn\": \"窜殩熶窽篡窾簒竄爨\",\n  \"cuī\": \"隹崔脺催凗嵟缞墔慛摧榱漼槯磪縗鏙\",\n  \"cuǐ\": \"漼熣璀趡皠\",\n  \"cuì\": \"伜忰疩倅粋紣翆脃脆啐啛崒悴淬萃椊毳焠琗瘁粹綷翠膵膬濢竁襊顇臎\",\n  \"cūn\": \"邨村皴踆澊竴膥\",\n  \"cún\": \"存侟拵壿澊\",\n  \"cǔn\": \"刌忖\",\n  \"cùn\": \"寸吋籿\",\n  \"cuō\": \"搓瑳遳磋蹉醝鎈\",\n  \"cuó\": \"虘嵯嵳痤睉矬蒫瘥蔖鹾酂鹺酇\",\n  \"cuǒ\": \"脞\",\n  \"cuò\": \"剉剒厝夎挫莡莝庴措逪锉蓌错縒諎銼錯\",\n  \"chā\": \"扠扱芆臿挿偛嗏插揷馇銟锸艖疀嚓鍤鎈餷\",\n  \"chá\": \"秅苴垞査茬茶捈梌嵖搽猹靫楂槎詧察摖檫\",\n  \"chǎ\": \"紁蹅镲鑔\",\n  \"chà\": \"仛奼汊岔侘衩诧剎姹紁詫\",\n  \"chāi\": \"芆肞钗釵\",\n  \"chái\": \"犲侪柴豺祡喍儕\",\n  \"chǎi\": \"茝\",\n  \"chài\": \"虿袃訍瘥蠆囆\",\n  \"chān\": \"辿觇梴搀覘裧摻緂鋓幨襜攙\",\n  \"chán\": \"苂婵谗單孱棎湹禅馋煘缠僝嶃嶄獑蝉誗鋋儃嬋廛潹潺緾澶磛禪毚螹蟐鄽瀍繟蟬儳劖繵蟾酁嚵壥巉瀺欃纏纒躔镵艬讒鑱饞\",\n  \"chǎn\": \"产刬旵丳斺浐剗谄啴產産铲阐蒇剷嵼摌滻嘽幝蕆諂閳骣燀簅冁繟醦譂鏟闡囅灛讇\",\n  \"chàn\": \"忏刬剗硟摲幝幨燀懴儳懺羼韂顫\",\n  \"chāng\": \"伥昌倀娼淐猖菖阊椙琩裮锠錩閶鲳闛鯧鼚\",\n  \"cháng\": \"仩仧兏肠苌镸長尝偿常徜瓺萇場甞腸嘗塲嫦瑺膓償嚐鲿鱨\",\n  \"chǎng\": \"昶惝場敞僘厰塲廠氅鋹\",\n  \"chàng\": \"怅玚畅鬯唱悵焻瑒暢畼誯韔\",\n  \"chāo\": \"抄弨怊欩钞訬焯超鈔勦摷綽劋樔窼\",\n  \"cháo\": \"牊晁巣巢鄛鼌漅樔潮窲罺鼂轈謿\",\n  \"chǎo\": \"炒眧粆焣煼槱麨巐\",\n  \"chào\": \"仦仯耖觘\",\n  \"chē\": \"伡車俥砗唓莗硨蛼\",\n  \"ché\": \"\",\n  \"chě\": \"扯偖撦奲\",\n  \"chè\": \"屮彻呫坼迠烢烲焎聅掣揊硩頙徹摰撤澈勶瞮爡\",\n  \"chen\": \"伧傖\",\n  \"chēn\": \"肜抻郴捵棽琛嗔綝瘨瞋諃賝謓\",\n  \"chén\": \"尘臣忱沉辰陈迧茞宸栕莀莐陳敐晨桭梣訦谌軙愖跈鈂煁蔯塵敶樄瘎霃螴諶薼麎曟鷐\",\n  \"chěn\": \"趻硶碜墋夦磣踸鍖贂醦\",\n  \"chèn\": \"衬爯疢龀偁趂趁榇稱齓齔儭嚫穪谶櫬襯讖\",\n  \"chēng\": \"朾阷泟柽爯凈棦浾琤偁淨碀蛏晿牚搶赪僜憆摚稱靗撐撑緽橖橕瞠赬頳檉竀罉鎗矃穪蟶鏿鐣饓鐺\",\n  \"chéng\": \"氶丞成朾呈承枨诚郕乗城埩娍宬峸洆荿埕挰晟浧珹掁珵窚脭铖堘惩揨棖椉程筬絾裎塍塖溗誠畻酲鋮憕撜澂橙檙鯎瀓懲騬\",\n  \"chěng\": \"侱徎悜逞骋庱睈裎騁\",\n  \"chèng\": \"秤牚稱竀穪\",\n  \"chi\": \"麶\",\n  \"chī\": \"吃妛哧彨胵蚩鸱瓻眵笞粚喫訵嗤媸摛痴絺樆噄殦瞝誺噭螭鴟鵄癡魑齝攡彲黐\",\n  \"chí\": \"弛池驰迟坻沶狋茌迡持柢竾荎俿歭耛菭蚳赿筂貾遅跢遟馳箈箎墀徲漦踟遲篪謘鍉邌鶗鶙\",\n  \"chǐ\": \"叺伬扡呎肔侈卶齿垑奓拸胣恥耻蚇袳豉欼歯袲裭誃鉹褫齒\",\n  \"chì\": \"彳叱斥佁杘灻赤饬侙抶勅恜柅炽勑捇眙翄翅敕烾啻湁飭傺痸腟誃鉓雴憏瘈翤遫銐慗慸瘛翨熾懘趩鶒鷘\",\n  \"chōng\": \"充忡沖茺浺珫翀舂嘃摏徸憃憧衝罿艟蹖\",\n  \"chóng\": \"虫崈崇痋隀漴褈緟蝩蟲爞\",\n  \"chǒng\": \"宠埫寵\",\n  \"chòng\": \"铳揰銃\",\n  \"chou\": \"鮘\",\n  \"chōu\": \"抽牰婤掫紬搊跾瘳篘醔犨犫\",\n  \"chóu\": \"怞俦诪帱栦惆梼畤紬绸菗椆畴絒愁皗稠筹裯詶酧酬綢踌儔雔嚋嬦幬懤盩薵檮燽雠疇籌躊醻讐讎雦\",\n  \"chǒu\": \"丒丑吜杽杻偢瞅醜矁魗\",\n  \"chòu\": \"臰遚殠\",\n  \"chu\": \"橻\",\n  \"chū\": \"出岀初榋摢摴樗貙櫖齣\",\n  \"chú\": \"刍除芻耝厨滁蒢豠锄媰耡蒭蜍趎鉏雏犓廚篨鋤橱幮櫉藸蟵躇雛櫥蹰鶵躕\",\n  \"chǔ\": \"処杵础椘處储楮禇楚褚濋儲檚璴礎齭齼\",\n  \"chù\": \"亍処竌怵泏绌豖欪炪竐俶敊埱珿絀菆傗鄐慉搐滀触閦儊嘼諔憷斶歜臅黜觸矗\",\n  \"chuā\": \"欻\",\n  \"chuǎ\": \"\",\n  \"chuà\": \"\",\n  \"chuāi\": \"搋\",\n  \"chuái\": \"膗\",\n  \"chuǎi\": \"\",\n  \"chuài\": \"啜欼膪踹\",\n  \"chuān\": \"巛川氚穿猭瑏\",\n  \"chuán\": \"舡舩剶船圌遄傳椯椽歂暷篅膞輲\",\n  \"chuǎn\": \"舛荈喘堾歂僢踳\",\n  \"chuàn\": \"汌串玔钏釧猭賗鶨\",\n  \"chuāng\": \"刅疮窓創窗牎摐牕瘡窻\",\n  \"chuáng\": \"床牀喠噇朣橦\",\n  \"chuǎng\": \"闯傸磢闖\",\n  \"chuàng\": \"怆刱剏剙創愴\",\n  \"chuī\": \"吹炊龡\",\n  \"chuí\": \"垂倕埀桘陲捶菙圌搥棰腄槌硾锤箠錘鎚顀\",\n  \"chuǐ\": \"\",\n  \"chuì\": \"惙\",\n  \"chūn\": \"芚旾杶春萅媋暙椿槆瑃箺蝽橁輴櫄鰆鶞\",\n  \"chún\": \"纯肫陙唇浱純莼脣湻犉滣蒓鹑漘蓴膞醇醕錞鯙鶉\",\n  \"chǔn\": \"朐偆萶惷睶賰蠢\",\n  \"chuō\": \"逴趠踔戳繛\",\n  \"chuò\": \"辶吷辵拺哾娖娕啜婥婼惙涰淖辍酫綽踀箹輟鋜龊擉磭餟繛歠鏃嚽齪鑡孎\",\n  \"da\": \"繨\",\n  \"dā\": \"咑哒耷笚嗒搭褡噠墶撘鎝鎉\",\n  \"dá\": \"达迏迖迚呾妲怛沓垯炟羍荅荙畗剳匒惮畣笪逹溚詚達跶靼憚薘鞑燵蟽鐽韃龖龘\",\n  \"dǎ\": \"\",\n  \"dà\": \"亣汏眔\",\n  \"dāi\": \"呆呔獃懛\",\n  \"dǎi\": \"歹逮傣\",\n  \"dài\": \"代诒轪侢垈岱帒甙绐迨带怠柋殆玳贷帯貣軑埭帶紿蚮袋軚逮釱棣詒貸軩瑇跢廗箉叇曃緿蝳駘鮘鴏戴艜黛簤蹛瀻霴襶黱靆\",\n  \"dān\": \"丹妉単眈砃耼耽郸聃躭酖單媅愖殚瘅匰箪褝鄲頕儋勯擔殫甔癉襌簞聸\",\n  \"dǎn\": \"伔刐抌玬瓭胆衴疸紞赕亶馾撢撣賧燀黕膽皽黵\",\n  \"dàn\": \"旦但帎呾沊泹狚诞唌柦疍訑啗啖惔惮淡萏蛋啿弾氮腅蜑觛亶瘅窞蓞誕僤噉馾髧儋嘾彈憚醈憺擔澹禫餤駳鴠癉膻癚嚪繵贉霮饏黮\",\n  \"dāng\": \"珰裆筜當儅噹澢璫襠簹艡蟷鐺闣\",\n  \"dǎng\": \"党谠當擋譡黨攩灙欓讜\",\n  \"dàng\": \"氹凼圵宕砀垱荡档偒菪婸崵愓瓽逿嵣當雼潒碭儅瞊蕩趤壋擋檔璗盪礑簜蘯闣\",\n  \"dāo\": \"刀刂忉朷氘舠釖鱽裯魛螩\",\n  \"dáo\": \"捯\",\n  \"dǎo\": \"导岛陦島捣祷禂搗隝嘄嶋嶌槝導隯壔嶹擣蹈檮禱\",\n  \"dào\": \"辺到帱悼梼焘盗菿椡盜絩道稲箌翢噵稻艔衜檤衟幬燾翿軇瓙纛\",\n  \"de\": \"旳\",\n  \"dē\": \"嘚\",\n  \"dé\": \"恴淂蚮悳惪棏锝徳德鍀\",\n  \"dēi\": \"嘚\",\n  \"děi\": \"\",\n  \"dèn\": \"扥扽\",\n  \"dēng\": \"灯登豋僜噔嬁燈璒竳簦艠蹬\",\n  \"děng\": \"等戥\",\n  \"dèng\": \"邓凳鄧隥墱嶝憕瞪磴镫櫈瀓覴鐙\",\n  \"dī\": \"氐仾低奃岻彽秪袛啲埞羝隄堤渧趆滴碮樀磾鞮鏑\",\n  \"dí\": \"扚廸旳狄肑籴苖迪唙敌浟涤荻啇梑笛觌靮滌蓧馰髢嘀嫡翟蔋蔐頔敵篴镝嚁藡豴蹢鏑糴覿鸐\",\n  \"dǐ\": \"氐厎坘诋邸阺呧坻弤抵拞枑柢牴砥掋菧觝詆軧楴聜骶鯳\",\n  \"dì\": \"坔旳杕玓怟枤苐俤哋埅帝埊娣逓递偙梊焍珶眱祶第菂谛釱媂揥棣渧睇缔蒂遆僀楴禘腣遞鉪墆墑墬嵽摕疐碲蔕蝃遰慸甋締蝭嶳諦諟踶螮\",\n  \"diǎ\": \"嗲\",\n  \"diān\": \"佔敁掂傎厧嵮滇槇槙瘨窴颠蹎巅顚顛癫巓攧巔癲齻\",\n  \"dián\": \"\",\n  \"diǎn\": \"典奌点婰敟椣跕碘蒧蕇踮點嚸\",\n  \"diàn\": \"电阽坫店垫扂玷痁钿婝惦淀奠琔殿痶蜔鈿電墊壂橂橝澱靛磹癜簟驔\",\n  \"diāo\": \"刁叼汈刟虭凋奝弴彫蛁椆琱貂碉鳭瞗錭雕鮉鲷簓鼦鯛鵰\",\n  \"diǎo\": \"扚屌鳥\",\n  \"diào\": \"弔伄吊钓盄窎訋掉釣铞铫絩鈟竨蓧誂銚銱雿魡調瘹窵鋽藋鑃\",\n  \"diē\": \"爹跌褺\",\n  \"dié\": \"佚怢泆苵迭咥垤峌恎挕昳柣绖胅瓞眣耊啑戜眰谍喋堞崼幉惵揲畳絰耋臷詄趃跕軼镻叠楪殜牃牒跮嵽碟蜨褋槢艓蝶疂諜蹀鴩螲鲽鞢曡疉鰈疊氎\",\n  \"diě\": \"\",\n  \"diè\": \"哋\",\n  \"dīng\": \"仃叮奵帄玎甼町疔盯耵虰酊釘靪\",\n  \"dǐng\": \"奵艼顶酊頂鼎嵿鼑濎薡鐤\",\n  \"dìng\": \"订忊饤矴定訂釘飣啶掟萣铤椗腚碇锭碠聢蝊鋌錠磸顁\",\n  \"diū\": \"丟丢铥颩銩\",\n  \"dōng\": \"东冬咚岽東苳昸氡倲鸫埬娻崬崠涷笗菄徚氭蝀鮗鼕鯟鶇鶫\",\n  \"dǒng\": \"揰董墥嬞懂箽蕫諌\",\n  \"dòng\": \"动冻侗垌姛峒恫挏栋洞狪胨迵凍戙烔胴動娻崠硐棟湩絧腖働勭燑駧霘\",\n  \"dōu\": \"吺枓侸唗兜兠蔸橷瞗篼\",\n  \"dóu\": \"唞\",\n  \"dǒu\": \"乧阧抖钭陡蚪鈄\",\n  \"dòu\": \"吋豆郖浢狵荳逗饾鬥梪毭渎脰酘痘閗窦鬦鋀餖斣瀆闘竇鬪鬬鬭\",\n  \"dū\": \"厾剢阇嘟督醏闍\",\n  \"dú\": \"独涜渎椟牍犊裻読獨錖凟匵嬻瀆櫝殰牘犢瓄皾騳黩讀豄贕韣髑鑟韇韥黷讟\",\n  \"dǔ\": \"竺笃堵暏琽赌睹覩賭篤\",\n  \"dù\": \"芏妒杜妬姤荰秺晵渡靯镀螙斁殬鍍蠧蠹\",\n  \"duān\": \"耑偳剬媏端褍鍴\",\n  \"duǎn\": \"短\",\n  \"duàn\": \"段断塅缎葮椴煅瑖腶碫锻緞毈簖鍛斷躖籪\",\n  \"duī\": \"垖堆塠痽磓镦鴭鐓鐜\",\n  \"duǐ\": \"啍頧\",\n  \"duì\": \"队对兊兌対杸祋怼陮敓敚隊碓綐對憞憝濧濻薱懟瀢瀩譈譵轛\",\n  \"dūn\": \"吨惇蜳墪墫墩撴獤噸撉橔犜礅蹾蹲驐\",\n  \"dǔn\": \"盹趸躉\",\n  \"dùn\": \"伅坉庉忳沌炖盾砘逇钝顿遁鈍楯頓碷遯憞潡燉踲\",\n  \"duo\": \"\",\n  \"duō\": \"夛多咄哆畓剟掇敠敪毲裰跢嚉\",\n  \"duó\": \"仛夺沰铎剫敓敚喥痥鈬奪凙踱鐸\",\n  \"duǒ\": \"朵朶哚垜挆埵崜缍袳椯硾趓躱躲綞亸軃鬌嚲奲\",\n  \"duò\": \"杕杝刴剁枤沲陊陏饳垜尮挆挅柁柂柮桗舵隋媠惰隓跢跥跺飿馱墮憜駄墯隳鵽\",\n  \"ē\": \"妸妿娿婀屙痾\",\n  \"é\": \"讹吪囮迗俄峉哦娥峩峨涐莪珴訛皒睋鈋锇鹅磀誐鋨頟额魤額鵞鵝譌\",\n  \"ě\": \"枙娿砨惡頋噁騀鵈\",\n  \"è\": \"厄戹歺岋阨呃扼苊阸呝枙砐轭咢咹垩姶洝砈匎敋蚅饿偔卾堊娾悪硆谔軛鄂阏堮堨崿惡愕湂萼豟軶遌遏鈪廅搕搤搹琧痷腭僫蝁锷鹗蕚遻頞颚餓噩擜覨諤閼餩鍔鳄歞顎礘櫮鰐鶚鰪讍齃鑩齶鱷\",\n  \"ēi\": \"诶欸誒\",\n  \"éi\": \"诶欸誒\",\n  \"ěi\": \"诶欸誒\",\n  \"èi\": \"诶欸誒\",\n  \"ēn\": \"奀恩蒽煾\",\n  \"ěn\": \"峎\",\n  \"èn\": \"摁\",\n  \"ēng\": \"鞥\",\n  \"ér\": \"儿而児杒侕兒陑峏洏耏荋栭胹唲梕袻鸸粫聏輀鲕隭髵鮞鴯轜\",\n  \"ěr\": \"尒尓尔耳迩洱饵栮毦珥铒衈爾鉺餌駬薾邇趰\",\n  \"èr\": \"二弍弐佴刵咡贰貮貳誀樲髶\",\n  \"fā\": \"冹沷発發彂醗醱\",\n  \"fá\": \"乏伐姂坺垡浌疺罚茷阀栰笩傠筏瞂罰閥墢罸橃藅\",\n  \"fǎ\": \"佱法峜砝鍅灋\",\n  \"fà\": \"珐琺髪蕟髮\",\n  \"fān\": \"帆忛犿拚畨勫噃嬏幡憣旙旛繙翻藩轓颿籓飜鱕\",\n  \"fán\": \"凢凣凡匥杋柉矾籵钒舤烦舧笲釩棥煩緐墦樊蕃燔璠膰薠襎羳蹯瀿礬蘩鐇鐢蠜鷭\",\n  \"fǎn\": \"反払仮返橎\",\n  \"fàn\": \"氾犯奿汎泛饭范贩畈訉軓婏桳梵盕笵販軬飰飯滼嬎範輽瀪\",\n  \"fāng\": \"匚方邡汸芳枋牥祊钫淓蚄堏趽鈁錺鴋\",\n  \"fáng\": \"防妨房肪埅鲂魴\",\n  \"fǎng\": \"仿访彷纺昉昘瓬眆倣旊眪紡舫訪髣鶭\",\n  \"fàng\": \"放趽\",\n  \"fēi\": \"飞妃非飛啡婓婔渄绯扉斐暃猆靟裶緋蜚霏鲱餥馡騑騛鯡飝\",\n  \"féi\": \"肥疿淝腓痱蜰\",\n  \"fěi\": \"朏胐匪诽奜悱斐棐榧翡蕜誹篚\",\n  \"fèi\": \"吠犻芾废杮柹沸狒肺胏昲胇费俷剕厞疿砩陫屝笰萉廃費痱镄廢曊橃橨癈鼣濷蟦櫠鐨靅\",\n  \"fēn\": \"吩帉纷芬昐氛玢砏竕衯紛翂梤棻訜躮酚鈖雰馚朆餴饙\",\n  \"fén\": \"坆坟妢岎汾朌枌炃羒蚠蚡棼焚蒶隫墳幩濆獖蕡魵鳻橨燌燓豮鼢羵鼖豶轒鐼馩黂\",\n  \"fěn\": \"粉黺\",\n  \"fèn\": \"坋弅奋忿秎偾愤粪僨憤獖瞓奮橨膹糞鲼瀵鱝\",\n  \"fēng\": \"丰仹凨凬夆妦沣沨凮枫炐封疯盽砜風埄峰峯莑偑桻烽琒堼崶渢猦葑锋楓犎蜂熢瘋碸僼篈鄷鋒檒豐鎽鏠酆寷灃蘴霻蠭靊飌麷\",\n  \"féng\": \"夆浲逢堸溄馮摓漨綘艂縫\",\n  \"fěng\": \"讽風覂唪諷\",\n  \"fèng\": \"凤奉俸桻湗焨煈赗鳯鳳鴌縫賵\",\n  \"fó\": \"仏仸坲梻\",\n  \"fōu\": \"\",\n  \"fóu\": \"紑\",\n  \"fǒu\": \"缶妚炰缹缻殕雬鴀\",\n  \"fū\": \"伕邞呋妋抙姇枎玞肤怤柎砆胕荂衭娐尃捊荴旉琈紨趺酜麸稃跗鈇筟綒鄜孵粰蓲敷膚鳺麩糐麬麱懯璷\",\n  \"fú\": \"乀巿弗払伏凫甶刜孚扶芣芙芾咈姇宓岪帗怫枎泭绂绋苻茀俘垘枹柫柭氟洑炥玸畉畐祓罘胕茯郛韨鳬哹垺栿浮畗砩莩蚨袚匐桴涪烰琈符笰紱紼翇艴菔虙袱幅棴絥罦葍福綍艀蜉辐鉘鉜颫鳧榑稪箁箙粰褔豧韍颰幞澓蝠髴鴔諨踾輻鮄癁襆鮲黻襥鵩纀鶝\",\n  \"fǔ\": \"阝呒抚甫乶府弣拊斧俌俛柎郙俯蚥釡釜捬脯辅椨焤盙腑滏蜅腐輔嘸撫頫鬴簠黼\",\n  \"fù\": \"讣付妇负附咐坿彿竎阜驸复峊柎洑祔訃負赴蚥袝偩冨婏婦捬紨蚹傅媍富復秿萯蛗覄詂赋椱缚腹鲋榑禣複褔赙緮蕧蝜蝮賦駙嬔縛輹鮒賻鍑鍢鳆覆馥鰒\",\n  \"gā\": \"旮伽夾嘎嘠\",\n  \"gá\": \"钆軋尜釓嘎嘠噶錷\",\n  \"gǎ\": \"尕玍朒嘎嘠\",\n  \"gà\": \"尬魀\",\n  \"gāi\": \"侅该郂陔垓姟峐荄晐赅畡祴絯隑該豥賅賌\",\n  \"gǎi\": \"忋改絠\",\n  \"gài\": \"丐乢匄匃杚钙摡溉葢鈣戤概槩蓋漑槪瓂\",\n  \"gān\": \"甘忓迀攼玕肝咁坩泔矸苷柑玵竿疳酐粓凲尲尴筸漧鳱尶尷魐\",\n  \"gǎn\": \"仠芉皯秆衦赶敢桿稈感澉趕橄擀澸篢簳鳡鱤\",\n  \"gàn\": \"佄旰汵盰绀倝凎淦紺詌骭幹榦檊簳贑赣贛灨\",\n  \"gāng\": \"冈冮刚纲肛岡牨疘矼缸剛罡堈崗掆釭棡犅堽摃碙綱罁鋼鎠\",\n  \"gǎng\": \"岗犺崗\",\n  \"gàng\": \"焵焹筻槓鋼戅戆戇\",\n  \"gāo\": \"皋羔羙高皐髙臯睪槔睾槹獋橰篙糕餻櫜韟鷎鼛鷱\",\n  \"gǎo\": \"夰杲菒稁搞缟槀槁稾稿镐縞藁檺藳鎬\",\n  \"gào\": \"吿告勂诰郜峼祮祰锆筶禞誥鋯\",\n  \"gē\": \"戈仡圪扢犵纥戓肐牫咯紇饹哥袼鸽割彁滒戨歌鴚擱謌鴿鎶\",\n  \"gé\": \"呄佮佫匌挌阁革敋格鬲愅猲臵蛒裓隔颌嗝塥滆觡搿槅膈閣閤獦镉鞈韐骼臈諽輵擱鮥鮯櫊鎑鎘韚轕鞷騔\",\n  \"gě\": \"個哿笴舸嘅嗰蓋鲄\",\n  \"gè\": \"亇吤茖虼個硌铬箇鉻\",\n  \"gěi\": \"給\",\n  \"gēn\": \"根跟\",\n  \"gén\": \"哏\",\n  \"gěn\": \"\",\n  \"gèn\": \"亙亘艮茛揯搄\",\n  \"gēng\": \"刯庚畊浭耕菮椩焿絙絚赓鹒緪縆羮賡羹鶊\",\n  \"gěng\": \"郠哽埂峺挭绠耿莄梗綆鲠骾鯁\",\n  \"gèng\": \"堩緪縆\",\n  \"gōng\": \"工弓公厷功攻杛侊糿糼肱宫紅宮恭躬龚匑塨幊愩觥躳慐匔碽篢髸觵龏龔\",\n  \"gǒng\": \"廾巩汞拱唝拲栱珙嗊輁澒銾鞏\",\n  \"gòng\": \"贡羾唝貢嗊愩慐熕\",\n  \"gōu\": \"佝沟芶钩痀袧缑鈎溝鉤緱褠篝簼鞲韝\",\n  \"gǒu\": \"芶岣狗苟枸玽耉耇笱耈蚼豿\",\n  \"gòu\": \"呴坸构诟购垢姤冓啂夠够傋訽媾彀搆詬遘雊構煹觏撀糓覯購\",\n  \"gū\": \"杚呱咕姑孤沽泒苽巭巬柧轱唃唂罛鸪笟菇菰蛄蓇觚軱軲辜酤稒鈲磆箍箛嫴篐橭鮕鴣\",\n  \"gú\": \"\",\n  \"gǔ\": \"夃古扢抇汩诂谷股牯罟羖逧钴傦啒淈脵蛊嗗尳愲詁馉毂賈鈷鼔鼓嘏榖皷鹘穀縎糓薣濲皼臌轂餶櫎瀔盬瞽鶻蠱\",\n  \"gù\": \"固怘故凅顾堌崓崮梏牿棝祻雇榾痼锢僱錮鲴鯝顧\",\n  \"guā\": \"瓜刮呱胍栝桰铦鸹歄煱颪趏劀緺銛諣踻銽颳鴰騧\",\n  \"guá\": \"\",\n  \"guǎ\": \"冎叧呙呱咼剐剮寡\",\n  \"guà\": \"卦坬诖挂啩掛罣袿絓罫褂詿\",\n  \"guāi\": \"乖\",\n  \"guái\": \"叏\",\n  \"guǎi\": \"拐枴柺罫箉\",\n  \"guài\": \"夬怪恠\",\n  \"guān\": \"关纶官矜覌倌矝莞涫棺蒄窤閞綸関瘝癏観闗鳏關鰥觀鱞\",\n  \"guǎn\": \"莞馆琯痯筦斡管輨璭舘錧館鳤\",\n  \"guàn\": \"卝毌丱贯泴覌悺惯掼淉貫悹祼慣摜潅遦樌盥罆雚観躀鏆灌爟瓘矔礶鹳罐觀鑵欟鱹鸛\",\n  \"guāng\": \"光灮炚炛炗咣垙姯挄洸茪桄烡珖胱硄僙輄潢銧黆\",\n  \"guǎng\": \"広犷廣獷臩\",\n  \"guàng\": \"俇桄逛臦撗\",\n  \"guī\": \"归圭妫规邽皈茥闺帰珪胿亀硅窐袿規媯廆椝瑰郌嫢摫閨鲑嬀嶲槣槻槼鳺璝瞡龜鮭巂歸雟鬶騩櫰櫷瓌蘬鬹\",\n  \"guǐ\": \"宄氿朹轨庋佹匦诡陒垝姽恑攱癸軌鬼庪祪軓匭晷湀蛫觤詭厬簋蟡\",\n  \"guì\": \"攰刿刽昋炅攱贵桂桧匮眭硊趹椢猤筀貴溎蓕跪匱瞆劊劌嶡撌槶螝樻檜瞶禬簂櫃癐襘鐀鳜鞼鑎鱖鱥\",\n  \"gǔn\": \"丨衮惃硍绲袞辊滚蓘裷滾緄蔉磙緷輥鲧鮌鯀\",\n  \"gùn\": \"睔謴\",\n  \"guo\": \"\",\n  \"guō\": \"呙咼咶埚郭啯堝崞渦猓楇聒鈛锅墎瘑嘓彉濄蝈鍋彍蟈懖矌\",\n  \"guó\": \"囗囯囶囻国圀敋喐國帼掴腘摑幗慖漍聝蔮膕虢簂馘\",\n  \"guǒ\": \"果惈淉菓馃椁褁槨粿綶蜾裹輠餜櫎\",\n  \"guò\": \"過腂鐹\",\n  \"hā\": \"虾紦铪鉿蝦\",\n  \"há\": \"\",\n  \"hǎ\": \"奤\",\n  \"hà\": \"\",\n  \"hāi\": \"咍嗨\",\n  \"hái\": \"郂孩骸還嚡\",\n  \"hǎi\": \"海胲烸塰酼醢\",\n  \"hài\": \"亥妎拸骇害氦猲絯嗐餀駭駴饚\",\n  \"han\": \"兯爳\",\n  \"hān\": \"犴佄顸哻蚶酣頇嫨谽憨馠魽歛鼾\",\n  \"hán\": \"邗含汵邯函肣凾虷唅圅娢浛笒崡晗梒涵焓琀寒嵅韩椷甝筨馯蜬澏鋡韓\",\n  \"hǎn\": \"丆罕浫喊豃闞\",\n  \"hàn\": \"仠厈汉屽忓扞闬攼旰旱肣唅垾悍捍涆猂莟晘焊菡釬閈皔睅傼蛿颔馯撖漢蔊蜭鳱暵熯輚銲鋎憾撼翰螒頷顄駻譀雗瀚鶾\",\n  \"hāng\": \"\",\n  \"háng\": \"邟妔苀迒斻杭垳绗桁笐航蚢颃裄貥筕絎頏魧\",\n  \"hàng\": \"忼沆笐\",\n  \"hāo\": \"茠蒿嚆薅薧\",\n  \"háo\": \"乚毜呺竓皋蚝毫椃嗥獆號貉噑獔豪嘷獋諕儫嚎壕濠籇蠔譹\",\n  \"hǎo\": \"郝\",\n  \"hào\": \"昊侴昦秏哠恏悎浩耗晧淏傐皓鄗滈滜聕號暠暤暭澔皜皞镐曍皡薃皥藃鎬颢灏顥鰝灝\",\n  \"hē\": \"诃抲欱訶嗬蠚\",\n  \"hé\": \"禾纥呙劾咊咼姀河郃峆曷柇狢盇籺紇阂饸敆盉盍荷釛啝涸渮盒菏萂龁喛惒粭訸颌楁毼澕蓋詥貈貉鉌阖鲄朅熆閡閤餄鹖麧噈頜篕翮螛魺礉闔鞨齕覈鶡皬鑉龢\",\n  \"hě\": \"\",\n  \"hè\": \"咊抲垎贺哬袔隺寉焃惒猲賀嗃煂碋熇褐赫鹤翯嚇壑癋謞燺爀鶮鶴靍靎鸖靏\",\n  \"hēi\": \"黒黑嗨潶\",\n  \"hén\": \"拫痕鞎\",\n  \"hěn\": \"佷哏很狠詪噷\",\n  \"hèn\": \"恨噷\",\n  \"hēng\": \"亨哼悙涥脝\",\n  \"héng\": \"姮恆恒桁烆珩胻鸻撗橫衡鴴鵆蘅鑅\",\n  \"hèng\": \"悙啈橫\",\n  \"hng\": \"哼\",\n  \"hōng\": \"叿吽呍灴轰訇烘軣揈渹焢硡谾薨輷嚝鍧巆轟\",\n  \"hóng\": \"厷仜弘叿妅屸吰宏汯玒瓨纮闳宖泓玜苰垬娂沗洪竑紅羾荭虹浤浲紘翃耾硔紭谹鸿渱溄竤粠葓葒鈜閎綋翝谼潂鉷鞃魟篊鋐彋霐黉霟鴻黌\",\n  \"hǒng\": \"唝晎嗊愩慐\",\n  \"hòng\": \"讧訌閧撔澒銾蕻闂鬨闀\",\n  \"hōu\": \"齁\",\n  \"hóu\": \"矦鄇喉帿猴葔瘊睺銗篌糇翭骺翵鍭餱鯸\",\n  \"hǒu\": \"吼吽犼呴\",\n  \"hòu\": \"后郈厚垕後洉矦茩逅候堠豞鲎鲘鮜鱟\",\n  \"hū\": \"乎乯匢虍芴呼垀忽昒曶泘苸恗烀芔轷匫唿惚淴虖軤雽嘑寣滹雐幠戯歑戱膴戲謼\",\n  \"hú\": \"囫抇弧狐瓳胡壶隺壷斛焀喖壺媩搰湖猢絗葫鹄楜煳瑚瓡嘝蔛鹕鹘槲箶縎蝴衚魱縠螜醐頶觳鍸餬礐鵠瀫鬍鰗鶘鶦鶻鶮\",\n  \"hǔ\": \"乕汻虎浒俿淲萀琥虝滸錿鯱\",\n  \"hù\": \"互弖戶戸户冱芐帍护沍沪岵怙戽昈曶枑姱怘祜笏粐婟扈瓠楛嗃嗀綔鄠雽嫭嫮摢滬蔰槴熩鳸濩簄豰鍙嚛鹱觷護鳠頀鱯鸌\",\n  \"huā\": \"吪芲花砉埖婲華椛硴蒊嘩糀誮錵蘤\",\n  \"huá\": \"呚姡骅華釪釫铧滑猾嘩搳撶劃磆蕐螖鋘譁鏵驊鷨\",\n  \"huà\": \"夻杹枠画话崋桦華婳畫嬅畵觟話劃摦樺嫿槬澅諙諣黊繣舙譮\",\n  \"huái\": \"怀佪徊淮槐褢踝懐褱懷瀤櫰耲蘹\",\n  \"huài\": \"咶壊壞蘾\",\n  \"huān\": \"欢犿狟貆歓鴅懁鵍酄嚾孉懽獾歡讙貛驩\",\n  \"huán\": \"环郇峘洹狟荁垸桓萈萑堚寏絙雈獂綄羦蒝貆锾瞏圜嬛寰澴缳還阛環豲鍰雚镮鹮糫繯鐶闤鬟瓛\",\n  \"huǎn\": \"睆缓緩\",\n  \"huàn\": \"幻奂肒奐宦唤换浣涣烉患梙焕逭喚喛嵈愌換渙痪煥瑍綄豢漶瘓槵鲩擐澣藧鯇攌嚾轘鯶鰀\",\n  \"huāng\": \"巟肓荒衁宺朚塃慌\",\n  \"huáng\": \"皇偟凰隍黄喤堭媓崲徨惶揘湟葟遑黃楻煌瑝墴潢獚锽熿璜篁艎蝗癀磺穔諻簧蟥鍠餭鳇趪韹鐄騜鰉鱑鷬\",\n  \"huǎng\": \"汻怳恍炾宺晄奛谎幌詤熀熿縨謊兤櫎爌\",\n  \"huàng\": \"愰滉榥曂皝鎤皩\",\n  \"hui\": \"\",\n  \"huī\": \"灰灳诙咴恢拻挥洃虺袆晖烣珲豗婎媈揮翚辉隓暉椲楎煇琿睢禈詼墮幑睳褘噅噕撝翬輝麾徽隳瀈蘳孈鰴\",\n  \"huí\": \"囘回囬佪廻廽恛洄茴迴烠蚘逥痐缋蛕蛔蜖藱鮰繢\",\n  \"huǐ\": \"虺悔烠毀毁螝毇檓燬譭\",\n  \"huì\": \"卉屷屶汇讳泋哕浍绘芔荟诲恚恵桧烩贿彗晦秽喙廆惠湏絵缋翙阓匯彚彙會滙詯賄颒僡嘒瘣蔧誨銊圚寭慧憓暳槥潓潰蕙噦嬒徻橞殨澮濊獩璤薈薉諱頮檅檜燴璯篲藱餯嚖懳瞺穢繢蟪櫘繪翽譓儶鏸闠鐬靧譿顪\",\n  \"hūn\": \"昏昬荤婚惛涽焄阍棔殙湣葷睧睯蔒閽轋\",\n  \"hún\": \"忶浑珲馄渾湷琿魂餛鼲\",\n  \"hǔn\": \"\",\n  \"hùn\": \"诨俒眃倱圂婫掍焝溷尡慁睴觨諢\",\n  \"huō\": \"吙秴耠劐攉騞\",\n  \"huó\": \"佸姡活秮秳趏\",\n  \"huǒ\": \"灬火伙邩钬鈥漷煷夥\",\n  \"huò\": \"沎或货咟俰捇眓获閄剨喐掝祸貨惑旤湱禍漷窢蒦锪嚄奯擭濊濩獲篧鍃霍檴謋雘矆礊穫镬嚯彟瀖耯艧藿蠖嚿曤臛癨矐鑊韄靃彠\",\n  \"jī\": \"丌讥击刉叽饥乩刏圾机玑肌芨矶鸡枅苙咭剞唧姬屐积笄飢基庴喞嵆嵇幾攲敧朞犄筓缉赍嗘畸稘跻鳮僟毄箕綨緁銈嘰撃槣樭畿緝觭諅賫踑躸齑墼撽機激璣禨積錤隮懠擊磯簊羁賷櫅耭雞譏韲鶏譤鐖饑癪躋鞿魕鶺鷄羇虀鑇覉鑙齏羈鸄覊\",\n  \"jí\": \"乁亽亼及尐伋吉岌彶忣汲级即极皀亟佶诘郆卽叝姞急皍笈級堲揤疾觙偮卙唶楖淁焏谻戢棘極殛湒集塉嫉愱楫蒺蝍趌辑槉耤膌銡嶯潗濈瘠箿蕀蕺諔趞踖鞊鹡檝螏輯磼簎藉襋蹐鍓艥籍轚鏶霵齎躤雧\",\n  \"jǐ\": \"己丮妀屰犱泲虮挤脊掎済鱾幾戟給嵴麂魢撠憿橶擠濟穖蟣\",\n  \"jì\": \"彐彑旡计记伎坖妓忌技汥芰际剂季哜垍既洎紀茍茤荠計迹剤畟紒继觊記偈寄寂帺徛悸旣梞済绩塈惎臮葪蔇兾勣痵継蓟裚跡際鬾魝摖暨漃漈禝稩穊誋跽霁魥鲚暩瞉稷諅鲫冀劑曁禨穄薊襀髻嚌懠檕濟穖績繋罽薺覬鮆檵櫅櫭璾蹟鯽鵋齌廭懻癠穧繫蘎骥鯚瀱繼蘮鱀蘻霽鰶鰿鷑鱭驥\",\n  \"jia\": \"\",\n  \"jiā\": \"加乫伽夾宊抸佳拁泇徍枷毠浃珈哿埉挾浹痂梜笳耞袈傢猳葭跏椵犌腵鉫嘉擖镓糘豭貑鴐鎵麚\",\n  \"jiá\": \"圿夾忦扴郏拮荚郟唊恝莢戛脥袷铗戞猰蛱裌颉颊蛺鋏頬頰鴶鵊\",\n  \"jiǎ\": \"甲岬叚玾胛斚钾婽徦斝椵賈鉀榎槚瘕檟\",\n  \"jià\": \"驾架嫁幏賈榢價稼駕\",\n  \"jiān\": \"戋奸尖幵坚歼冿戔玪肩艰姧姦兼堅帴惤猏笺菅菺豜傔揃湔牋犍缄葌閒間雃靬搛椷椾煎瑊睷碊缣蒹豣漸監箋蔪樫熞稴緘蕑蕳鋑鲣鳽鹣熸篯縑鋻艱鞬餰馢麉瀐濺鞯鳒鵑殱礛籈鵳攕瀸鰔櫼殲譼鰜鶼礷籛韀鰹囏虃鑯韉\",\n  \"jiǎn\": \"囝拣枧俭柬茧倹挸捡笕减剪帴揵梘检湕趼堿揀揃検減睑硷裥詃锏弿暕瑐筧简絸谫彅戩戬碱儉翦鋄撿橏篯檢藆襇襉謇蹇瞼礆簡繭謭鎫鬋鰎鹸瀽蠒鐗鐧鹻籛譾襺鹼\",\n  \"jiàn\": \"件見侟建饯剑洊牮荐贱俴健剣栫涧珔舰剱徤揵袸谏釰釼寋旔朁楗毽腱臶跈践閒間賎鉴键僣僭榗槛漸監劎劍墹澗箭糋諓賤趝踐踺劒劔薦諫鋻鍵餞瞷瞯磵礀螹鍳鞬擶檻濺繝瀳覵覸譛鏩聻艦轞鐱鑒鑑鑬鑳\",\n  \"jiāng\": \"江姜茳畕豇將葁畺摪翞僵漿螀壃缰薑橿殭螿鳉疅礓繮韁鱂\",\n  \"jiǎng\": \"讲奖桨傋塂蒋奨奬蔣槳獎耩膙講顜\",\n  \"jiàng\": \"匞匠夅弜洚绛將弶強絳畺酱勥滰嵹摾漿彊犟糡醤糨醬櫤謽\",\n  \"jiāo\": \"艽交郊姣娇峧浇茮茭骄胶敎喬椒焦蛟跤僬嘐虠鲛嬌嶕嶣憍憢澆膠蕉燋膲礁穚鮫鵁鹪簥蟭轇鐎驕鷦鷮\",\n  \"jiáo\": \"矯\",\n  \"jiǎo\": \"臫佼恔挢狡绞饺捁晈烄笅皎脚釥铰搅湫筊絞勦敫湬煍腳賋僥摎摷暞踋鉸餃儌劋徺撟撹樔徼憿敽敿燞曒璬矯皦蟜繳譑孂纐攪灚鱎龣\",\n  \"jiào\": \"叫呌峤挍訆悎珓窌笅轿较敎斍覐窖筊覚滘較嘂嘄嘦斠漖酵噍嶠潐噭嬓徼獥癄藠趭轎醮灂覺譥皭釂\",\n  \"jie\": \"價\",\n  \"jiē\": \"阶疖哜皆袓接掲痎秸菨階喈喼嗟堦媘嫅椄湝結脻街裓楬煯瑎稭鞂擑蝔嚌癤謯鶛\",\n  \"jié\": \"卩卪孑尐讦扢刧刦劫岊昅杢刼劼杰疌衱诘拮洁狤迼倢桀桔桝洯紒莭訐偈偼啑婕崨捷掶袷袺傑媫嵑結絜蛣颉嵥搩楶滐睫節蜐詰趌跲鉣截榤碣竭蓵鲒嶱潔羯誱踕镼鞊頡幯擳嶻擮礍鍻鮚巀蠞蠘蠽\",\n  \"jiě\": \"姐毑媎觧飷檞\",\n  \"jiè\": \"丯介吤妎岕庎戒屆届斺玠畍界疥砎衸诫借悈紒蚧唶徣堺楐琾蛶觧骱犗耤誡褯魪嶰藉鎅鶡\",\n  \"jīn\": \"巾今仐斤钅竻釒金津矜砛荕衿觔埐珒矝紟惍琎菳堻琻筋釿璡鹶黅襟\",\n  \"jǐn\": \"侭卺巹紧堇婜菫僅厪谨锦嫤廑慬漌緊蓳馑槿瑾儘錦謹饉\",\n  \"jìn\": \"伒劤妗近进枃勁浕荩晉晋浸烬笒紟赆唫祲進煡臸僅寖搢溍缙靳墐嫤慬榗瑨盡馸僸凚歏殣觐噤嬐濅縉賮嚍壗嬧濜藎燼璶覲贐齽\",\n  \"jīng\": \"坕坙巠京泾经茎亰秔荊荆涇粇婛惊旍旌猄経菁晶稉腈葏睛粳經兢箐精綡聙鋞橸鲸鯨鶁鶄麖鼱驚麠\",\n  \"jǐng\": \"井丼阱刭坓宑汫汬肼剄穽殌儆頚幜憬擏澋璄憼暻璟璥頸蟼警\",\n  \"jìng\": \"劤妌弪径迳俓勁婙浄胫倞凈弳徑痉竞莖逕婧桱梷殑淨竟竫脛敬痙竧靓傹靖境獍誩踁静靚憼曔镜靜瀞鵛鏡競竸\",\n  \"jiōng\": \"冂冋坰扃埛扄浻絅銄駉駫蘏蘔\",\n  \"jiǒng\": \"冏囧泂炅迥侰炯逈浻烱絅煚窘颎綗臦僒煛熲澃褧燛顈臩\",\n  \"jiòng\": \"\",\n  \"jiū\": \"丩勼纠朻牞究糺鸠糾赳阄萛啾揂揪剹揫鳩摎稵樛鬏鬮\",\n  \"jiú\": \"\",\n  \"jiǔ\": \"九乆久乣氿奺汣杦灸玖糺舏韭紤酒镹韮\",\n  \"jiù\": \"匛旧臼咎疚柩柾倃捄桕匓厩救就廄廐舅僦廏慦殧舊鹫匶鯦麔欍齨鷲\",\n  \"jū\": \"凥伡抅車匊居岨泃狙苴驹俥毩疽眗砠罝陱娵婮崌掬梮涺揟椐毱琚腒趄跔跙锔裾雎艍蜛諊踘躹鋦駒據鋸鮈鴡檋鞠鞫鶋\",\n  \"jú\": \"局泦侷狊挶桔啹婅淗焗菊郹椈湨犑輂僪粷蓻跼閰趜鋦橘駶繘鵙蹫鵴巈蘜鶪鼰鼳驧\",\n  \"jǔ\": \"咀岨弆举枸矩莒挙椇筥榉榘蒟龃聥舉踽擧櫸齟欅襷\",\n  \"jù\": \"巨乬巪讵姖岠怇拒洰苣邭具怐怚拠昛歫炬珇秬钜俱倨倶剧烥粔耟蚷袓埧埾惧詎距焣犋跙鉅飓蒩虡豦锯寠愳窭聚駏劇勮屦踞鮔壉懅據澽窶螶遽鋸屨颶瞿貗簴躆醵忂懼鐻\",\n  \"juān\": \"姢勌娟捐涓朘梋焆瓹脧圏裐鹃勬鋑鋗镌鞙鎸鐫蠲\",\n  \"juǎn\": \"呟巻帣埍捲菤锩臇錈闂\",\n  \"juàn\": \"奆劵奍巻帣弮倦勌悁桊狷绢隽婘惓淃瓹眷鄄圏棬椦睊絭罥腃雋睠絹飬慻蔨嶲鋗餋獧縳巂羂讂\",\n  \"juē\": \"噘撅撧屩屫\",\n  \"jué\": \"亅孒孓决刔氒诀吷妜弡抉決芵叕泬玨玦挗珏疦砄绝虳埆捔欮蚗袦崫崛掘斍桷覐觖訣赽趹傕厥焳矞絕絶覚趉鈌劂瑴谲駃噊嶡嶥憰撅熦爴獗瘚蕝蕨觮鴂鴃噱壆憠橜橛燋璚爵臄镢櫭繘蟨蟩爑譎蹷蹶髉匷矍覺鐍鐝鳜灍爝觼穱彏戄攫玃鷢矡貜躩钁\",\n  \"juě\": \"蹶\",\n  \"juè\": \"誳\",\n  \"jūn\": \"军君均汮姰袀軍钧莙蚐桾皲鈞碅筠皸皹覠銁銞鲪頵麇龜鍕鮶麏麕\",\n  \"jǔn\": \"\",\n  \"jùn\": \"呁俊郡陖埈峻捃浚隽馂骏晙焌珺棞畯竣葰雋儁箘箟蜠賐寯懏餕燇濬駿鵘鵔鵕攈攟\",\n  \"kā\": \"喀\",\n  \"kǎ\": \"佧咔咯垰胩裃鉲\",\n  \"kāi\": \"开奒揩锎開鐦\",\n  \"kǎi\": \"凯剀垲恺闿豈铠凱剴嘅慨蒈塏嵦愷輆暟锴鍇鎧闓颽\",\n  \"kài\": \"忾炌欯欬烗勓愒愾濭鎎\",\n  \"kān\": \"刊栞勘龛堪嵁戡龕\",\n  \"kǎn\": \"凵冚坎扻侃砍莰偘埳惂欿歁槛輡檻顑竷轗\",\n  \"kàn\": \"衎崁墈阚瞰磡闞竷鬫矙\",\n  \"kāng\": \"忼闶砊粇康閌嫝嵻慷漮槺穅糠躿鏮鱇\",\n  \"káng\": \"\",\n  \"kǎng\": \"\",\n  \"kàng\": \"亢伉匟邟囥抗犺闶炕钪鈧閌\",\n  \"kāo\": \"尻嵪髛\",\n  \"kǎo\": \"丂攷考拷洘栲烤薧\",\n  \"kào\": \"洘铐犒銬鲓靠鮳鯌\",\n  \"kē\": \"匼柯牁牱珂科轲疴砢趷钶蚵铪嵙棵痾萪軻颏嗑搕犐稞窠鈳榼薖鉿颗樖瞌磕蝌頦窼醘顆髁礚\",\n  \"ké\": \"殻揢殼翗\",\n  \"kě\": \"岢炣渇嵑敤渴軻閜磆嶱\",\n  \"kè\": \"克刻剋勀勊客峇恪娔尅悈袔课堁氪骒愘硞缂衉嗑愙歁溘锞碦緙艐課濭錁礊騍\",\n  \"kēi\": \"剋尅\",\n  \"kēn\": \"\",\n  \"kěn\": \"肎肯肻垦恳啃龂豤貇龈墾錹懇\",\n  \"kèn\": \"珢掯硍裉褃\",\n  \"kēng\": \"劥阬坈坑妔挳硁殸牼揁硜铿硻摼誙銵鍞鏗\",\n  \"kěng\": \"硻\",\n  \"kōng\": \"倥埪崆悾涳椌硿箜躻錓鵼\",\n  \"kǒng\": \"孔倥恐悾\",\n  \"kòng\": \"矼控羫鞚\",\n  \"kōu\": \"抠芤眍眗剾彄摳瞘\",\n  \"kǒu\": \"口劶竘\",\n  \"kòu\": \"叩扣佝怐敂冦宼寇釦窛筘滱蔲蔻瞉簆鷇\",\n  \"kū\": \"扝刳矻郀朏枯胐哭桍秙窋堀圐跍窟骷鮬\",\n  \"kú\": \"\",\n  \"kǔ\": \"狜苦楛\",\n  \"kù\": \"库俈绔庫捁秙焅袴喾硞絝裤瘔酷廤褲嚳\",\n  \"kuā\": \"咵姱恗晇絓舿誇\",\n  \"kuǎ\": \"侉垮楇銙\",\n  \"kuà\": \"胯趶誇跨骻\",\n  \"kuǎi\": \"蒯擓\",\n  \"kuài\": \"巜凷圦块快侩郐哙浍狯脍欳塊蒉會筷駃鲙儈墤鄶噲廥澮獪璯膾旝糩鱠\",\n  \"kuān\": \"宽寛寬臗髋鑧髖\",\n  \"kuǎn\": \"梡欵款歀窽窾\",\n  \"kuàn\": \"\",\n  \"kuāng\": \"匡迋劻诓邼匩哐恇洭硄筐筺誆軭\",\n  \"kuáng\": \"忹抂狅狂诳軖軠誑鵟\",\n  \"kuǎng\": \"夼儣懭\",\n  \"kuàng\": \"卝丱邝圹纩况旷岲況矿昿贶框眖砿眶絋絖貺軦鉱鋛鄺壙黋懬曠爌矌礦穬纊鑛\",\n  \"kuī\": \"亏刲岿悝盔窥聧窺虧顝闚巋\",\n  \"kuí\": \"奎晆逵鄈隗馗喹揆葵骙戣暌楏楑魁睽蝰頯櫆藈鍨鍷騤夔蘷巙虁犪躨\",\n  \"kuǐ\": \"尯煃跬頍磈蹞\",\n  \"kuì\": \"尯胿匮喟媿愧愦蒉馈匱瞆嘳嬇憒潰篑聭聩蕢殨膭謉瞶餽簣聵籄饋\",\n  \"kūn\": \"坤昆堃堒婫崑崐晜猑菎裈焜琨髠裩貇锟髡鹍潉蜫褌髨熴瑻醌錕鲲騉鯤鵾鶤\",\n  \"kǔn\": \"悃捆阃壸梱祵硱稇裍壼稛綑閫閸\",\n  \"kùn\": \"困涃睏\",\n  \"kuò\": \"扩拡挄适秮秳铦筈萿葀蛞阔廓漷銛噋銽頢髺擴濶闊鞟韕霩鞹鬠\",\n  \"la\": \"鞡\",\n  \"lā\": \"垃柆砬菈搚磖邋\",\n  \"lá\": \"旯剌砬揦磖嚹\",\n  \"lǎ\": \"喇藞\",\n  \"là\": \"剌翋揦溂揧楋瘌蜡蝋辢辣蝲臈擸攋爉臘鬎櫴瓎镴鯻蠟鑞\",\n  \"lái\": \"来來俫倈崃徕涞莱郲婡崍庲徠梾淶猍萊逨棶琜筙铼箂錸騋鯠鶆麳\",\n  \"lǎi\": \"襰\",\n  \"lài\": \"疠娕徕唻婡徠赉睐睞赖誺賚濑賴頼癘顂癞鵣攋瀨瀬籁藾櫴癩籟\",\n  \"lán\": \"兰岚拦栏啉婪惏嵐葻阑暕蓝谰厱澜褴儖斓篮懢燣燷藍襕镧闌璼幱襤譋攔瀾灆籃繿蘫蘭斕欄襴囒灡籣欗讕躝襽鑭韊\",\n  \"lǎn\": \"览浨揽缆榄漤罱醂壈懒覧擥嬾懶孄覽孏攬灠欖爦顲纜\",\n  \"làn\": \"坔烂滥燗嚂壏濫爁爛瓓爤爦糷钄\",\n  \"lāng\": \"啷\",\n  \"láng\": \"勆郞哴欴狼嫏廊斏桹琅蓈榔瑯硠稂锒筤艆蜋郒樃螂躴鋃鎯駺\",\n  \"lǎng\": \"崀朗朖烺塱蓢誏朤\",\n  \"làng\": \"埌浪莨阆筤蒗誏閬\",\n  \"lāo\": \"捞粩撈\",\n  \"láo\": \"労劳牢窂哰崂浶勞痨铹僗嘮嶗憦憥朥癆磱簩蟧醪鐒顟髝\",\n  \"lǎo\": \"耂老佬咾恅狫荖栳珯硓铑蛯銠鮱轑\",\n  \"lào\": \"涝絡嗠耢酪嫪嘮憦樂澇躼橯耮軂\",\n  \"le\": \"饹\",\n  \"lē\": \"嘞\",\n  \"lè\": \"仂阞叻忇扐氻艻牞玏泐竻砳楽韷餎樂簕鳓鰳鱳\",\n  \"lei\": \"嘞\",\n  \"lēi\": \"\",\n  \"léi\": \"絫雷嫘缧蔂樏畾磥檑縲攂礌镭櫑瓃羸礧纍罍蘲鐳轠儽鑘靁虆鱩欙纝鼺\",\n  \"lěi\": \"厽耒诔垒洡塁絫傫誄瘣樏磊蕌磥蕾儡壘癗礌藟櫑櫐矋礨礧灅蠝蘽讄壨鑸鸓\",\n  \"lèi\": \"泪洡类涙淚祱絫酹銇頛頪錑攂颣類礧纇蘱禷\",\n  \"lēng\": \"稜\",\n  \"léng\": \"唥崚塄楞碐稜薐\",\n  \"lěng\": \"冷\",\n  \"lèng\": \"倰堎愣睖踜\",\n  \"li\": \"\",\n  \"lī\": \"\",\n  \"lí\": \"刕杝厘柂剓狸离荲骊悡梨梸犁琍菞喱棃犂鹂剺漓睝筣缡艃蓠嫠孷樆璃盠竰貍犛糎蔾褵鋫鲡黎篱縭罹錅蟍謧醨嚟藜邌釐離鯏斄瓈蟸鏫鯬鵹麗黧囄灕蘺蠫孋廲劙鑗穲籬纚驪鱺鸝\",\n  \"lǐ\": \"礼李里俚峛峢娌峲悝浬逦理裡锂粴裏豊鋰鲤澧禮鯉醴蠡鳢邐鱧欚纚鱱\",\n  \"lì\": \"力历厉屴扐立吏扚朸利励叓呖坜杝沥苈例叕岦戾枥沴沵疠苙迣俐俪栃栎疬砅茘荔赲轹郦唎娳悧栛栗浰涖猁珕砬砺砾秝莉莅鬲唳婯悷笠粒粝脷蚸蛎傈凓厤棙痢蛠詈跞雳厯塛慄搮溧睙蒞蒚蜊鉝鳨厲暦歴瑮綟蜧銐蝷镉勵曆歷篥隷鴗巁檪濿癘磿隸鬁儮擽曞櫔爄犡禲蠇鎘嚦壢攊櫟瀝瓅礪藶麗櫪爏瓑皪盭礫糲蠣儷癧礰纅酈鷅麜囇孋攦觻躒轢欐讈轣攭瓥靂靋\",\n  \"liǎ\": \"俩倆\",\n  \"lián\": \"奁连帘怜涟莲連梿联裢亷嗹廉慩溓漣蓮匲奩槏槤熑覝劆匳噒嫾憐磏聨聫褳鲢濂濓縺翴聮薕螊櫣燫聯臁謰蹥檶鎌镰瀮簾蠊鬑鐮鰱籢籨\",\n  \"liǎn\": \"莶敛梿琏脸裣慩摙溓槤璉蔹嬚薟斂櫣歛臉鄻襝羷蘞蘝醶\",\n  \"liàn\": \"练炼恋殓僆堜媡湅萰链摙楝煉瑓潋稴練澰錬殮鍊鏈瀲鰊戀纞\",\n  \"liāng\": \"\",\n  \"liáng\": \"良俍莨梁涼椋辌粱粮墚踉樑輬駺糧\",\n  \"liǎng\": \"両两兩俩倆唡啢掚脼裲緉蜽魉魎\",\n  \"liàng\": \"亮倞哴悢谅涼辆喨晾湸靓輌踉諒輛鍄\",\n  \"liāo\": \"蹽\",\n  \"liáo\": \"辽疗窌聊尞僚寥嵺憀摎漻膋嘹嫽寮嶚嶛憭敹樛獠缭遼暸橑璙膫療竂鹩屪廫簝繚藔蟟蟧豂賿蹘爎爒飂髎飉鷯\",\n  \"liǎo\": \"钌釕鄝缪蓼憭繆曢爎镽爒\",\n  \"liào\": \"尥尦钌炓料釕廖撂窷镣鐐\",\n  \"lie\": \"\",\n  \"liē\": \"\",\n  \"lié\": \"\",\n  \"liě\": \"忚毟挘\",\n  \"liè\": \"列劣劦冽劽姴挒洌茢迾哷埓埒栵浖烈烮捩猎猟脟棙蛚煭聗趔綟巤獦颲燤儠巁鮤鴷擸爄獵爉犣躐鬛鬣鱲\",\n  \"līn\": \"拎\",\n  \"lín\": \"厸邻阾林临冧啉崊惏晽琳粦碄箖粼綝鄰隣嶙潾獜遴斴暽燐璘辚霖疄瞵磷臨繗翷麐轔壣瀶鏻鳞驎鱗麟\",\n  \"lǐn\": \"菻亃僯箖凜凛撛廩廪懍懔澟檁檩癝癛\",\n  \"lìn\": \"吝恡悋赁焛亃痳賃蔺獜橉甐膦閵疄藺蹸躏躙躪轥\",\n  \"líng\": \"伶刢灵呤囹坽夌姈岺彾泠狑苓昤朎柃玲瓴〇凌皊砱秢竛羐袊铃陵鸰婈崚掕棂淩琌笭紷绫羚翎聆舲菱蛉衑祾詅跉軨稜蓤裬鈴閝零龄綾蔆輘霊駖澪蕶錂霗魿鲮鴒鹷燯霝霛齢酃鯪孁齡櫺醽靈欞爧麢龗\",\n  \"lǐng\": \"岺袊领領嶺\",\n  \"lìng\": \"另炩蘦\",\n  \"liū\": \"熘澑蹓\",\n  \"liú\": \"刘畄斿浏流留旈琉畱硫裗媹嵧旒蒥蓅骝摎榴漻瑠飗劉瑬瘤磂镏駠鹠橊璢疁镠癅蟉駵嚠懰瀏藰鎏鎦麍鏐飀鐂騮飅鰡鶹驑\",\n  \"liǔ\": \"柳栁桞珋桺绺锍綹熮罶鋶橮嬼懰羀藰\",\n  \"liù\": \"窌翏塯廇遛澑磂磟鹨鎦霤餾雡飂鬸鷚\",\n  \"lo\": \"咯\",\n  \"lóng\": \"龙屸尨咙泷茏昽栊珑胧眬砻竜聋隆湰滝嶐槞漋癃窿篭龍儱蘢鏧霳嚨巃巄瀧曨朧櫳爖瓏襱矓礲礱蠬蠪龓龒籠聾豅躘靇鑨驡鸗\",\n  \"lǒng\": \"陇垅垄拢篢篭龍隴儱徿壟壠攏竉龓籠躘\",\n  \"lòng\": \"哢梇硦儱徿贚\",\n  \"lou\": \"喽嘍瞜\",\n  \"lōu\": \"摟\",\n  \"lóu\": \"剅娄偻婁喽溇蒌僂楼嘍寠廔慺漊蔞遱樓熡耧蝼瞜耬艛螻謱貗軁髅鞻髏鷜\",\n  \"lǒu\": \"嵝塿嶁摟甊篓簍\",\n  \"lòu\": \"陋屚漏瘘镂瘻瘺鏤\",\n  \"lū\": \"噜撸謢嚕擼\",\n  \"lú\": \"卢庐芦垆枦泸炉栌胪轳舮鸬玈舻颅鈩鲈馿魲盧嚧壚廬攎瀘獹璷蘆曥櫨爐瓐臚矑籚纑罏艫蠦轤鑪顱髗鱸鸕黸\",\n  \"lǔ\": \"卤虏掳鹵硵鲁虜塷滷蓾樐澛魯擄橹氇磠穞镥瀂櫓氌艣鏀艪鐪鑥\",\n  \"lù\": \"圥甪陆侓坴彔录峍勎赂辂陸娽淕淥渌硉菉逯鹿椂琭祿禄僇剹勠盝睩稑賂路輅塶廘摝漉箓粶緑蓼蔍戮樚熝膔趢踛辘醁潞穋蕗錄錴録璐簏螰鴼簶蹗轆騄鹭簬簵鏕鯥鵦鵱麓鏴騼籙觻虂鷺\",\n  \"luán\": \"娈孪峦挛栾鸾脔滦銮鵉圝奱孌孿巒攣曫欒灓羉臡臠圞灤虊鑾癴癵鸞\",\n  \"luǎn\": \"卵覶\",\n  \"luàn\": \"乱釠乿亂薍灓\",\n  \"lūn\": \"掄\",\n  \"lún\": \"仑伦囵沦纶芲侖轮倫陯圇婨崘崙掄淪菕棆腀碖綸耣蜦論踚輪磮錀鯩\",\n  \"lǔn\": \"埨惀碖稐耣\",\n  \"lùn\": \"惀溣碖論\",\n  \"luo\": \"囉囖\",\n  \"luō\": \"捋頱囉囖\",\n  \"luó\": \"寽罗猡脶萝逻椤腡锣箩骡镙螺攎羅覶鏍儸覼騾囉攞玀蘿邏欏驘鸁籮鑼饠囖\",\n  \"luǒ\": \"剆倮砢捰蓏裸躶瘰蠃臝曪攭癳\",\n  \"luò\": \"泺咯峈洛荦骆洜珞捰渃硌硦笿絡蛒跞詻摞漯犖雒駱磱鮥鵅擽濼攊皪躒纙\",\n  \"lǘ\": \"驴闾榈閭氀膢瞜櫚藘驢\",\n  \"lǚ\": \"吕呂侣郘侶挔捛捋旅梠焒祣偻稆铝屡絽缕僂屢慺膂褛鋁履膐褸儢縷穭鷜\",\n  \"lǜ\": \"垏律哷虑嵂氯葎滤綠緑慮箻膟勴繂濾櫖爈卛鑢\",\n  \"lüè\": \"寽掠畧略锊稤圙鋢鋝\",\n  \"ma\": \"嗎嘛麽\",\n  \"mā\": \"亇妈孖庅媽嫲榪螞\",\n  \"má\": \"菻麻嗎痲痳嘛嫲蔴犘蟇\",\n  \"mǎ\": \"马犸杩玛码馬嗎溤獁遤瑪碼螞鎷鰢鷌\",\n  \"mà\": \"杩祃閁骂傌睰嘜榪禡罵螞駡鬕\",\n  \"mái\": \"薶霾\",\n  \"mǎi\": \"买荬買嘪蕒鷶\",\n  \"mài\": \"劢迈佅売麦卖唛脈麥衇勱賣邁霡霢\",\n  \"mān\": \"颟顢\",\n  \"mán\": \"姏悗蛮絻谩慲摱馒樠瞞鞔謾饅鳗鬘鬗鰻矕蠻\",\n  \"mǎn\": \"娨屘満满滿螨襔蟎鏋矕\",\n  \"màn\": \"曼僈鄤墁嫚幔慢摱漫獌缦蔄槾澫熳澷镘縵鏝蘰\",\n  \"māng\": \"牤\",\n  \"máng\": \"邙吂忙汒芒尨杗杧盲盳厖恾笀茫哤娏庬浝狵朚牻硭釯铓痝蛖鋩駹蘉\",\n  \"mǎng\": \"莽莾硥茻壾漭蟒蠎\",\n  \"màng\": \"\",\n  \"māo\": \"貓\",\n  \"máo\": \"毛矛芼枆牦茅茆旄罞渵軞酕堥嵍楙锚緢鉾髦氂犛蝥貓髳錨蟊鶜\",\n  \"mǎo\": \"冇卯夘乮峁戼泖昴铆笷蓩鉚\",\n  \"mào\": \"冃皃芼冐茂柕眊秏贸旄耄袤覒媢帽萺貿鄚愗暓毷瑁瞀貌鄮蝐懋\",\n  \"me\": \"庅麽麼嚜\",\n  \"mē\": \"嚒\",\n  \"mè\": \"濹嚰\",\n  \"méi\": \"坆沒枚玫苺栂眉脄莓梅珻脢郿堳媒嵋湄湈猸睂葿楣楳煤瑂禖腜塺槑酶镅鹛鋂霉穈徾鎇攗鶥黴\",\n  \"měi\": \"毎每凂美挴浼羙媄嵄渼媺镁嬍燘躾鎂黣\",\n  \"mèi\": \"妹抺沬旀昧祙袂眛媚寐殙痗跊鬽煝睸韎魅篃蝞嚜櫗\",\n  \"mēn\": \"悶椚\",\n  \"mén\": \"门们扪汶怋玧钔門們閅捫菛璊瞞穈鍆亹斖虋\",\n  \"mèn\": \"悗惛焖悶暪燜鞔懑懣\",\n  \"mēng\": \"掹擝矇\",\n  \"méng\": \"尨甿虻庬莔萌溕盟雺甍鄳儚橗瞢蕄蝱鄸鋂髳幪懜懞濛獴曚朦檬氋礞鯍鹲艨矒靀霿饛顭鸏\",\n  \"měng\": \"黾冡勐猛黽锰艋蜢瞢懜懞蟒錳懵蠓鯭矒鼆\",\n  \"mèng\": \"孟梦夢夣懜霥癦\",\n  \"mī\": \"咪瞇\",\n  \"mí\": \"冞祢迷袮猕谜蒾詸摵瞇謎醚彌擟瞴縻藌麊麋麿檷禰靡瀰獼蘪麛镾戂攠瓕蘼爢醾醿鸍釄\",\n  \"mǐ\": \"米芈侎沵羋弭洣敉粎脒渳葞蔝銤彌濔孊攠灖\",\n  \"mì\": \"冖糸汨沕宓怽枈觅峚祕宻密淧覔覓幂谧塓幎覛嘧榓滵漞熐蔤蜜鼏冪樒幦濗謐櫁簚羃\",\n  \"mián\": \"宀芇杣眠婂绵媔棉綿緜臱蝒嬵檰櫋矈矊矏\",\n  \"miǎn\": \"丏汅免沔黾勉眄娩莬偭冕勔渑喕媔愐湎睌缅葂黽絻腼澠緬靦鮸\",\n  \"miàn\": \"靣面牑糆麫麪麺麵\",\n  \"miāo\": \"喵\",\n  \"miáo\": \"苗媌描瞄鹋嫹緢鶓\",\n  \"miǎo\": \"厸仯劰杪眇秒淼渺缈篎緲藐邈\",\n  \"miào\": \"妙庙玅竗庿缪廟繆\",\n  \"miē\": \"乜吀咩哶孭\",\n  \"mié\": \"\",\n  \"miè\": \"灭烕眜覕搣滅蔑薎鴓幭懱瀎篾櫗簚礣蠛衊鑖鱴\",\n  \"mín\": \"民忟垊姄岷忞怋旻旼玟苠珉盿砇罠崏捪渂琘琝缗暋瑉痻碈鈱緍緡賯錉鴖鍲\",\n  \"mǐn\": \"皿冺刡忟闵呡忞抿泯黾勄敃闽悯敏笢笽惽湏湣閔黽愍敯暋僶閩慜憫潣簢鳘蠠鰵\",\n  \"míng\": \"名明鸣洺眀茗冥朙眳铭鄍嫇溟猽蓂詺暝榠銘鳴瞑螟覭\",\n  \"mǐng\": \"佲姳凕嫇慏酩\",\n  \"mìng\": \"命掵\",\n  \"miǔ\": \"\",\n  \"miù\": \"谬缪繆謬\",\n  \"mō\": \"摸嚤\",\n  \"mó\": \"庅尛谟嫫馍摹膜骳麽麼魹橅糢嬤嬷謨謩擵饃蘑髍魔劘戂攠饝\",\n  \"mǒ\": \"懡\",\n  \"mò\": \"末圽沒妺帓殁歿歾沫茉陌帞昩枺狢皌眜眿砞秣莈眽絈袹絔蛨貃嗼塻寞漠獏蓦貈貊貉銆靺墨嫼瘼瞐瞙镆魩黙縸默瀎貘嚜藦蟔鏌爅驀礳纆耱\",\n  \"mōu\": \"哞\",\n  \"móu\": \"牟侔劺呣恈敄桙眸谋堥蛑缪踎謀繆鍪鴾麰鞪\",\n  \"mǒu\": \"厶某\",\n  \"mòu\": \"\",\n  \"mú\": \"毪氁\",\n  \"mǔ\": \"母亩牡坶姆拇畂峔牳畆畒胟娒畝畞砪畮鉧踇\",\n  \"mù\": \"木仫目凩朷牟沐狇坶炑牧苜毣莯蚞钼募雮墓幙幕慔楘睦鉬慕暯暮缪樢艒霂穆縸繆鞪\",\n  \"n\": \"\",\n  \"ń\": \"唔嗯\",\n  \"ň\": \"嗯\",\n  \"na\": \"\",\n  \"nā\": \"\",\n  \"ná\": \"秅拏拿挐嗱蒘搻誽镎鎿\",\n  \"nǎ\": \"乸雫\",\n  \"nà\": \"吶妠抐纳肭郍衲钠納袦捺笚笝豽軜貀鈉蒳靹魶\",\n  \"nái\": \"腉搱摨孻\",\n  \"nǎi\": \"乃奶艿氖疓妳廼迺倷釢嬭\",\n  \"nài\": \"佴奈柰耏耐萘渿鼐褦螚錼\",\n  \"nān\": \"囝囡\",\n  \"nán\": \"男抩枏侽柟娚畘莮喃遖暔楠諵難\",\n  \"nǎn\": \"赧揇湳萳煵腩嫨蝻戁\",\n  \"nàn\": \"妠婻諵難\",\n  \"nāng\": \"儾囔\",\n  \"náng\": \"乪涳搑憹嚢蠰饟馕欜饢\",\n  \"nǎng\": \"搑擃瀼曩攮灢馕\",\n  \"nàng\": \"儾齉\",\n  \"nāo\": \"孬\",\n  \"náo\": \"呶怓挠峱桡硇铙猱蛲詉碙摎撓嶩憹橈獶蟯夒譊鐃巎獿\",\n  \"nǎo\": \"垴恼悩脑匘脳堖惱嫐瑙腦碯憹獶\",\n  \"nào\": \"闹婥淖閙鬧臑\",\n  \"ne\": \"\",\n  \"né\": \"\",\n  \"nè\": \"疒讷吶抐眲訥\",\n  \"néi\": \"\",\n  \"něi\": \"娞浽馁脮腇餒鮾鯘\",\n  \"nèi\": \"內氝氞錗\",\n  \"nèn\": \"恁媆嫩嫰\",\n  \"néng\": \"\",\n  \"něng\": \"螚\",\n  \"nèng\": \"\",\n  \"ńg\": \"唔嗯\",\n  \"ňg\": \"嗯\",\n  \"nī\": \"妮\",\n  \"ní\": \"尼坭怩抳籾倪屔秜郳铌埿婗淣猊蚭棿蛪跜鈮聣蜺馜觬貎輗霓鲵鯢麑齯臡\",\n  \"nǐ\": \"伱伲你拟妳抳狔苨柅婗掜旎晲棿孴儞儗隬懝擬濔薿檷聻\",\n  \"nì\": \"屰氼伲抐昵胒逆匿眤秜堄惄嫟愵睨腻暱縌誽膩嬺\",\n  \"niān\": \"拈蔫\",\n  \"nián\": \"年秊哖姩秥粘溓鲇鮎鲶鵇黏鯰\",\n  \"niǎn\": \"涊淰焾辇榐辗撚撵碾輦簐蹍攆蹨躎\",\n  \"niàn\": \"卄廿念姩唸埝悥惗艌\",\n  \"niáng\": \"娘嬢孃釀\",\n  \"niǎng\": \"\",\n  \"niàng\": \"酿醸釀\",\n  \"niǎo\": \"鸟茑袅鳥嫋裊蔦樢嬝褭嬲\",\n  \"niào\": \"脲\",\n  \"niē\": \"捏揑\",\n  \"nié\": \"苶\",\n  \"niě\": \"\",\n  \"niè\": \"乜帇圼峊枿陧涅痆聂臬啮掜菍隉敜湼嗫嵲踂噛摰槷踗踙銸镊镍嶭篞臲鋷錜颞蹑嚙聶鎳闑孼孽櫱籋蘖囁攝齧巕糱糵蠥鑈囐囓讘躡鑷顳钀\",\n  \"nín\": \"囜恁脌您\",\n  \"nǐn\": \"拰\",\n  \"níng\": \"咛狞苧柠聍寍寕甯寗寜寧儜凝橣嚀嬣擰獰薴檸聹鑏鬡鸋\",\n  \"nǐng\": \"擰矃\",\n  \"nìng\": \"佞侫泞倿寍寕甯寗寜寧澝擰濘\",\n  \"niū\": \"妞孧\",\n  \"niú\": \"牜牛汼怓\",\n  \"niǔ\": \"忸扭沑狃纽杻炄钮紐莥鈕靵\",\n  \"niù\": \"抝\",\n  \"nóng\": \"农侬哝浓脓秾農儂辳噥濃蕽檂燶禯膿癑穠襛譨醲欁鬞\",\n  \"nǒng\": \"繷\",\n  \"nòng\": \"挊挵癑齈\",\n  \"nóu\": \"羺\",\n  \"nǒu\": \"\",\n  \"nòu\": \"搙槈耨獳檽鎒鐞\",\n  \"nú\": \"奴伮孥帑驽笯駑\",\n  \"nǔ\": \"伮努弩砮胬\",\n  \"nù\": \"怒傉搙\",\n  \"nuán\": \"奻渜\",\n  \"nuǎn\": \"渜湪暖煖煗餪\",\n  \"nuàn\": \"\",\n  \"nuó\": \"挪梛傩橠難儺\",\n  \"nuǒ\": \"袳袲\",\n  \"nuò\": \"耎诺喏掿毭逽愞搙搦锘搻榒稬諾蹃糑鍩懧懦糥穤糯\",\n  \"nǘ\": \"\",\n  \"nǚ\": \"钕籹釹\",\n  \"nǜ\": \"沑衂恧朒衄聏\",\n  \"nüè\": \"虐婩硸瘧\",\n  \"o\": \"筽\",\n  \"ō\": \"喔噢\",\n  \"ó\": \"哦\",\n  \"ǒ\": \"嚄\",\n  \"ò\": \"哦\",\n  \"ou\": \"\",\n  \"ōu\": \"讴吽沤欧殴瓯鸥區嘔塸漚歐毆熰甌膒鴎櫙藲謳鏂鷗\",\n  \"óu\": \"\",\n  \"ǒu\": \"吘禺偶腢嘔熰耦蕅藕\",\n  \"òu\": \"怄沤嘔慪漚\",\n  \"pā\": \"汃妑苩皅趴舥啪葩\",\n  \"pá\": \"杷爬钯掱琶筢潖\",\n  \"pǎ\": \"\",\n  \"pà\": \"汃帊帕怕袙\",\n  \"pāi\": \"拍\",\n  \"pái\": \"俳徘猅棑牌箄輫簲簰犤\",\n  \"pǎi\": \"廹\",\n  \"pài\": \"沠哌派渒湃蒎鎃\",\n  \"pān\": \"眅畨萠潘攀籓\",\n  \"pán\": \"丬爿肨柈洀胖眫湴盘跘媻幋蒰搫槃盤磐縏膰磻蹒瀊蟠蹣鎜鞶\",\n  \"pǎn\": \"坢盻\",\n  \"pàn\": \"冸判沜拚泮炍肨叛牉盼胖畔聁袢詊溿頖鋬闆鵥襻鑻\",\n  \"pāng\": \"乓汸沗胮雱滂膖霶\",\n  \"páng\": \"厐夆尨彷庞逄庬趽舽嫎徬膀篣螃鳑龎龐鰟\",\n  \"pǎng\": \"嗙耪覫\",\n  \"pàng\": \"炐肨胖眫\",\n  \"pāo\": \"抛拋脬萢藨穮\",\n  \"páo\": \"咆垉庖狍炰爮瓟袍铇匏烰袌跁軳鉋鞄褜麃麅\",\n  \"pǎo\": \"\",\n  \"pào\": \"奅疱皰砲袌靤麭嚗礟礮\",\n  \"pēi\": \"妚呸怌抷肧柸胚衃醅\",\n  \"péi\": \"阫陪培婄毰赔锫裵裴賠錇\",\n  \"pěi\": \"俖琣\",\n  \"pèi\": \"伂妃沛犻佩帔姵斾柭旆浿珮配淠棑媐蓜辔馷嶏霈攈轡\",\n  \"pēn\": \"噴濆歕\",\n  \"pén\": \"瓫盆湓葐\",\n  \"pěn\": \"呠翸\",\n  \"pèn\": \"喯噴\",\n  \"pēng\": \"亨匉怦抨泙恲胓砰梈烹硑絣軯剻閛漰嘭駍磞\",\n  \"péng\": \"芃朋挷竼倗捀莑堋弸淜袶棚椖傰塜塳搒漨痭硼稝蓬鹏樥熢憉澎輣篣篷膨錋韸髼蟚蟛鬅纄蘕韼鵬騯鬔鑝\",\n  \"pěng\": \"捧淎皏摓\",\n  \"pèng\": \"掽椪碰閛槰踫磞\",\n  \"pi\": \"榌\",\n  \"pī\": \"丕伓伾妚批纰邳坯岯怶披抷枈炋狉狓砒悂秛秠紕铍陴旇翍耚豾釽鈚鉟銔磇駓髬噼錃錍魾憵礕礔鎞霹\",\n  \"pí\": \"皮仳阰纰芘陂枇肶毘毗疲笓紕蚍郫铍啤埤崥猈蚾蚽豼焷琵禆脾腗裨鈹鲏罴膍蜱罷隦魮壀螕鮍篺螷貔鞞鵧羆朇鼙蠯\",\n  \"pǐ\": \"匹庀疋仳圮吡苉悂脴痞銢嶏諀鴄擗噽癖嚭\",\n  \"pì\": \"屁埤淠揊嫓媲睥潎稫僻澼嚊濞甓疈譬闢鷿鸊\",\n  \"piān\": \"囨偏媥楄犏篇翩鍂鶣\",\n  \"pián\": \"骈胼缏腁楩賆跰瑸緶骿蹁駢璸騈\",\n  \"piǎn\": \"覑谝貵諞\",\n  \"piàn\": \"猵骗魸獱騗騙\",\n  \"piāo\": \"剽勡嘌嫖彯慓缥飘旚縹翲螵犥飃飄魒\",\n  \"piáo\": \"嫖瓢薸闝\",\n  \"piǎo\": \"莩殍缥瞟篻縹醥皫顠\",\n  \"piào\": \"僄彯徱骠驃鰾\",\n  \"piē\": \"氕覕潎撆暼瞥\",\n  \"piě\": \"丿苤鐅\",\n  \"piè\": \"嫳\",\n  \"pīn\": \"拚姘拼砏礗穦馪驞\",\n  \"pín\": \"玭贫娦貧琕嫔嬪薲嚬矉蘋蠙颦顰\",\n  \"pǐn\": \"品榀\",\n  \"pìn\": \"牝汖聘\",\n  \"pīng\": \"乒甹俜娉涄砯聠艵頩\",\n  \"píng\": \"平评凭呯坪岼泙郱帡庰枰洴玶胓荓瓶帲淜硑萍蚲塀幈焩甁缾蓱蛢評馮軿鲆凴竮鉼慿箳輧憑鮃檘簈蘋\",\n  \"pǐng\": \"屛\",\n  \"pìng\": \"\",\n  \"pō\": \"钋陂坡岥泺泼釙翍颇溌酦頗潑醗濼醱鏺\",\n  \"pó\": \"婆嘙搫蔢鄱皤櫇嚩\",\n  \"pǒ\": \"叵尀钷笸鉕箥駊髲\",\n  \"pò\": \"廹岶敀昢洦珀哱烞砶破粕奤湐猼蒪魄\",\n  \"pōu\": \"抙剖娝捊\",\n  \"póu\": \"抔抙垺捊掊裒箁\",\n  \"pǒu\": \"咅哣婄掊棓犃\",\n  \"pū\": \"攵攴扑抪炇柨陠痡秿噗撲潽鋪鯆\",\n  \"pú\": \"圤匍捗莆菩菐葡蒲蒱僕箁酺墣獛璞濮瞨穙镤贌纀鏷\",\n  \"pǔ\": \"圃埔浦烳普圑溥暜谱諩擈樸氆檏镨譜蹼鐠\",\n  \"pù\": \"痡舗舖鋪曝\",\n  \"qi\": \"啐\",\n  \"qī\": \"七迉沏恓柒倛凄桤郪娸悽戚捿桼淒萋喰攲敧棲欹欺紪缉傶褄僛嘁墄慽榿漆緀慼緝諆踦螇霋蹊魌鏚鶈\",\n  \"qí\": \"丌亓伎祁圻岓岐忯芪亝斉歧畁祇祈肵俟疧荠剘斊旂竒耆脐蚔蚑蚚陭颀埼崎帺掑淇猉畦萁萕跂軝釮骐骑嵜棊棋琦琪祺蛴隑愭碁碕稘褀锜頎鬿旗粸綥綨綦蜝蜞齊璂禥蕲觭螧錡鲯懠濝薺藄鄿檱櫀簯簱臍騎騏鳍蘄鯕鵸鶀麒籏艩蠐鬐騹鰭玂麡\",\n  \"qǐ\": \"乞邔企屺芑启呇杞玘盀唘豈起啔啓啟婍梩绮袳跂晵棨綮綺諬闙\",\n  \"qì\": \"气讫忔扱気汔迄呚弃汽矵芞亟呮泣炁盵咠洓竐栔欫氣訖唭焏夡愒棄湆湇葺滊碛摖暣甈碶噐憇槭趞器憩磜磧磩藒礘罊蟿鐑\",\n  \"qiā\": \"抲掐袷揢葜擖\",\n  \"qiá\": \"\",\n  \"qiǎ\": \"拤峠跒酠鞐\",\n  \"qià\": \"圶冾匼咭帢恰洽胢殎硈愘磍髂\",\n  \"qiān\": \"千仟阡圱圲奷扦汘芊迁佥岍杄汧茾欦竏臤钎拪牵粁悭挳蚈谸婜孯牽釺掔谦鈆僉愆签鉛骞鹐慳搴摼撁厱磏諐遷鳽褰謙顅檶攐攑櫏簽鏲鵮孅攓騫籖鬜鬝籤韆\",\n  \"qián\": \"仱岒忴扲拑玪乹前炶荨钤歬虔蚙钱钳偂掮揵軡亁媊朁犍葥鈐煔鉗墘榩箝銭撍潛潜羬蕁橬錢黔鎆黚騝濳騚灊鰬\",\n  \"qiǎn\": \"凵肷唊淺嵰遣槏膁蜸谴缱繾譴鑓\",\n  \"qiàn\": \"欠刋伣芡俔茜倩悓堑掅傔棈椠欿嗛慊皘蒨塹歉綪蔳儙槧篏輤篟壍嬱縴\",\n  \"qiāng\": \"羌戕戗斨枪玱矼羗猐啌跄嗴椌溬獇腔嗆搶蜣锖嶈戧摤槍牄瑲羫锵篬謒蹌蹡鎗鏘鏹鶬\",\n  \"qiáng\": \"強墙嫱蔷樯漒蔃墻嬙廧彊薔檣牆艢蘠\",\n  \"qiǎng\": \"強羟搶羥墏彊繈襁镪繦鏹\",\n  \"qiàng\": \"戗炝唴跄嗆戧摪熗羻\",\n  \"qiāo\": \"帩硗郻喿嵪煍跷鄥鄡劁勪幓敲毃踍锹墝碻磝頝骹墽幧橇燆缲橾磽鍬鍫礉繑繰趬蹺蹻鏒鐰\",\n  \"qiáo\": \"乔侨峤荍荞桥硚菬喬睄僑摮槗谯嘺墧嫶嶠憔潐蕎鞒樵橋燋犞癄瞧礄翹櫵藮譙趫鐈鞽顦\",\n  \"qiǎo\": \"丂巧釥愀髜\",\n  \"qiào\": \"诮陗峭窍偢殻殼誚髚僺嘺撬箾噭撽鞘韒礉竅翹鞩躈\",\n  \"qiē\": \"苆\",\n  \"qié\": \"癿伽茄聺\",\n  \"qiě\": \"\",\n  \"qiè\": \"厒妾怯疌郄匧窃悏挈栔洯帹惬淁笡愜椄猰蛪趄跙嗛慊朅稧箧锲篋踥穕鍥鯜竊籡\",\n  \"qīn\": \"兓侵钦衾骎菳媇嵚欽嵰綅誛嶔親顉駸鮼寴\",\n  \"qín\": \"庈忴扲芩芹肣矜埐珡矝秦耹菦蚙捦菳琴琹禽覃鈙鈫雂勤嗪嫀溱靲廑慬噙嶜擒斳鳹懄檎澿瘽螓懃蠄鵭\",\n  \"qǐn\": \"坅昑笉梫赾寑锓寝寖寢鋟螼\",\n  \"qìn\": \"吢吣抋沁唚菣揿搇撳寴瀙藽\",\n  \"qīng\": \"靑青氢轻倾卿郬圊埥寈氫淸清軽傾綪蜻輕錆鲭鯖鑋\",\n  \"qíng\": \"夝甠剠勍啨情殑硘晴棾氰葝暒擏樈擎檠黥\",\n  \"qǐng\": \"苘顷请庼頃廎漀請檾謦\",\n  \"qìng\": \"庆凊掅殸渹碃箐綮靘慶磬親儬濪罄櫦\",\n  \"qiōng\": \"\",\n  \"qióng\": \"卭邛宆穷穹茕桏惸琁筇笻赹焪焭琼舼蛬蛩煢熍睘跫銎瞏窮儝嬛憌橩璚藑瓊竆藭瓗\",\n  \"qiòng\": \"\",\n  \"qiū\": \"丘丠邱坵恘秌秋恷蚯媝湫萩楸湬塸蓲鹙篍緧蝵穐趥龜橚鳅蟗鞦鞧蘒鰌鰍鶖蠤龝\",\n  \"qiú\": \"厹叴囚扏犰玌艽芁朹汓肍求虬泅牫虯俅觓訅訄酋唒浗紌莍逎逑釚梂殏毬球赇釻頄崷巯渞湭皳盚遒煪絿蛷裘巰觩賕璆蝤銶醔鮂鼽鯄鰽\",\n  \"qiǔ\": \"搝糗\",\n  \"qiù\": \"\",\n  \"qū\": \"伹佉匤岖诎阹驱呿坥屈岴抾浀祛胠袪區焌紶蛆躯煀筁粬蛐詘趍嶇憈駆敺觑誳駈麹髷魼趨麯覰覷軀鶌麴黢覻驅鰸鱋\",\n  \"qú\": \"佢劬斪朐胊菃衐鸲淭絇翑蚼葋軥蕖璖磲螶鴝璩翵蟝瞿鼩蘧忂灈戵欋氍爠籧臞癯欔蠷衢躣蠼鑺鸜\",\n  \"qǔ\": \"苣取竘娶紶詓竬蝺龋齲\",\n  \"qù\": \"去厺刞欪耝阒觑閴麮闃鼁覰覷覻\",\n  \"quān\": \"奍弮悛圏棬椦箞鐉\",\n  \"quán\": \"全权佺狋诠姾峑恮泉洤荃拳牷辁啳埢婘惓捲痊硂铨椦湶犈筌絟葲搼楾瑔觠詮跧輇蜷銓槫権踡縓醛駩闎鳈鬈騡孉巏鰁權齤矔蠸颧顴灥\",\n  \"quǎn\": \"犭犬犮畎烇绻綣虇\",\n  \"quàn\": \"劝牶勧韏勸灥\",\n  \"quē\": \"炔缺缼蚗蒛阙闕\",\n  \"qué\": \"瘸\",\n  \"què\": \"汋却卻埆崅悫琷傕敠敪棤硞确阕塙搉皵碏阙鹊愨榷墧慤碻確趞燩闋礐闕鵲礭\",\n  \"qūn\": \"夋囷逡箘歏\",\n  \"qún\": \"宭峮帬裙羣群裠麇\",\n  \"qǔn\": \"\",\n  \"rán\": \"呥肰衻袇蚦袡蚺然髥嘫髯燃繎\",\n  \"rǎn\": \"冄冉姌苒染珃媣蒅熯橪\",\n  \"ràn\": \"\",\n  \"rāng\": \"\",\n  \"ráng\": \"穣儴勷瀼獽蘘禳瓤穰躟鬤\",\n  \"rǎng\": \"壌壤攘爙纕\",\n  \"ràng\": \"让懹譲讓\",\n  \"ráo\": \"娆荛饶桡嬈蕘橈襓饒\",\n  \"rǎo\": \"扰娆隢嬈擾\",\n  \"rào\": \"绕遶穘繞\",\n  \"ré\": \"捼\",\n  \"rě\": \"喏惹\",\n  \"rè\": \"热渃熱\",\n  \"rén\": \"亻人仁壬忈朲忎秂芢魜銋鵀\",\n  \"rěn\": \"忍荏栠栣荵秹菍棯稔綛躵銋\",\n  \"rèn\": \"刃刄认仞仭讱屻岃扨纫妊杒牣纴肕轫韧饪祍姙紉衽紝訒軔梕袵釰釼絍腍鈓靱靭韌飪認餁\",\n  \"rēng\": \"扔\",\n  \"réng\": \"仍辸礽芿陾\",\n  \"rì\": \"日驲囸氜衵釰釼鈤馹\",\n  \"róng\": \"戎肜栄狨绒茙茸荣容峵毧烿傛媶嵘搑絨羢嫆嵤搈榵溶蓉榕榮熔瑢穁槦縙蝾褣镕螎融駥嬫嶸爃鎔瀜曧蠑\",\n  \"rǒng\": \"冗宂坈傇軵縙氄\",\n  \"ròng\": \"穃縙\",\n  \"róu\": \"厹禸柔粈脜媃揉渘葇楺煣瑈腬糅蝚蹂輮鍒鞣瓇騥鰇鶔\",\n  \"rǒu\": \"韖\",\n  \"ròu\": \"肉宍楺譳\",\n  \"rū\": \"嶿\",\n  \"rú\": \"邚如吺侞帤茹挐桇袽铷渪筎蒘銣蕠蝡儒鴑嚅嬬孺濡獳薷鴽曘檽襦繻蠕颥醹顬鱬\",\n  \"rǔ\": \"汝肗乳辱鄏擩\",\n  \"rù\": \"入扖杁洳嗕媷溽缛蓐鳰褥縟\",\n  \"ruán\": \"堧撋壖\",\n  \"ruǎn\": \"阮朊软耎偄軟媆瑌腝碝緛輭檽瓀礝\",\n  \"ruàn\": \"緛\",\n  \"ruí\": \"苼桵甤緌蕤\",\n  \"ruǐ\": \"惢蕋蕊橤繠壡蘃蘂\",\n  \"ruì\": \"兊兌抐汭芮枘笍蚋锐瑞蜹睿銳鋭叡鏸\",\n  \"rún\": \"瞤\",\n  \"rǔn\": \"\",\n  \"rùn\": \"闰润閏閠潤橍膶\",\n  \"ruó\": \"挼捼\",\n  \"ruò\": \"叒偌弱鄀婼渃焫楉嵶蒻箬篛爇鰙鰯鶸\",\n  \"sa\": \"\",\n  \"sā\": \"仨\",\n  \"sǎ\": \"訯靸潵鞈攃灑躠纚\",\n  \"sà\": \"卅泧钑飒脎萨鈒摋隡馺蕯颯薩櫒鏾\",\n  \"sāi\": \"毢愢揌毸腮嘥噻鳃顋鰓\",\n  \"sǎi\": \"嗮\",\n  \"sài\": \"赛僿賽簺\",\n  \"san\": \"壭\",\n  \"sān\": \"三弎叁參叄叅毶毵厁毿犙鬖\",\n  \"sǎn\": \"仐伞傘糁馓糝糤糣繖鏒鏾饊\",\n  \"sàn\": \"俕帴閐潵\",\n  \"sāng\": \"桒桑喪槡\",\n  \"sǎng\": \"嗓搡磉褬颡鎟顙\",\n  \"sàng\": \"喪\",\n  \"sāo\": \"掻慅搔溞缫懆缲螦繅鳋颾騒繰騷鰠鱢\",\n  \"sǎo\": \"埽掃嫂\",\n  \"sào\": \"埽掃瘙懆氉矂髞\",\n  \"sē\": \"閪\",\n  \"sè\": \"色拺洓栜涩啬渋粣铯雭歮琗嗇瑟摵歰銫槭澁廧懎擌濇濏瘷穑薔澀璱瀒穡鎍繬穯轖鏼闟譅飋\",\n  \"sēn\": \"森椮槮襂\",\n  \"sěn\": \"\",\n  \"sēng\": \"僧鬙\",\n  \"sèng\": \"\",\n  \"sī\": \"厶纟丝司糹糸私咝泀俬恖虒鸶偲傂媤愢斯絲缌蛳楒禗鉰飔凘厮禠罳蜤銯锶嘶噝廝撕澌磃緦蕬鋖燍螄鍶蟖蟴颸騦鯣鐁鷥鼶\",\n  \"sí\": \"\",\n  \"sǐ\": \"死愢\",\n  \"sì\": \"巳亖四寺汜佀兕姒泤祀価孠杫泗饲驷俟娰枱柶洠牭洍涘肂飤梩笥耛耜釲竢覗嗣肆貄鈶鈻飴飼榹銉禩駟蕼儩騃瀃\",\n  \"sōng\": \"忪枀松枩娀柗倯凇崧庺梥淞菘愡揔棇嵩硹憽濍檧鬆\",\n  \"sóng\": \"\",\n  \"sǒng\": \"怂悚捒耸竦傱愯楤嵷摗漎慫聳駷\",\n  \"sòng\": \"吅讼宋诵送颂訟頌誦鎹餸\",\n  \"sōu\": \"凁捒捜鄋嗖廀廋搜溲獀蒐蓃馊摉飕摗锼撨艘螋醙鎪餿颼颾鏉騪\",\n  \"sǒu\": \"叜叟傁棷蓃嗾瞍擞薮擻藪櫢籔\",\n  \"sòu\": \"欶嗽擞瘶擻\",\n  \"sū\": \"甦酥稡稣窣穌鯂蘇蘓櫯囌\",\n  \"sú\": \"圱俗\",\n  \"sǔ\": \"\",\n  \"sù\": \"玊夙诉泝肃洬涑珟素莤速埣梀殐粛骕傃棴粟訴谡嗉塑塐嫊愫溯溸肅遡鹔僳愬摵榡膆蔌觫趚遬憟樕樎潥碿鋉餗潚縤橚璛簌縮藗謖蹜驌鱐鷫\",\n  \"suān\": \"狻痠酸\",\n  \"suǎn\": \"匴篹\",\n  \"suàn\": \"祘笇筭蒜算\",\n  \"suī\": \"夊芕虽倠哸娞浽荾荽眭毸滖睢缞嗺熣濉縗鞖雖\",\n  \"suí\": \"绥隋随遀綏隨瓍髄\",\n  \"suǐ\": \"膸瀡髓\",\n  \"suì\": \"亗岁砕祟谇埣嵗遂歲歳煫睟碎隧嬘澻穂誶賥檖燧璲禭穗穟繀襚邃旞繐繸譢鐆鏸鐩韢\",\n  \"sūn\": \"狲荪孫喰飧飱搎猻蓀槂蕵薞\",\n  \"sǔn\": \"扻损笋隼筍損榫箰簨鎨鶽\",\n  \"sùn\": \"摌\",\n  \"suō\": \"唆娑挱莏莎傞挲桫梭睃嗍嗦羧蓑摍趖簑簔縮鮻\",\n  \"suó\": \"\",\n  \"suǒ\": \"所乺唢索琑琐嫅惢锁嗩暛溑獕瑣褨璅縒鎍鎖鎻鏁\",\n  \"suò\": \"逤溹蜶\",\n  \"shā\": \"杀杉纱乷剎砂唦挱殺猀粆紗莎挲桬毮铩痧硰摋蔱裟榝樧魦鲨閷髿鎩鯊鯋繺\",\n  \"shá\": \"啥\",\n  \"shǎ\": \"傻儍\",\n  \"shà\": \"倽唼啑帹菨萐喢嗄廈歃翜歰箑翣濈閯霎\",\n  \"shāi\": \"筛篩諰簁簛籭\",\n  \"shǎi\": \"摋\",\n  \"shài\": \"晒攦曬\",\n  \"shān\": \"山彡邖圸删刪杉芟姍姗衫钐埏挻柵炶狦珊舢痁脠軕笘釤閊傓跚剼搧煔嘇幓煽潸澘穇檆縿膻鯅羴羶\",\n  \"shán\": \"\",\n  \"shǎn\": \"闪陕炶陝閃閄晱煔睒摻熌覢\",\n  \"shàn\": \"讪汕姍姗疝钐剡訕赸掞釤善單椫禅銏骟僐鄯儃墡墠撣潬缮嬗嶦擅敾樿歚禪膳磰謆赡繕蟮蟺譱贍鐥饍騸鳝鳣灗鱓鱔\",\n  \"shang\": \"\",\n  \"shāng\": \"伤殇商愓湯觞傷禓墒慯滳漡蔏殤熵螪觴謪鬺\",\n  \"shǎng\": \"垧扄晌埫赏樉賞鋿鏛贘鑜\",\n  \"shàng\": \"丄尙尚恦绱緔鞝\",\n  \"shāo\": \"娋弰烧莦焼萷旓筲艄輎蕱燒鞘髾鮹\",\n  \"sháo\": \"勺芍杓苕柖玿韶\",\n  \"shǎo\": \"\",\n  \"shào\": \"佋劭卲邵绍柖哨娋袑紹睄綤潲\",\n  \"shē\": \"奓奢猞赊畭畬畲輋賒賖檨\",\n  \"shé\": \"舌佘虵阇揲蛥闍磼\",\n  \"shě\": \"舍捨\",\n  \"shè\": \"厍设社泏舎舍厙挕涉涻渉設赦弽慑摂滠慴蔎歙蠂韘騇懾攝灄麝欇\",\n  \"shéi\": \"誰\",\n  \"shēn\": \"申屾扟伸身侁冞呻妽籶绅罙诜姺柛氠珅穼籸娠峷甡眒砷莘參叄堔敒深紳兟叅棽葠裑訷嫀搷罧蓡詵幓甧糁蔘糂燊薓駪鲹曑糝糣鯓鵢鯵鰺\",\n  \"shén\": \"神榊鉮鰰\",\n  \"shěn\": \"邥吲弞抌审矤哂矧宷谂谉婶淰渖訠棯審諗頣魫曋瞫嬸瀋覾讅\",\n  \"shèn\": \"肾侺昚胂涁眘渗祳脤谌腎葚愼慎椹瘆蜄蜃滲鋠瘮黮\",\n  \"shēng\": \"升生阩呏声斘昇枡泩狌苼殅牲珄竔陞曻陹殸笙湦焺甥鉎聲鍟鼪鵿\",\n  \"shéng\": \"渑绳憴澠縄繉繩譝\",\n  \"shěng\": \"眚偗渻\",\n  \"shèng\": \"圣乗娍胜晠晟剰剩勝椉貹嵊琞聖墭榺蕂橳賸\",\n  \"shi\": \"辻籂\",\n  \"shī\": \"尸失师厔呞虱诗邿鸤屍施浉狮師絁釶湤湿葹溮溼獅蒒蓍詩鉇嘘瑡酾鳲噓箷蝨鳾褷鲺濕鍦鯴鰤鶳襹釃\",\n  \"shí\": \"十饣乭时竍実实旹飠姼峕炻祏蚀埘宲時莳寔湜遈塒嵵溡蒔鉐實榯碩蝕鲥鮖鼫識鼭鰣\",\n  \"shǐ\": \"史矢乨豕使始驶兘宩屎狶痑笶榁鉂駛\",\n  \"shì\": \"士礻丗世仕市示卋式忕亊忯戺事侍势呩柹视试饰冟咶室峙恀恃拭昰是枾柿狧眂贳适栻烒眎眡耆舐莳轼逝铈啫埶畤秲視釈崼崻弑徥惿揓谥貰释勢嗜弒楴煶睗筮蒔觢試軾鈰鉃飾舓誓適鉽馶奭銴餝餙噬嬕澨澤諡諟遾檡螫謚簭襫醳釋鰘\",\n  \"shōu\": \"収收敊\",\n  \"shóu\": \"熟\",\n  \"shǒu\": \"扌手守垨首艏\",\n  \"shòu\": \"寿受狩兽售授涭绶痩膄壽夀瘦綬嘼獣獸鏉\",\n  \"shū\": \"书殳疋忬抒纾叔杸枢陎姝倐倏捈書殊紓婌悆掓梳淑焂菽軗鄃琡疎疏舒摅毹毺綀输瑹跾踈樞緰蔬輸橾鮛儵攄瀭鵨\",\n  \"shú\": \"朮尗秫孰赎蒣塾熟璹贖\",\n  \"shǔ\": \"鼡暏暑稌黍署蜀鼠數潻薥薯曙癙藷襡糬襩屬籔蠴鱪鱰\",\n  \"shù\": \"朮戍束沭述侸俞兪咰怸怷树竖荗恕捒庻庶絉蒁術隃尌裋竪腧鉥墅漱潄數澍豎樹濖錰霔鏣鶐虪\",\n  \"shuā\": \"唰\",\n  \"shuǎ\": \"耍\",\n  \"shuà\": \"誜\",\n  \"shuāi\": \"缞摔縗\",\n  \"shuǎi\": \"甩\",\n  \"shuài\": \"帅帥蟀卛\",\n  \"shuān\": \"闩拴閂栓絟\",\n  \"shuàn\": \"涮腨槫\",\n  \"shuāng\": \"双泷霜雙孀瀧骦孇騻欆礵鷞鹴艭驦鸘\",\n  \"shuǎng\": \"爽塽慡漺縔鏯\",\n  \"shuàng\": \"灀\",\n  \"shuí\": \"谁脽誰\",\n  \"shuǐ\": \"氵水氺閖\",\n  \"shuì\": \"帨挩捝涗涚娷祱稅税裞睡說説\",\n  \"shǔn\": \"吮楯\",\n  \"shùn\": \"顺眴舜順蕣橓瞚瞤瞬鬊\",\n  \"shuō\": \"說説\",\n  \"shuò\": \"妁洬烁朔铄欶矟搠蒴銏愬槊獡碩數箾鎙爍鑠\",\n  \"ta\": \"侤\",\n  \"tā\": \"他它牠祂趿铊塌榙溻鉈褟闧\",\n  \"tá\": \"\",\n  \"tǎ\": \"塔溚墖獭鮙鳎獺鰨\",\n  \"tà\": \"沓挞狧闼粏崉涾傝嗒搨遝遢阘榻毾漯禢撻澾誻踏鞈嚃橽錔濌蹋鞜鎉鎑闒鞳蹹躂嚺闟闥譶躢\",\n  \"tāi\": \"囼孡珆胎\",\n  \"tái\": \"旲邰坮抬骀枱炱炲菭跆鲐箈臺颱駘儓鮐嬯擡薹檯斄籉\",\n  \"tǎi\": \"奤\",\n  \"tài\": \"太冭夳忕汏忲汰汱态肽钛泰舦酞鈦溙態燤\",\n  \"tān\": \"坍贪怹啴痑舑貪摊滩嘽潬瘫擹攤灘癱\",\n  \"tán\": \"坛昙倓谈郯埮婒惔弾覃榃痰锬谭嘾墰墵彈憛潭談醈壇曇橝澹燂錟檀顃罈藫壜繵譚貚醰譠罎\",\n  \"tǎn\": \"忐坦袒钽菼毯僋鉭嗿緂儃憳憻暺醓璮襢\",\n  \"tàn\": \"叹炭倓埮探傝湠僋嘆碳舕歎\",\n  \"tāng\": \"铴湯嘡劏羰蝪薚镗蹚鏜闛鞺鼞\",\n  \"táng\": \"坣唐堂傏啺愓棠鄌塘嵣搪溏蓎隚榶漟煻瑭禟膅樘磄糃膛橖篖糖螗踼糛螳赯醣鎕餹鏜闛饄鶶\",\n  \"tǎng\": \"伖帑偒傥耥躺镋鎲儻戃灙曭爣矘钂\",\n  \"tàng\": \"烫铴摥燙鐋\",\n  \"tāo\": \"夲夵弢抭涛绦掏涭絛詜嫍幍慆搯滔槄瑫韬飸縚縧濤謟轁鞱韜饕\",\n  \"táo\": \"匋迯咷洮逃桃陶啕梼淘绹萄祹裪綯蜪鞀醄鞉鋾駣檮饀騊鼗\",\n  \"tǎo\": \"讨討\",\n  \"tào\": \"套\",\n  \"tè\": \"忑忒特脦犆铽慝鋱蟘\",\n  \"tēng\": \"熥膯鼟\",\n  \"téng\": \"疼痋幐腾誊漛滕邆縢螣駦謄儯藤騰籐鰧籘虅驣\",\n  \"tèng\": \"霯\",\n  \"tī\": \"剔梯锑踢銻擿鷉鷈體\",\n  \"tí\": \"苐厗荑桋绨偍珶啼媂媞崹惿渧稊缇罤遆鹈嗁瑅禔綈睼碮褆徲漽磃緹蕛题趧蹄醍謕蹏鍗鳀題鮷鵜騠鯷鶗鶙禵鷤\",\n  \"tǐ\": \"挮徥躰骵醍軆體\",\n  \"tì\": \"戻奃屉剃朑俶倜悌挮涕眣绨逖啑屜悐惕掦笹逷屟惖揥替棣綈裼褅歒殢髰薙嚏鬀嚔瓋鬄籊趯\",\n  \"tiān\": \"天兲呑婖添酟靔黇靝\",\n  \"tián\": \"田屇沺恬畑畋盷胋钿甛甜菾湉塡搷阗瑱碵緂磌窴鴫璳闐鷆鷏\",\n  \"tiǎn\": \"奵忝殄倎栝唺悿淟紾铦晪琠腆觍痶睓舔銛餂覥賟銽錪\",\n  \"tiàn\": \"掭菾琠瑱舚\",\n  \"tiāo\": \"旫佻庣恌條祧聎\",\n  \"tiáo\": \"芀朷岧岹苕迢祒條笤萔铫蓚蓨蓧龆樤蜩銚調鋚鞗髫鲦鯈鎥齠鰷\",\n  \"tiǎo\": \"宨晀朓脁窕誂斢窱嬥\",\n  \"tiào\": \"啁眺粜絩覜趒糶\",\n  \"tiē\": \"怗贴萜聑貼跕\",\n  \"tié\": \"\",\n  \"tiě\": \"铁蛈鉄僣銕鐡鐵驖\",\n  \"tiè\": \"呫飻餮\",\n  \"tīng\": \"厅庁汀听庍耓厛烃桯烴渟綎鞓聴聼廰聽廳\",\n  \"tíng\": \"邒廷亭庭莛停婷嵉渟筳葶蜓楟榳閮霆聤蝏諪鼮\",\n  \"tǐng\": \"圢甼町侹侱娗挺涏梃烶珽脡铤艇颋誔鋌閮頲\",\n  \"tìng\": \"忊梃濎\",\n  \"tōng\": \"囲炵通痌絧嗵蓪樋\",\n  \"tóng\": \"仝佟彤侗峂庝哃垌峒峝狪茼晍桐浵烔砼蚒偅痌眮秱铜硧童粡絧詷赨酮鉖僮勭鉵銅餇鲖潼獞曈朣橦氃燑犝膧瞳穜鮦\",\n  \"tǒng\": \"侗统捅桶筒統筩綂\",\n  \"tòng\": \"恸痛衕慟憅\",\n  \"tou\": \"\",\n  \"tōu\": \"偸偷婾媮緰鋀鍮\",\n  \"tóu\": \"亠投骰頭\",\n  \"tǒu\": \"妵紏敨飳斢黈蘣\",\n  \"tòu\": \"透埱\",\n  \"tu\": \"汢\",\n  \"tū\": \"凸宊禿秃怢突涋捸堗湥痜葖嶀鋵鵚鼵\",\n  \"tú\": \"図图凃峹庩徒悇捈涂荼莵途啚屠梌菟揬稌趃塗嵞瘏筡腯蒤鈯圗圖廜摕潳瑹跿酴墿馟檡鍎駼鵌鶟鷋鷵\",\n  \"tǔ\": \"土圡钍唋釷\",\n  \"tù\": \"兎迌兔唋莵堍菟鋀鵵\",\n  \"tuān\": \"湍猯圕煓貒\",\n  \"tuán\": \"団团抟剸團塼慱摶漙槫篿檲鏄糰鷒鷻\",\n  \"tuǎn\": \"畽墥疃\",\n  \"tuàn\": \"彖湪猯褖貒\",\n  \"tuī\": \"忒推蓷藬讉\",\n  \"tuí\": \"弚颓僓隤墤尵橔頺頹頽魋穨蘈蹪\",\n  \"tuǐ\": \"俀聉腿僓蹆骽\",\n  \"tuì\": \"侻退娧煺蛻蜕螁駾\",\n  \"tūn\": \"吞呑旽涒啍朜焞噋憞暾\",\n  \"tún\": \"坉庉忳芚饨蛌豘豚軘飩鲀魨霕黗臀臋\",\n  \"tǔn\": \"氽\",\n  \"tùn\": \"\",\n  \"tuō\": \"乇仛讬托扡汑饦杔侂咃咜拕拖沰挩捝莌袉袥託啴涶脫脱飥馲魠鮵\",\n  \"tuó\": \"阤驮佗陀陁坨岮沱沲狏驼侻柁砤砣袉铊鸵紽堶媠詑跎酡碢鉈馱槖駄鋖駞駝橐鮀鴕鼧騨鼍驒驝鼉\",\n  \"tuǒ\": \"彵妥庹椭楕嫷撱橢鵎鰖\",\n  \"tuò\": \"杝柝毤唾涶萚跅毻嶞箨蘀籜\",\n  \"wa\": \"哇\",\n  \"wā\": \"屲穵呙劸咼哇徍挖洼娲畖窊唲啘媧窐嗗瓾蛙搲溛漥窪鼃攨韈\",\n  \"wá\": \"娃\",\n  \"wǎ\": \"佤邷咓砙瓸搲\",\n  \"wà\": \"帓袜婠聉嗢搲腽膃韎襪韤\",\n  \"wai\": \"\",\n  \"wāi\": \"呙咼歪喎竵瀤\",\n  \"wǎi\": \"崴\",\n  \"wài\": \"外顡\",\n  \"wān\": \"毌夗弯剜埦婠帵捥塆湾睕蜿潫豌鋺彎壪灣\",\n  \"wán\": \"丸刓汍纨芄完岏忨抏杬玩笂紈捖蚖顽烷琓貦頑翫\",\n  \"wǎn\": \"夘夗倇唍挽盌莞莬埦婉惋捥晚晥梚涴绾脘菀萖惌晩晼椀琬皖畹碗箢綩綰輓踠鋔鋺\",\n  \"wàn\": \"卍卐妧杤捥脕掔腕萬絻綄輐槾澫鋄瞣薍錽蟃贃鎫贎\",\n  \"wāng\": \"尣尫尪汪尩瀇\",\n  \"wáng\": \"亾兦仼莣蚟朚\",\n  \"wǎng\": \"罓罒网彺忹抂徃往枉罖罔迬惘菵暀棢蛧辋網蝄誷輞瀇魍\",\n  \"wàng\": \"妄忘迋旺盳徍望暀朢\",\n  \"wēi\": \"厃危威倭烓偎逶隇隈喴媙崴嵔愄揋揻葨葳微椳楲溦煨詴蜲縅蝛覣嶶薇燰鳂癐癓巍鰃鰄霺\",\n  \"wéi\": \"囗韦圩囲围帏沩违闱隹峗峞洈為韋桅涠唯帷惟硙维喡圍媁嵬幃湋溈爲琟違潍維蓶鄬撝潙潿醀濰鍏闈鮠壝矀覹犩欈\",\n  \"wěi\": \"伟伪纬芛苇炜玮洧娓屗捤浘荱诿偉偽唩崣捼梶痏硊萎隗骩媁嵔廆徫愇渨猥葦蒍骫骪暐椲煒瑋痿腲艉韪僞嶉撱碨磈鲔寪緯蔿諉踓韑頠薳儰濻鍡鮪瀢韙颹韡亹瓗斖\",\n  \"wèi\": \"卫未位味苿為畏胃叞軎猚硙菋谓喂喡媦渭爲猬煟墛瞆碨蔚蜼慰熭犚磑緭蝟衛懀罻衞謂餧鮇螱褽餵魏藯轊鏏霨鳚蘶饖瓗讆躗讏躛\",\n  \"wēn\": \"昷塭温缊榅殟溫瑥辒韫榲瘟緼縕豱輼轀鎾饂鳁鞰鰛鰮\",\n  \"wén\": \"文彣芠炆玟闻紋蚉蚊珳阌雯瘒聞馼駇魰鳼鴍螡閺閿蟁闅鼤繧闦\",\n  \"wěn\": \"伆刎吻呅忟抆呡忞歾肳紊桽脗稳穏穩\",\n  \"wèn\": \"问妏汶紋莬問渂揾搵絻顐璺\",\n  \"wēng\": \"翁嗡滃鹟聬螉鎓鶲\",\n  \"wěng\": \"勜奣塕嵡滃蓊暡瞈攚\",\n  \"wèng\": \"瓮蕹甕罋齆\",\n  \"wō\": \"挝倭莴唩涹渦猧萵喔窝窩蜗撾濄緺蝸踒薶\",\n  \"wǒ\": \"呙我咼婑婐捰\",\n  \"wò\": \"仴沃肟卧枂臥偓捾涴媉幄握渥焥硪楃腛斡瞃濣瓁臒龌馧龏齷\",\n  \"wū\": \"乌圬弙扜扝汚汙污邬呜巫杅杇於屋洿诬钨烏剭窏釫惡鄔嗚誈僫歍誣箼鋘螐鴮鎢鰞\",\n  \"wú\": \"无毋吳吴吾呉芜郚唔娪峿洖浯茣莁梧珸祦無铻鹀蜈墲蕪鋙鋘橆璑蟱鯃鵐譕鼯鷡\",\n  \"wǔ\": \"乄五午仵伍妩庑忤怃迕旿武玝侮倵娒捂逜陚啎娬牾堥珷摀碔鹉熓瑦舞嫵廡憮潕儛甒膴瞴鵡躌\",\n  \"wù\": \"兀勿务戊阢屼扤坞岉杌沕芴忢旿物矹俉卼敄柮误務唔娪悟悞悮粅趶晤焐婺嵍惡渞痦隖靰骛塢奦嵨溩雺雾僫寤熃誤鹜鋈窹霚鼿霧齀蘁騖鶩\",\n  \"xī\": \"夕兮邜吸忚扱汐西希扸卥昔析矽穸肸肹俙咥咭徆怸恓诶郗饻唏奚娭屖息悕氥浠牺狶莃唽悉惜晞桸欷淅渓烯焁焈琋硒羛菥赥釸傒惁晰晳焟焬犀睎稀粞翖翕舾鄎厀嵠徯溪煕皙碏蒠裼锡僖榽熄熈熙獡緆蜥覡誒豨閪餏嘻噏嬆嬉嶲憘潝瘜磎膝凞暿樨橀歙熻熺熹窸羲螅螇錫燨犠瞦礂蟋豀谿豯貕蹊巂糦繥釐雟鯑鵗觹譆醯鏭鐊隵嚱巇曦爔犧酅饎觽鼷蠵鸂觿鑴\",\n  \"xí\": \"习郋席習袭觋雭喺媳椺蒵蓆嶍漝趘槢薂隰檄謵鎴霫鳛飁騱騽鰼襲驨\",\n  \"xǐ\": \"杫枲玺徙喜葈葸鈢鉩鉨屣漇蓰銑憘憙暿橲歖禧諰壐縰謑鳃蟢蹝釐璽鰓瓕鱚囍矖纚躧\",\n  \"xì\": \"匸卌扢屃忾饩呬忥怬细郄钑係恄欪盻郤屓欯绤細釳阋傒摡椞舃舄趇隙愾慀滊禊綌蒵赩隟墍熂犔稧戯潟澙蕮覤戱縘黖戲磶虩餼鬩繫闟霼屭衋\",\n  \"xiā\": \"呷虲疨虾谺傄閕煆颬瘕瞎蝦鰕\",\n  \"xiá\": \"匣侠狎俠峡柙炠狭陜埉峽烚狹珨祫捾硖笚翈舺陿徦硤遐敮暇瑕筪舝瘕碬辖磍蕸縖螛赮魻轄鍜霞鎋黠騢鶷\",\n  \"xiǎ\": \"閕閜\",\n  \"xià\": \"丅下乤圷芐疜夏梺廈睱諕嚇懗罅夓鎼鏬\",\n  \"xiān\": \"仚仙屳先奾佡忺氙杴欦祆秈苮姺枮籼珗莶掀铦搟綅跹酰锨僊僲嘕摻銛暹銽韯嬐憸薟鍁繊褼韱鮮蹮馦孅廯攕醶纎鶱襳躚纖鱻\",\n  \"xián\": \"伭咞闲咁妶弦臤贤咸唌挦涎玹盷胘娴娹婱絃舷蚿衔啣湺痫蛝閑閒鹇嗛嫌溓衘甉銜嫻嫺憪撏澖稴羬誸賢諴輱醎癇癎瞯藖礥鹹麙贒鑦鷴鷼鷳\",\n  \"xiǎn\": \"彡冼狝显险崄毨烍猃蚬険赻筅尟尠搟禒蜆跣銑箲險嶮獫獮藓鍌鮮燹顕幰攇櫶蘚譣玁韅顯灦\",\n  \"xiàn\": \"咞岘苋見现线臽限姭宪県陥哯垷娊峴涀莧軐陷埳晛現硍馅睍絤綖缐羡塪搚溓献粯羨腺僩僴槏綫誢憪撊線鋧憲橌橺縣錎餡壏懢豏麲瀗臔獻糮鏾霰鼸\",\n  \"xiāng\": \"乡芗香郷厢啍鄉鄊廂湘缃萫葙鄕楿稥薌箱緗膷襄儴勷忀骧麘欀瓖镶鱜纕鑲驤\",\n  \"xiáng\": \"夅瓨佭庠羏栙祥絴翔詳跭\",\n  \"xiǎng\": \"享亯响蚃饷晑飨想銄餉鲞蠁鮝鯗響饗饟鱶\",\n  \"xiàng\": \"向姠项珦象缿衖項像勨嶑潒銗閧曏橡襐闂嚮蟓鐌鱌\",\n  \"xiāo\": \"灲灱呺枭侾哓枵骁宯宵庨消烋绡莦虓逍鸮婋梟焇猇萧痚痟睄硣硝窙翛销嗃揱綃蛸嘐歊潇熇箫踃嘵憢撨獟獢箾銷霄骹彇膮蕭颵魈鴞穘簘藃蟂蟏鴵嚣瀟簫蟰髇櫹嚻囂髐鷍蠨驍毊虈\",\n  \"xiáo\": \"姣洨郩崤淆訤殽誵\",\n  \"xiǎo\": \"小晓暁筱筿皛曉篠謏皢\",\n  \"xiào\": \"孝効咲恔俲哮效涍笑啸傚敩殽嗃詨嘋嘨誟嘯薂歗熽斅斆\",\n  \"xiē\": \"娎揳猲楔歇滊獦蝎蠍\",\n  \"xié\": \"劦协旪協胁垥奊峫恊拹挾脇脅脋衺偕斜梋谐絜翓颉嗋愶慀搚携瑎綊熁膎鲑勰撷擕緳縀缬蝢鞋諧燲鮭嚡擷鞵儶襭孈攜讗龤\",\n  \"xiě\": \"写冩寫藛\",\n  \"xiè\": \"伳灺泻祄绁缷卸枻洩炨炧卨屑栧偞偰徢械烲焎禼紲亵媟屟渫絏絬谢僁塮觟觧榍榝榭褉靾噧寫屧暬樧碿緤嶰廨懈澥獬糏薤薢邂韰燮褻謝夑瀉鞢韘瀣爕繲蟹蠏齘齛纈齥齂躠躞\",\n  \"xīn\": \"忄心邤妡忻辛昕杺欣盺俽莘惞訢鈊锌新歆廞鋅噺噷嬜薪馨鑫馫\",\n  \"xín\": \"枔襑镡礥鐔\",\n  \"xǐn\": \"伈\",\n  \"xìn\": \"阠伩囟孞炘軐脪衅訫愖焮馸顖舋釁\",\n  \"xīng\": \"狌星垶骍惺猩煋瑆腥觪箵篂興謃鮏曐觲騂皨鯹\",\n  \"xíng\": \"刑邢饧巠形陉侀郉哘型洐荥钘陘娙硎铏鈃蛵滎鉶銒鋞餳\",\n  \"xǐng\": \"睲醒擤\",\n  \"xìng\": \"杏姓幸性荇倖莕婞悻涬葕睲緈鋞嬹臖\",\n  \"xiōng\": \"凶匂兄兇匈芎讻忷汹哅恟洶胷胸訩詾賯\",\n  \"xióng\": \"雄熊熋\",\n  \"xiǒng\": \"焽焸\",\n  \"xiòng\": \"诇詗夐敻\",\n  \"xiū\": \"俢修咻庥烌烋羞脩脙鸺臹貅馐樇銝髤髹鎀鮴鵂鏅饈鱃飍\",\n  \"xiú\": \"苬\",\n  \"xiǔ\": \"朽滫潃糔\",\n  \"xiù\": \"秀岫峀珛绣袖琇锈嗅溴綉璓褏褎銹螑嚊繍鏅繡鏥鏽齅\",\n  \"xū\": \"圩戌旴姁疞盱欨砉胥须眗訏顼偦虗虚裇許谞媭揟欻湏湑虛須楈綇頊嘘墟稰蓲需魆噓嬃歔緰縃蕦蝑歘藇諝燸譃魖驉鑐鬚\",\n  \"xú\": \"俆冔徐禑蒣\",\n  \"xǔ\": \"呴姁诩浒栩珝喣湑蛡暊詡滸稰鄦糈諿醑盨\",\n  \"xù\": \"旭伵序旴汿芧侐卹妶怴沀叙恓恤昫朐洫垿晇欰殈烅珬勗勖喐惐掝敍敘淢烼绪续蚼酗壻婿朂溆矞絮聓訹慉滀煦続蓄賉槒漵潊盢瞁緒聟蓿銊嘼獝稸緖藇藚續鱮\",\n  \"xuān\": \"吅轩昍咺宣弲晅軒梋谖喧塇媗愃愋揎萲萱暄煊瑄蓒睻儇禤箮翧蝖鋗嬛懁蕿諠諼鞙駨鍹駽矎翾藼蘐蠉譞鰚讂\",\n  \"xuán\": \"玄伭妶玹痃悬琁蜁嫙漩暶璇縣檈璿懸\",\n  \"xuǎn\": \"咺选烜喛暅選癣癬\",\n  \"xuàn\": \"怰泫昡炫绚眩袨铉琄眴衒渲絢楥楦鉉夐敻碹蔙镟颴縼繏鏇贙\",\n  \"xuē\": \"疶蒆靴薛辥辪鞾\",\n  \"xué\": \"穴斈乴学峃茓泶袕鸴敩踅噱壆學嶨澩燢觷鷽\",\n  \"xuě\": \"彐雪樰膤艝轌鳕鱈\",\n  \"xuè\": \"吷坹岤怴泬狘疦桖谑滈趐謔瞲瀥\",\n  \"xūn\": \"坃勋埙焄勛塤煇窨勲勳薫嚑壎獯薰曛燻臐矄蘍壦爋纁醺\",\n  \"xún\": \"廵寻巡旬杊畃询郇咰姰峋恂洵浔紃荀荨栒桪毥珣偱眴尋循揗詢鄩鲟噚潯蕁攳樳燅燖璕駨蟫蟳爓鱘鱏灥\",\n  \"xùn\": \"卂训讯伨汛迅驯侚巺徇狥迿逊孫殉毥浚訊訓訙奞巽殾稄遜馴愻噀潠蕈濬爋顨鶽鑂\",\n  \"ya\": \"\",\n  \"yā\": \"丫圧吖亞庘押枒垭鸦桠鸭啞孲铔椏鴉錏鴨壓鵶鐚\",\n  \"yá\": \"牙伢厑岈芽厓拁琊笌蚜堐崕崖涯猚釾睚衙漄齖\",\n  \"yǎ\": \"疋厊庌挜疨唖啞掗痖雅瘂蕥\",\n  \"yà\": \"劜圠轧亚冴襾覀讶亜犽迓亞玡軋姶娅挜砑俹氩埡婭掗訝铔揠氬猰聐圔椻稏碣窫潝磍壓瓛齾\",\n  \"yān\": \"恹剦烟珚胭崦淊淹焑焉菸阉殗渰湮傿歅煙硽鄢嫣漹嶖樮醃橪閹閼嬮懨篶懕臙黫黰\",\n  \"yán\": \"讠厃延闫严妍芫訁言岩昖沿炏炎郔唌埏姸娫狿莚娮梴盐啱琂硏訮閆阎喦嵓嵒筵綖蜒塩揅楌詽碞蔅羬颜厳虤閻檐顏顔嚴壛巌簷櫩壧巖巗欕礹鹽麣\",\n  \"yǎn\": \"夵抁沇乵兖俨兗匽弇衍剡偃厣掞掩眼萒郾酓隁嵃愝扊揜晻棪渰渷琰遃隒椼硽罨裺演褗戭窴蝘魇噞嬐躽縯檿黡厴甗鰋鶠黤儼黬黭龑孍顩鼴巘巚曮魘鼹礹齴黶\",\n  \"yàn\": \"厌妟觃牪匽姲彥彦洝砚唁宴晏烻艳覎验偐掞焔猏硏谚隁喭堰敥棪殗焱焰猒硯雁傿椻溎滟豣鳫厭墕暥熖酽鳱嬊谳餍鴈燄諺赝鬳嚈嬮曕鴳酀騐験嚥嬿艶贋軅曣爓醶騴齞鷃灔贗囐觾讌醼饜驗鷰艷灎釅驠灧讞豓豔灩\",\n  \"yāng\": \"央姎抰泱柍殃胦眏秧鸯鉠雵鞅鍈鴦\",\n  \"yáng\": \"扬阦阳旸杨炀玚飏佯劷氜疡钖垟徉昜洋羏烊珜眻陽婸崵崸愓揚蛘敭暘楊煬瑒禓瘍諹輰鍚鴹颺鰑霷鸉\",\n  \"yǎng\": \"卬佒咉坱岟养柍炴氧眏痒紻傟勜楧軮慃氱蝆飬養駚懩攁瀁癢礢\",\n  \"yàng\": \"怏柍恙样烊羕楧詇煬様漾鞅樣瀁\",\n  \"yāo\": \"幺夭吆妖枖殀祅約訞喓葽楆腰鴁撽邀鴢\",\n  \"yáo\": \"爻尧匋尭肴垚姚峣恌轺倄烑珧皐窕窑铫隃傜堯揺殽谣軺嗂媱徭愮搖摇滧猺遙遥僥摿暚榣瑤瑶銚飖餆嶢嶤徺磘窯窰餚繇謡謠鎐鳐颻蘨邎顤鰩鱙\",\n  \"yǎo\": \"仸宎岆抭杳枖狕苭咬柼眑窅窈舀偠婹崾溔蓔榚闄騕齩鷕\",\n  \"yào\": \"怮穾药烄袎窔筄葯詏愮熎瘧覞靿樂獟箹鹞薬鼼曜燿艞藥矅耀纅鷂讑\",\n  \"ye\": \"亪\",\n  \"yē\": \"吔耶倻椰暍歋窫噎潱擨蠮\",\n  \"yé\": \"爷耶峫捓揶铘爺瑘釾鋣鎁\",\n  \"yě\": \"也冶埜野嘢漜壄\",\n  \"yè\": \"业曳页曵邺夜抴亱拽枼洂頁捙晔枽烨液焆谒堨揲殗腋葉墷楪業煠痷馌僷曅燁璍擖擛曄皣瞱緤鄴靥嶪嶫澲謁餣擫曗瞸鍱擪爗礏鎑饁鵺鐷靨驜瓛鸈\",\n  \"yi\": \"弬\",\n  \"yī\": \"一乊弌辷衤伊衣医吚壱依祎咿洢悘渏猗畩郼铱壹揖蛜禕嫛漪稦銥嬄撎噫夁瑿鹥繄檹毉醫黟譩鷖黳\",\n  \"yí\": \"乁仪匜圯夷彵迆冝宐杝沂诒侇宜怡沶狏狋迤迱饴咦姨峓恞拸柂洟珆瓵荑贻迻宧巸扅栘桋眙胰袘貤痍移萓釶椬羠蛦詒貽遗媐暆椸煕誃跠頉颐飴儀熪箷遺嶬彛彜螔頥頤寲嶷簃顊鮧鴺彞彝謻鏔籎觺讉\",\n  \"yǐ\": \"乚乛乙已以扡迆钇佁攺矣苡叕苢迤迱庡舣蚁釔倚扆笖逘酏偯猗崺攲敧旑鈘鉯鳦裿旖輢嬟敼螘檥礒艤蟻顗轙齮\",\n  \"yì\": \"乂义亿弋刈忆艺仡匇肊艾议阣亦伇屹异忔芅伿佚劮呓坄役抑杙耴苅译邑佾呭呹妷峄怈怿易枍欥泆炈秇绎衪诣驿俋奕帟帠弈昳枻浂玴疫羿轶唈垼悒挹栺栧欭浥浳益袘袣谊貤勚埶埸悘悥掜殹異羛翊翌萟訳訲豙豛逸釴隿幆敡晹棭殔湙焲焬蛡詍跇軼鄓鈠骮亄兿嗌意溢獈痬睪竩缢義肄裔裛詣勩嫕廙榏潩瘗膉蓺蜴駅億槸毅熠熤熼瘞篒誼镒鹝鹢黓儗劓圛墿嬑嶧憶懌曀殪澺燚瘱瞖穓縊艗薏螠褹寱懝斁曎檍歝燡燱翳翼臆貖鮨癔藝藙贀鎰镱繶繹豷霬鯣鶃鶂鶍瀷蘙議譯醳醷饐囈鐿鷁鷊懿襼驛鷧虉鸃鷾讛齸\",\n  \"yīn\": \"囙因阥阴侌垔姻洇茵荫音骃栶欭氤陰凐秵裀铟陻隂喑堙婣愔湮筃絪歅溵禋蒑蔭慇瘖銦磤緸鞇諲霒駰噾濦闉霠齗韾\",\n  \"yín\": \"冘乑伒吟圻犾苂斦烎垠泿圁峾狺珢荶訔訚唫婬寅崟崯淫訡银鈝龂滛碒鄞夤蔩銀龈噖殥璌誾嚚檭蟫霪齦鷣\",\n  \"yǐn\": \"廴尹引吲饮粌蚓硍赺淾鈏飲隠靷飮朄輑磤趛檃瘾隱嶾濥縯螾檼蘟櫽癮讔\",\n  \"yìn\": \"廴印茚洕胤荫垽梀堷湚猌飲廕隠飮窨酳慭癊憗憖隱鮣懚\",\n  \"yīng\": \"応旲英柍荥偀桜珱莺啨婴媖愥渶绬朠楧焽焸煐瑛嫈碤锳嘤撄甇緓缨罂蝧賏樱璎噟罃褮霙鴬鹦嬰應膺韺甖鹰鶑鶧嚶孆孾攖瀴罌蘡譍櫻瓔礯譻鶯鑍纓蠳鷪軈鷹鸎鸚\",\n  \"yíng\": \"夃盁迎茔盈荧浧耺莹営桯萤萦营蛍溁溋萾僌塋嵤楹滢蓥滎潆熒蝇瑩禜蝿嬴營縈螢濙濚濴藀覮謍赢瀅爃蠅鎣巆攍瀛瀠瀯櫿贏灐籝灜籯\",\n  \"yǐng\": \"矨郢浧梬颍颕颖摬影潁瘿穎頴覮巊廮瀴鐛癭\",\n  \"yìng\": \"応映眏暎硬媵膡鞕應瀴鱦\",\n  \"yo\": \"喲\",\n  \"yō\": \"唷喲\",\n  \"yōng\": \"拥痈邕庸傭嗈鄘雍墉嫞慵滽槦牅牗銿噰壅擁澭郺镛臃癕雝鏞鳙廱灉饔鱅鷛癰\",\n  \"yóng\": \"喁揘颙顒鰫\",\n  \"yǒng\": \"永甬咏怺泳俑勈勇栐埇悀柡恿惥愑湧硧詠塎嵱彮愹蛹慂踊鲬噰澭踴鯒\",\n  \"yòng\": \"用苚砽蒏醟\",\n  \"yōu\": \"优妋忧攸呦怮泑幽峳浟逌悠羪麀滺憂優鄾嚘懮瀀獶櫌纋耰獿\",\n  \"yóu\": \"尢冘尤由甴汼沋犹邮怞油肬怣斿柚疣庮秞莜莤莸郵铀偤蚰訧逰揂游猶遊鱿楢猷鈾鲉輏駀蕕蝣魷輶鮋繇櫾\",\n  \"yǒu\": \"友丣卣苃酉羑栯莠梄聈铕湵楢禉蜏銪槱牖牗黝懮\",\n  \"yòu\": \"又右幼佑佦侑孧泑狖哊囿姷宥峟柚牰祐诱迶唀梎痏蚴亴貁釉酭誘鼬櫾\",\n  \"yū\": \"込扜扝纡迃迂穻陓紆唹淤盓瘀箊\",\n  \"yú\": \"丂亐于邘伃余妤扵杅欤玗玙於盂臾衧鱼乻俞兪捓禺竽舁茰虶娛娯娪娱桙狳谀酑馀渔萸釪隃隅雩魚堣堬婾媀媮崳嵎嵛揄楰渝湡畬腴萮逾骬愚楡榆歈牏瑜艅虞觎漁睮窬舆褕歶羭蕍蝓諛雓餘魣嬩懙澞覦踰歟璵螸輿鍝謣髃鮽旟籅騟鯲蘛轝鰅鷠鸆齵\",\n  \"yǔ\": \"伛宇屿羽穻俁俣挧禹圄祤偊匬圉庾敔鄅斞萭傴寙楀瑀瘐與語窳頨龉噳嶼懙貐斔穥麌齬\",\n  \"yù\": \"肀玉驭圫聿芌芋吾妪忬汩灹饫欥育郁俞昱狱禺秗茟俼叞峪彧栯浴砡钰预域堉悆惐捥欲淢淯痏粖翑袬谕逳阈喅喩喻媀寓庽御棛棜棫焴琙琟矞硢硲裕遇飫馭鹆奧愈滪煜稢罭艈蒮蓣誉鈺預僪嫗嶎戫毓澚獄瘉緎蜟蜮語輍銉隩慾潏熨稶蓹薁豫遹鋊鳿澦燏燠蕷藇諭錥閾鴧鴪鴥儥礇禦魊鹬癒礖礜篽醧鵒櫲饇蘌譽鐭霱雤欎驈鬻籞鱊鷸鸒欝軉鬰鬱灪籲爩\",\n  \"yuān\": \"夗囦肙鸢剈冤弲悁眢鸳寃涴渆渁渊渕惌淵葾棩蒬蜎裷鹓箢鳶蜵駌鋺鴛嬽鵷灁鼘鼝\",\n  \"yuán\": \"元円贠邧园妧沅芫杬茒垣爰貟原員圆笎蚖袁厡酛傆喛圎媛援湲猨缘鈨鼋園圓塬媴嫄楥溒源猿蒝榞榬辕緣縁蝝蝯褤魭圜橼羱薗螈黿謜轅鎱櫞邍騵鶢鶰厵\",\n  \"yuǎn\": \"盶逺遠薳鋺\",\n  \"yuàn\": \"夗妴苑怨院垸衏傆媛掾瑗禐愿裫褑噮願\",\n  \"yuē\": \"曰曱扚約啘箹矱\",\n  \"yuě\": \"哕噦\",\n  \"yuè\": \"月戉兊刖兌妜岄抈礿岳枂泧玥恱栎哾悅悦蚏蚎軏钺阅捳跀跃粤越鈅楽粵鉞說説樂閲閱嬳樾篗髺嶽臒龠擽矆櫟籆瀹蘥黦爚禴趯躍籥鑰鸑籰鸙\",\n  \"yūn\": \"涒缊蒀暈氲煴蒕氳熅煾奫緼蝹縕赟馧贇\",\n  \"yún\": \"云勻匀伝囩妘抣沄纭芸昀畇眃秐貟郧員涢紜耘耺鄖雲愪溳筠筼蒷熉澐蕓鋆橒篔縜\",\n  \"yǔn\": \"允阭夽抎狁玧陨荺殒喗鈗隕煴殞熅馻磒賱霣齫齳\",\n  \"yùn\": \"孕贠运枟郓恽貟員菀鄆酝傊惲愠缊運慍暈榅煇腪韫韵褞熨緷緼蕰蕴縕薀醖醞餫藴鞰韗韞蘊韻\",\n  \"zā\": \"帀匝沞迊咂拶桚紥紮鉔噈魳臜臢\",\n  \"zá\": \"杂沯砸偺喒韴雑襍雜囃囋囐雥\",\n  \"zǎ\": \"咋偺喒\",\n  \"zāi\": \"災灾甾哉栽烖畠菑渽溨睵賳\",\n  \"zǎi\": \"宰崽\",\n  \"zài\": \"再在扗抂洅傤載酨儎縡\",\n  \"zān\": \"兂撍糌橵篸簪簮鵤鐕鐟\",\n  \"zán\": \"偺喒\",\n  \"zǎn\": \"拶昝桚寁揝噆撍儧攅儹攢趱趲\",\n  \"zàn\": \"暂暫賛赞錾鄼濽蹔酂瓉贊鏩鏨瓒酇囋灒讃瓚禶穳襸讚饡\",\n  \"zāng\": \"匨牂羘赃賍臧賘贓髒贜\",\n  \"zǎng\": \"驵駔\",\n  \"zàng\": \"奘弉脏塟葬臧蔵銺臓臟\",\n  \"zāo\": \"傮遭糟蹧醩\",\n  \"záo\": \"凿鑿\",\n  \"zǎo\": \"早枣栆蚤棗璅澡璪薻藻\",\n  \"zào\": \"灶皁皂唣唕造梍喿慥煰艁噪簉燥竃竈譟趮躁\",\n  \"zé\": \"则択沢咋泎责迮則唶啧帻笮舴責溭滜睪矠飵嘖嫧幘箦蔶樍歵諎赜擇澤皟瞔簀耫礋襗謮賾蠌灂齚齰鸅\",\n  \"zè\": \"仄庂汄昃昗捑側崱稄\",\n  \"zéi\": \"贼戝賊鲗蠈鰂鱡\",\n  \"zēn\": \"撍\",\n  \"zěn\": \"怎\",\n  \"zèn\": \"谮譖\",\n  \"zēng\": \"曽増鄫增憎缯橧璔縡矰磳竲罾繒譄鱛\",\n  \"zěng\": \"\",\n  \"zèng\": \"锃綜缯鋥熷甑赠繒鬵贈囎\",\n  \"zi\": \"嗭\",\n  \"zī\": \"孖孜甾茊兹呲咨姕姿茲栥玆畠紎赀资崰淄秶缁菑谘赼嗞孳嵫椔湽滋粢葘辎鄑孶禌觜訾貲資趑锱稵緕緇鈭镃龇輜鼒澬薋諮趦輺錙髭鲻鍿鎡璾頾頿鯔鶅齍纃鰦齜\",\n  \"zí\": \"蓻\",\n  \"zǐ\": \"子吇芓姉姊杍沝矷秄胏呰秭籽耔茈虸笫梓釨啙紫滓訿榟橴\",\n  \"zì\": \"字自芓秄洓茡荢倳剚恣牸渍眦眥菑胔胾漬\",\n  \"zōng\": \"宗枞倧骔堫嵏嵕惾棕猣腙葼朡椶潈稯綜緃樅熧緵翪蝬踨踪磫繌鍐豵蹤騌鬃騣鬉鬷鯮鯼鑁\",\n  \"zǒng\": \"总倊偬捴惣揔搃焧傯蓗嵸摠潀稯総熜緫縂燪縱總\",\n  \"zòng\": \"昮疭從猔碂粽潨糉緵瘲縦縱繌糭\",\n  \"zōu\": \"邹驺诹郰陬掫菆棸棷鄒箃緅諏鄹鲰鯫黀騶齱齺\",\n  \"zǒu\": \"赱走搊鯐\",\n  \"zòu\": \"奏揍媰楱\",\n  \"zū\": \"怚柤租菹葅蒩\",\n  \"zú\": \"卆足倅哫崒崪族椊稡箤踤镞鎐鏃\",\n  \"zǔ\": \"诅阻组俎柤爼珇祖唨組詛靻鎺\",\n  \"zù\": \"\",\n  \"zuān\": \"鉆劗躜鑚躦鑽\",\n  \"zuǎn\": \"繤缵纂纉籫纘\",\n  \"zuàn\": \"揝篹賺攥\",\n  \"zuī\": \"厜朘嗺樶蟕纗\",\n  \"zuí\": \"\",\n  \"zuǐ\": \"咀觜嶊嘴噿濢璻\",\n  \"zuì\": \"冣栬絊酔晬最祽睟稡罪辠槜酻蕞醉嶵檇鋷錊檌欈\",\n  \"zūn\": \"尊噂墫嶟遵樽繜罇鶎鐏鳟鱒鷷\",\n  \"zǔn\": \"僔撙繜譐\",\n  \"zùn\": \"拵捘栫袸銌瀳\",\n  \"zuo\": \"咗\",\n  \"zuō\": \"嘬穝\",\n  \"zuó\": \"苲昨柮秨莋捽笮稓筰鈼\",\n  \"zuǒ\": \"左佐繓\",\n  \"zuò\": \"作坐阼岝岞怍侳柞祚胙唑座袏做葄葃酢蓙飵諎糳\",\n  \"zhā\": \"吒咋抯挓柤査哳紥偧紮揸渣楂飵劄摣潳皶樝觰皻譇齄齇\",\n  \"zhá\": \"札甴軋闸剳蚻铡喋煠牐閘劄箚霅耫鍘譗\",\n  \"zhǎ\": \"厏拃苲眨砟鲊鲝諎鮓鮺\",\n  \"zhà\": \"乍吒灹诈怍咤奓柞宱痄蚱喥溠詐搾鲊榨鮓醡\",\n  \"zhāi\": \"亝哜夈粂捚斋側斎摘榸齊嚌擿齋\",\n  \"zhái\": \"厇宅翟擇檡\",\n  \"zhǎi\": \"厏抧窄鉙\",\n  \"zhài\": \"责债砦責債寨瘵\",\n  \"zhān\": \"岾怗枬沾毡旃栴粘蛅飦惉詀趈詹閚谵鳽噡嶦薝邅霑氈氊瞻覱鹯旜譫饘鳣驙魙鱣鸇\",\n  \"zhán\": \"讝\",\n  \"zhǎn\": \"斩飐展盏斬琖搌盞嶃嶄榐辗颭嫸醆橏輾皽黵\",\n  \"zhàn\": \"佔战栈桟站偡绽菚嵁棧湛戦碊僝綻嶘戰虥虦覱轏譧欃蘸驏\",\n  \"zhāng\": \"弡张張章傽鄣嫜彰慞漳獐粻蔁遧暲樟璋餦蟑鏱騿鱆麞\",\n  \"zhǎng\": \"仉仧兏長掌漲幥礃鞝\",\n  \"zhàng\": \"丈仗扙帐杖胀账粀帳涱脹痮障墇嶂幛漲賬瘬瘴瞕\",\n  \"zhāo\": \"佋钊妱巶招昭炤釗啁釽鉊鳭駋鍣皽\",\n  \"zháo\": \"\",\n  \"zhǎo\": \"爫找沼菬瑵\",\n  \"zhào\": \"兆诏枛垗炤狣赵笊肁啅旐棹罀詔照罩箌肈肇趙曌濯燳鮡櫂瞾羄\",\n  \"zhe\": \"嗻\",\n  \"zhē\": \"嗻嫬遮螫\",\n  \"zhé\": \"乇厇扸杔歽矺砓籷虴哲埑粍袩啠悊晢晣辄喆棏聑蛰詟搩蜇谪馲摺輒慹磔輙銸辙蟄嚞謫謺鮿轍讁讋\",\n  \"zhě\": \"者乽啫锗赭踷褶鍺襵\",\n  \"zhè\": \"柘浙這淛嗻蔗樜鹧蟅鷓\",\n  \"zhèi\": \"\",\n  \"zhēn\": \"贞针侦侲帧枮浈珎珍胗貞帪桢眞真砧祯針偵酙寊幀揕湞葴遉嫃搸斟椹楨溱獉甄禎蒖蓁鉁榛槙殝瑧碪禛潧箴樼澵臻薽錱轃鍼籈鱵\",\n  \"zhén\": \"\",\n  \"zhěn\": \"诊抮枕姫弫昣轸屒畛疹眕袗紾聄萙竧裖覙診軫嫃缜槙稹駗縝縥辴鬒黰\",\n  \"zhèn\": \"圳阵纼甽侲挋陣鸩振朕栚紖桭眹赈塦揕絼榐瑱誫賑鋴镇震鴆鎮鎭\",\n  \"zhēng\": \"凧争佂姃征怔爭糽埩峥炡狰烝眐脀钲埥崝崢掙猙睁聇铮媜揁筝徰睜蒸踭鉦徴箏綪錚徵篜鬇癥鏳\",\n  \"zhěng\": \"氶抍糽拯掟晸愸撜整\",\n  \"zhèng\": \"氶证诤郑政徎钲掙幁証塣諍靕鄭憕鴊證\",\n  \"zhī\": \"之支卮汁芝巵汥呮泜肢栀祗秓胑胝衼倁栺疷祬脂隻梔菭椥臸搘稙綕榰蜘馶憄鳷鴲織鼅蘵\",\n  \"zhí\": \"执侄妷直秇姪郦値值聀釞埴執淔职戠植犆禃絷臷跖瓡摕摭馽嬂慹漐潪踯樴膱縶職蟙蹠軄躑\",\n  \"zhǐ\": \"夂止凪劧旨阯坁址帋扺汦沚纸芷坧抧杫祇祉茋咫恉指枳洔砋秖衹轵淽疻紙蚔訨趾軹黹禔筫絺酯墌徴徵槯藢襧\",\n  \"zhì\": \"至芖坁志忮扻豸制厔垁帙帜斦治炙质迣郅俧峙庢庤挃柣栉洷祑陟娡徏挚捗晊桎歭狾秩致袟贽轾乿偫剬徝掷梽楖猘畤痓痔眰秲秷窒紩翐袠觗貭铚鸷傂崻彘智滞痣蛭骘寘廌搱滍稚筫置跱輊锧雉墆滯潌疐瘈聜製覟誌銍幟憄摨摯潪熫稺膣觯質踬銴鋕擳旘瀄璏緻隲駤鴙儨劕懥擲擿櫛穉螲懫織贄櫍瓆觶騭鯯礩豑鶨騺驇躓鷙鑕豒\",\n  \"zhōng\": \"夂伀汷刣妐彸忪忠泈炂终柊盅衳钟舯衷終鈡幒蔠蜙锺銿螤鴤螽鍾斔鼨蹱鐘籦\",\n  \"zhǒng\": \"肿冢喠尰塚歱煄腫瘇種徸踵穜\",\n  \"zhòng\": \"仲众妕狆祌茽衶蚛偅眾堹媑筗衆種緟諥\",\n  \"zhōu\": \"州舟诌侜周洲炿诪烐珘辀郮啁婤徟掫淍矪週鸼喌赒輈翢銂賙輖霌駲嚋盩謅鵃騆譸\",\n  \"zhóu\": \"妯軸碡\",\n  \"zhǒu\": \"肘帚疛胕菷晭睭箒鯞\",\n  \"zhòu\": \"纣伷呪咒宙绉冑咮昼紂胄荮皱酎晝粙椆葤詋軸甃僽皺駎噣縐繇薵骤籀籕籒驟\",\n  \"zhū\": \"侏诛邾洙茱株珠诸猪硃秼袾铢絑蛛誅跦槠潴蕏蝫銖橥諸豬駯鮢鴸瀦藸鼄櫧櫫鯺蠩\",\n  \"zhú\": \"朮竹竺炢笁茿烛窋逐笜舳逫瘃蓫敱磩築篴斀燭蠋躅鱁劚孎灟斸曯欘爥蠾钃\",\n  \"zhǔ\": \"丶主劯宔拄砫罜陼帾渚煑煮詝褚嘱濐燝麈瞩屬囑鸀矚\",\n  \"zhù\": \"伫佇住纻芧苎坾拀杼注苧贮迬驻乼壴柱柷殶炷祝疰眝砫祩竚莇紵紸羜蛀尌嵀註貯跓軴铸筯鉒飳馵嗻墸箸翥樦澍鋳駐築篫麆簗櫡鑄\",\n  \"zhuā\": \"抓挝撾檛膼簻髽\",\n  \"zhuǎ\": \"爫\",\n  \"zhuāi\": \"拽\",\n  \"zhuǎi\": \"跩\",\n  \"zhuài\": \"拽睉\",\n  \"zhuān\": \"专叀専恮砖耑專剸鄟塼嫥漙瑼甎磗膞颛磚諯篿蟤顓鱄\",\n  \"zhuǎn\": \"孨転膞竱轉\",\n  \"zhuàn\": \"灷啭転堟蒃傳瑑腞僎僝赚撰篆馔篹縳襈賺簨贃譔饌囀籑\",\n  \"zhuāng\": \"妆庄妝庒荘娤桩莊梉湷粧装裝樁糚\",\n  \"zhuǎng\": \"奘\",\n  \"zhuàng\": \"壮壯状狀壵焋僮漴撞戅戆戇\",\n  \"zhuī\": \"隹骓锥錐騅鵻\",\n  \"zhuǐ\": \"沝\",\n  \"zhuì\": \"坠笍奞娷缀隊惴甀缒腏畷硾膇墜綴赘縋諈醊錣礈贅鑆\",\n  \"zhūn\": \"圫宒忳迍肫窀谆啍諄衠\",\n  \"zhǔn\": \"准埻凖準稕綧\",\n  \"zhùn\": \"旽訰稕綧\",\n  \"zhuō\": \"拙炪倬捉桌梲棁涿淖棳棹焯窧槕穛鐯穱\",\n  \"zhuó\": \"圴彴汋犳灼卓叕妰茁斫浊丵剢捔浞烵诼酌啄啅娺聉斱斮晫椓琸硺窡罬蓔墌撯擆斲禚劅諁諑趠鋜噣濁燋篧擢斀斵濯藋櫡謶镯繳鵫灂蠗鐲籗鷟蠿籱\",\n  \"zhuò\": \"\",\n  \"chǎng,ān,hàn\": \"厂\",\n  \"dīng,zhēng\": \"丁\",\n  \"bǔ,bo\": \"卜\",\n  \"jǐ,jī\": \"几\",\n  \"le,liǎo\": \"了\",\n  \"gān,gàn\": \"干\",\n  \"dà,dài,tài\": \"大\",\n  \"yǔ,yù,yú\": \"与\",\n  \"shàng,shǎng\": \"上\",\n  \"wàn,mò\": \"万\",\n  \"gè,gě\": \"个各\",\n  \"me,mó,ma,yāo\": \"么\",\n  \"guǎng,ān\": \"广\",\n  \"wáng,wú\": \"亡\",\n  \"nǚ,rǔ\": \"女\",\n  \"chā,chá,chǎ\": \"叉\",\n  \"wáng,wàng\": \"王\",\n  \"fū,fú\": \"夫\",\n  \"zhā,zā,zhá\": \"扎\",\n  \"bù,fǒu\": \"不\",\n  \"qū,ōu\": \"区\",\n  \"chē,jū\": \"车\",\n  \"qiè,qiē\": \"切\",\n  \"wǎ,wà\": \"瓦\",\n  \"tún,zhūn\": \"屯\",\n  \"shǎo,shào\": \"少\",\n  \"zhōng,zhòng\": \"中\",\n  \"nèi,nà\": \"内\",\n  \"jiàn,xiàn\": \"见\",\n  \"cháng,zhǎng\": \"长\",\n  \"shén,shí\": \"什\",\n  \"piàn,piān\": \"片\",\n  \"pú,pū\": \"仆\",\n  \"huà,huā\": \"化\",\n  \"chóu,qiú\": \"仇\",\n  \"zhuǎ,zhǎo\": \"爪\",\n  \"jǐn,jìn\": \"仅\",\n  \"fù,fǔ\": \"父\",\n  \"cóng,zòng\": \"从\",\n  \"fēn,fèn\": \"分\",\n  \"shì,zhī\": \"氏\",\n  \"fēng,fěng\": \"风\",\n  \"gōu,gòu\": \"勾\",\n  \"liù,lù\": \"六\",\n  \"dǒu,dòu\": \"斗\",\n  \"wèi,wéi\": \"为\",\n  \"chǐ,chě\": \"尺\",\n  \"yǔ,yú\": \"予\",\n  \"dǎ,dá\": \"打\",\n  \"zhèng,zhēng\": \"正症挣\",\n  \"bā,pá\": \"扒\",\n  \"jié,jiē\": \"节结\",\n  \"shù,shú,zhú\": \"术\",\n  \"kě,kè\": \"可\",\n  \"shí,dàn\": \"石\",\n  \"kǎ,qiǎ\": \"卡\",\n  \"běi,bèi\": \"北\",\n  \"zhàn,zhān\": \"占\",\n  \"qiě,jū\": \"且\",\n  \"yè,xié\": \"叶\",\n  \"hào,háo\": \"号\",\n  \"zhī,zhǐ\": \"只\",\n  \"dāo,tāo\": \"叨\",\n  \"zǎi,zǐ,zī\": \"仔\",\n  \"lìng,líng,lǐng\": \"令\",\n  \"lè,yuè\": \"乐\",\n  \"jù,gōu\": \"句\",\n  \"chù,chǔ\": \"处\",\n  \"tóu,tou\": \"头\",\n  \"níng,nìng,zhù\": \"宁\",\n  \"zhào,shào\": \"召\",\n  \"fā,fà\": \"发\",\n  \"tái,tāi\": \"台苔\",\n  \"káng,gāng\": \"扛\",\n  \"dì,de\": \"地\",\n  \"sǎo,sào\": \"扫\",\n  \"chǎng,cháng\": \"场\",\n  \"pǔ,pò,pō,piáo\": \"朴\",\n  \"guò,guo,guō\": \"过\",\n  \"yā,yà\": \"压\",\n  \"yǒu,yòu\": \"有\",\n  \"kuā,kuà\": \"夸\",\n  \"xié,yá,yé,yú,xú\": \"邪\",\n  \"jiá,jiā,gā,xiá\": \"夹\",\n  \"huà,huá\": \"划\",\n  \"dāng,dàng\": \"当\",\n  \"tù,tǔ\": \"吐\",\n  \"xià,hè\": \"吓\",\n  \"tóng,tòng\": \"同\",\n  \"qū,qǔ\": \"曲\",\n  \"ma,má,mǎ\": \"吗\",\n  \"qǐ,kǎi\": \"岂\",\n  \"zhū,shú\": \"朱\",\n  \"chuán,zhuàn\": \"传\",\n  \"xiū,xǔ\": \"休\",\n  \"rèn,rén\": \"任\",\n  \"huá,huà,huā\": \"华\",\n  \"jià,jiè,jie\": \"价\",\n  \"fèn,bīn\": \"份\",\n  \"yǎng,áng\": \"仰\",\n  \"xiě,xuè\": \"血\",\n  \"sì,shì\": \"似\",\n  \"háng,xíng\": \"行\",\n  \"huì,kuài\": \"会\",\n  \"hé,gě\": \"合\",\n  \"chuàng,chuāng\": \"创\",\n  \"chōng,chòng\": \"冲\",\n  \"qí,jì,zī,zhāi\": \"齐\",\n  \"yáng,xiáng\": \"羊\",\n  \"bìng,bīng\": \"并\",\n  \"hàn,hán\": \"汗\",\n  \"tāng,shāng\": \"汤\",\n  \"xīng,xìng\": \"兴\",\n  \"xǔ,hǔ\": \"许\",\n  \"lùn,lún\": \"论\",\n  \"nà,nǎ,nèi,nā\": \"那\",\n  \"jìn,jǐn\": \"尽\",\n  \"sūn,xùn\": \"孙\",\n  \"xì,hū\": \"戏\",\n  \"hǎo,hào\": \"好\",\n  \"tā,jiě\": \"她\",\n  \"guān,guàn\": \"观冠\",\n  \"hóng,gōng\": \"红\",\n  \"xiān,qiàn\": \"纤\",\n  \"jì,jǐ\": \"纪济\",\n  \"yuē,yāo\": \"约\",\n  \"nòng,lòng\": \"弄\",\n  \"yuǎn,yuàn\": \"远\",\n  \"huài,pēi,pī,péi\": \"坏\",\n  \"zhé,shé,zhē\": \"折\",\n  \"qiǎng,qiāng,chēng\": \"抢\",\n  \"ké,qiào\": \"壳\",\n  \"fāng,fáng\": \"坊\",\n  \"bǎ,bà\": \"把\",\n  \"gān,gǎn\": \"杆\",\n  \"sū,sù\": \"苏\",\n  \"gàng,gāng\": \"杠\",\n  \"gèng,gēng\": \"更\",\n  \"lì,lí\": \"丽\",\n  \"hái,huán\": \"还\",\n  \"fǒu,pǐ\": \"否\",\n  \"xiàn,xuán\": \"县\",\n  \"zhù,chú\": \"助\",\n  \"ya,yā\": \"呀\",\n  \"chǎo,chāo\": \"吵\",\n  \"yuán,yún,yùn\": \"员\",\n  \"ba,bā\": \"吧\",\n  \"bié,biè\": \"别\",\n  \"dīng,dìng\": \"钉\",\n  \"gū,gù\": \"估\",\n  \"hé,hē,hè\": \"何\",\n  \"tǐ,tī,bèn\": \"体\",\n  \"bó,bǎi,bà\": \"伯\",\n  \"yòng,yōng\": \"佣\",\n  \"fó,fú,bì,bó\": \"佛\",\n  \"dù,dǔ\": \"肚\",\n  \"guī,jūn,qiū\": \"龟\",\n  \"jiǎo,jué\": \"角\",\n  \"tiáo,tiāo\": \"条\",\n  \"xì,jì\": \"系\",\n  \"yìng,yīng\": \"应\",\n  \"zhè,zhèi\": \"这\",\n  \"jiān,jiàn\": \"间监\",\n  \"mēn,mèn\": \"闷\",\n  \"dì,tì,tuí\": \"弟\",\n  \"shā,shà\": \"沙\",\n  \"shà,shā\": \"煞\",\n  \"méi,mò\": \"没\",\n  \"shěn,chén\": \"沈\",\n  \"shí,zhì\": \"识\",\n  \"niào,suī\": \"尿\",\n  \"wěi,yǐ\": \"尾\",\n  \"ē,ā\": \"阿\",\n  \"jìn,jìng\": \"劲\",\n  \"zòng,zǒng\": \"纵\",\n  \"wén,wèn\": \"纹\",\n  \"mǒ,mò,mā\": \"抹\",\n  \"dān,dàn,dǎn\": \"担\",\n  \"chāi,cā\": \"拆\",\n  \"jū,gōu\": \"拘\",\n  \"lā,lá\": \"拉\",\n  \"bàn,pàn\": \"拌\",\n  \"zé,zhái\": \"择\",\n  \"qí,jī\": \"其奇\",\n  \"ruò,rě\": \"若\",\n  \"píng,pēng\": \"苹\",\n  \"zhī,qí\": \"枝\",\n  \"guì,jǔ\": \"柜\",\n  \"sàng,sāng\": \"丧\",\n  \"cì,cī\": \"刺\",\n  \"yǔ,yù\": \"雨语\",\n  \"bēn,bèn\": \"奔\",\n  \"qī,qì\": \"妻\",\n  \"zhuǎn,zhuàn,zhuǎi\": \"转\",\n  \"xiē,suò\": \"些\",\n  \"ne,ní\": \"呢\",\n  \"tiě,tiē,tiè,\": \"帖\",\n  \"lǐng,líng\": \"岭\",\n  \"zhī,zhì\": \"知织\",\n  \"hé,hè,huó,huò,hú\": \"和\",\n  \"gòng,gōng\": \"供共\",\n  \"wěi,wēi\": \"委\",\n  \"cè,zè,zhāi\": \"侧\",\n  \"pò,pǎi\": \"迫\",\n  \"de,dì,dí\": \"的\",\n  \"cǎi,cài\": \"采\",\n  \"fú,fù\": \"服\",\n  \"dǐ,de\": \"底\",\n  \"jìng,chēng\": \"净\",\n  \"juàn,juǎn\": \"卷\",\n  \"quàn,xuàn\": \"券\",\n  \"dān,shàn,chán\": \"单\",\n  \"qiǎn,jiān\": \"浅\",\n  \"xiè,yì\": \"泄\",\n  \"pō,bó\": \"泊\",\n  \"pào,pāo\": \"泡\",\n  \"ní,nì\": \"泥\",\n  \"zé,shì\": \"泽\",\n  \"kōng,kòng,kǒng\": \"空\",\n  \"láng,làng\": \"郎\",\n  \"xiáng,yáng\": \"详\",\n  \"lì,dài\": \"隶\",\n  \"shuā,shuà\": \"刷\",\n  \"jiàng,xiáng\": \"降\",\n  \"cān,shēn,cēn,sān\": \"参\",\n  \"dú,dài\": \"毒\",\n  \"kuà,kū\": \"挎\",\n  \"dǎng,dàng\": \"挡\",\n  \"kuò,guā\": \"括\",\n  \"shí,shè\": \"拾\",\n  \"tiāo,tiǎo\": \"挑\",\n  \"shèn,shén\": \"甚\",\n  \"xiàng,hàng\": \"巷\",\n  \"nán,nā\": \"南\",\n  \"xiāng,xiàng\": \"相\",\n  \"chá,zhā\": \"查\",\n  \"bǎi,bó,bò\": \"柏\",\n  \"yào,yāo\": \"要\",\n  \"yán,yàn\": \"研\",\n  \"qì,qiè\": \"砌\",\n  \"bèi,bēi\": \"背\",\n  \"shěng,xǐng\": \"省\",\n  \"xiāo,xuē\": \"削\",\n  \"hǒng,hōng,hòng\": \"哄\",\n  \"mào,mò\": \"冒\",\n  \"yǎ,yā\": \"哑\",\n  \"sī,sāi\": \"思\",\n  \"mǎ,mā,mà\": \"蚂\",\n  \"huá,huā\": \"哗\",\n  \"yè,yàn,yān\": \"咽\",\n  \"zán,zǎ\": \"咱\",\n  \"hā,hǎ,hà\": \"哈\",\n  \"nǎ,něi,na,né\": \"哪\",\n  \"hāi,ké\": \"咳\",\n  \"gǔ,gū\": \"骨\",\n  \"gāng,gàng\": \"钢\",\n  \"yào,yuè\": \"钥\",\n  \"kàn,kān\": \"看\",\n  \"zhòng,zhǒng,chóng\": \"种\",\n  \"biàn,pián\": \"便\",\n  \"zhòng,chóng\": \"重\",\n  \"xìn,shēn\": \"信\",\n  \"zhuī,duī\": \"追\",\n  \"dài,dāi\": \"待\",\n  \"shí,sì,yì\": \"食\",\n  \"mài,mò\": \"脉\",\n  \"jiāng,jiàng\": \"将浆\",\n  \"dù,duó\": \"度\",\n  \"qīn,qìng\": \"亲\",\n  \"chà,chā,chāi,cī\": \"差\",\n  \"zhà,zhá\": \"炸\",\n  \"pào,páo,bāo\": \"炮\",\n  \"sǎ,xǐ\": \"洒\",\n  \"xǐ,xiǎn\": \"洗\",\n  \"jué,jiào\": \"觉\",\n  \"biǎn,piān\": \"扁\",\n  \"shuō,shuì,yuè\": \"说\",\n  \"lǎo,mǔ\": \"姥\",\n  \"gěi,jǐ\": \"给\",\n  \"luò,lào\": \"络\",\n  \"zǎi,zài\": \"载\",\n  \"mái,mán\": \"埋\",\n  \"shāo,shào\": \"捎稍\",\n  \"dū,dōu\": \"都\",\n  \"ái,āi\": \"挨\",\n  \"mò,mù\": \"莫\",\n  \"è,wù,ě,wū\": \"恶\",\n  \"xiào,jiào\": \"校\",\n  \"hé,hú\": \"核\",\n  \"yūn,yùn\": \"晕\",\n  \"huàng,huǎng\": \"晃\",\n  \"ài,āi\": \"唉\",\n  \"ā,á,ǎ,à,a\": \"啊\",\n  \"bà,ba,pí\": \"罢\",\n  \"zuàn,zuān\": \"钻\",\n  \"qiān,yán\": \"铅\",\n  \"chéng,shèng\": \"乘\",\n  \"mì,bì\": \"秘泌\",\n  \"chēng,chèn,chèng\": \"称\",\n  \"dào,dǎo\": \"倒\",\n  \"tǎng,cháng\": \"倘\",\n  \"chàng,chāng\": \"倡\",\n  \"chòu,xiù\": \"臭\",\n  \"shè,yè,yì\": \"射\",\n  \"gē,gé\": \"胳搁\",\n  \"shuāi,cuī\": \"衰\",\n  \"liáng,liàng\": \"凉量\",\n  \"chù,xù\": \"畜\",\n  \"páng,bàng\": \"旁磅\",\n  \"zhǎng,zhàng\": \"涨\",\n  \"yǒng,chōng\": \"涌\",\n  \"qiāo,qiǎo\": \"悄\",\n  \"jiā,jia,jie\": \"迦家\",\n  \"dú,dòu\": \"读\",\n  \"shàn,shān\": \"扇\",\n  \"shān,shàn\": \"苫\",\n  \"bèi,pī\": \"被\",\n  \"tiáo,diào,zhōu\": \"调\",\n  \"bō,bāo\": \"剥\",\n  \"néng,nài\": \"能\",\n  \"nán,nàn,nuó\": \"难\",\n  \"pái,pǎi\": \"排\",\n  \"jiào,jiāo\": \"教\",\n  \"jù,jū\": \"据\",\n  \"zhù,zhuó,zhe\": \"著\",\n  \"jūn,jùn\": \"菌\",\n  \"lè,lēi\": \"勒\",\n  \"shāo,sào\": \"梢\",\n  \"fù,pì\": \"副\",\n  \"piào,piāo\": \"票\",\n  \"shèng,chéng\": \"盛\",\n  \"què,qiāo,qiǎo\": \"雀\",\n  \"chí,shi\": \"匙\",\n  \"mī,mí\": \"眯\",\n  \"la,lā\": \"啦\",\n  \"shé,yí\": \"蛇\",\n  \"lèi,léi,lěi\": \"累\",\n  \"zhǎn,chán\": \"崭\",\n  \"quān,juàn,juān\": \"圈\",\n  \"lóng,lǒng\": \"笼\",\n  \"dé,děi,de\": \"得\",\n  \"jiǎ,jià\": \"假\",\n  \"māo,máo\": \"猫\",\n  \"xuán,xuàn\": \"旋\",\n  \"zhe,zhuó,zháo,zhāo\": \"着\",\n  \"lǜ,shuài\": \"率\",\n  \"gài,gě,hé\": \"盖\",\n  \"lín,lìn\": \"淋\",\n  \"qú,jù\": \"渠\",\n  \"jiàn,jiān\": \"渐溅\",\n  \"hùn,hún\": \"混\",\n  \"sù,xiǔ,xiù\": \"宿\",\n  \"tán,dàn\": \"弹\",\n  \"yǐn,yìn\": \"隐\",\n  \"jǐng,gěng\": \"颈\",\n  \"lǜ,lù\": \"绿\",\n  \"qū,cù\": \"趋\",\n  \"tí,dī,dǐ\": \"提\",\n  \"jiē,qì\": \"揭\",\n  \"lǒu,lōu\": \"搂\",\n  \"qī,jī\": \"期\",\n  \"sàn,sǎn\": \"散\",\n  \"gě,gé\": \"葛\",\n  \"zhāo,cháo\": \"朝\",\n  \"luò,là,lào\": \"落\",\n  \"yǐ,yī\": \"椅\",\n  \"gùn,hùn\": \"棍\",\n  \"zhí,shi\": \"殖\",\n  \"xià,shà\": \"厦\",\n  \"liè,liě\": \"裂\",\n  \"jǐng,yǐng\": \"景\",\n  \"pēn,pèn\": \"喷\",\n  \"pǎo,páo\": \"跑\",\n  \"hē,hè,yè\": \"喝\",\n  \"pù,pū\": \"铺\",\n  \"zhù,zhú\": \"筑\",\n  \"dá,dā\": \"答\",\n  \"bǎo,bǔ,pù\": \"堡\",\n  \"ào,yù\": \"奥\",\n  \"fān,pān\": \"番\",\n  \"là,xī\": \"腊\",\n  \"gǎng,jiǎng\": \"港\",\n  \"céng,zēng\": \"曾\",\n  \"yú,tōu\": \"愉\",\n  \"qiáng,qiǎng,jiàng\": \"强\",\n  \"shǔ,zhǔ\": \"属\",\n  \"zhōu,yù\": \"粥\",\n  \"shè,niè\": \"摄\",\n  \"tián,zhèn\": \"填\",\n  \"méng,mēng,měng\": \"蒙\",\n  \"jìn,jīn\": \"禁\",\n  \"lù,liù\": \"碌\",\n  \"tiào,táo\": \"跳\",\n  \"é,yǐ\": \"蛾\",\n  \"jiě,jiè,xiè\": \"解\",\n  \"shù,shǔ,shuò\": \"数\",\n  \"liū,liù\": \"溜\",\n  \"sāi,sài,sè\": \"塞\",\n  \"pì,bì\": \"辟\",\n  \"fèng,féng\": \"缝\",\n  \"piě,piē\": \"撇\",\n  \"mó,mú\": \"模\",\n  \"bǎng,bàng\": \"榜\",\n  \"shang,cháng\": \"裳\",\n  \"xiān,xiǎn\": \"鲜\",\n  \"yí,nǐ\": \"疑\",\n  \"gāo,gào\": \"膏\",\n  \"piāo,piào,piǎo\": \"漂\",\n  \"suō,sù\": \"缩\",\n  \"qù,cù\": \"趣\",\n  \"sā,sǎ\": \"撒\",\n  \"tàng,tāng\": \"趟\",\n  \"héng,hèng\": \"横\",\n  \"mán,mén\": \"瞒\",\n  \"bào,pù\": \"暴\",\n  \"mó,mā\": \"摩\",\n  \"hú,hū,hù\": \"糊\",\n  \"pī,pǐ\": \"劈\",\n  \"yàn,yān\": \"燕\",\n  \"báo,bó,bò\": \"薄\",\n  \"mó,mò\": \"磨\",\n  \"jiǎo,zhuó\": \"缴\",\n  \"cáng,zàng\": \"藏\",\n  \"fán,pó\": \"繁\",\n  \"bì,bei\": \"臂\",\n  \"chàn,zhàn\": \"颤\",\n  \"jiāng,qiáng\": \"疆\",\n  \"jiáo,jué,jiào\": \"嚼\",\n  \"rǎng,rāng\": \"嚷\",\n  \"lù,lòu\": \"露\",\n  \"náng,nāng\": \"囊\",\n  \"hāng,bèn\": \"夯\",\n  \"āo,wā\": \"凹\",\n  \"féng,píng\": \"冯\",\n  \"xū,yù\": \"吁\",\n  \"lèi,lē\": \"肋\",\n  \"lūn,lún\": \"抡\",\n  \"jiè,gài\": \"芥\",\n  \"xīn,xìn\": \"芯\",\n  \"chā,chà\": \"杈\",\n  \"xiāo,xiào\": \"肖\",\n  \"zhī,zī\": \"吱\",\n  \"ǒu,ōu,òu\": \"呕\",\n  \"nà,nè\": \"呐\",\n  \"qiàng,qiāng\": \"呛\",\n  \"tún,dùn\": \"囤\",\n  \"kēng,háng\": \"吭\",\n  \"diàn,tián\": \"佃\",\n  \"sì,cì\": \"伺\",\n  \"diàn,tián,shèng\": \"甸\",\n  \"páo,bào\": \"刨\",\n  \"duì,ruì,yuè\": \"兑\",\n  \"kē,kě\": \"坷\",\n  \"tuò,tà,zhí\": \"拓\",\n  \"fú,bì\": \"拂\",\n  \"nǐng,níng,nìng\": \"拧\",\n  \"ào,ǎo,niù\": \"拗\",\n  \"kē,hē\": \"苛\",\n  \"yān,yǎn\": \"奄\",\n  \"hē,a,kē\": \"呵\",\n  \"gā,kā\": \"咖\",\n  \"jiǎo,yáo\": \"侥\",\n  \"chà,shā\": \"刹\",\n  \"nüè,yào\": \"疟\",\n  \"máng,méng\": \"氓\",\n  \"gē,yì\": \"疙\",\n  \"jǔ,jù\": \"沮\",\n  \"zú,cù\": \"卒\",\n  \"wǎn,yuān\": \"宛\",\n  \"mí,mǐ\": \"弥\",\n  \"qì,qiè,xiè\": \"契\",\n  \"xié,jiā\": \"挟\",\n  \"duò,duǒ\": \"垛\",\n  \"zhà,shān,shi,cè\": \"栅\",\n  \"bó,bèi\": \"勃\",\n  \"zhóu,zhòu\": \"轴\",\n  \"liē,liě,lié,lie\": \"咧\",\n  \"yo,yō\": \"哟\",\n  \"qiào,xiào\": \"俏\",\n  \"hóu,hòu\": \"侯\",\n  \"píng,bǐng\": \"屏\",\n  \"nà,nuó\": \"娜\",\n  \"pá,bà\": \"耙\",\n  \"qī,xī\": \"栖\",\n  \"jiǎ,gǔ\": \"贾\",\n  \"láo,lào\": \"唠\",\n  \"bàng,bèng\": \"蚌\",\n  \"gōng,zhōng\": \"蚣\",\n  \"li,lǐ,lī\": \"哩\",\n  \"juè,jué\": \"倔\",\n  \"yīn,yān,yǐn\": \"殷\",\n  \"wō,guō\": \"涡\",\n  \"lào,luò\": \"烙\",\n  \"niǎn,niē\": \"捻\",\n  \"yè,yē\": \"掖\",\n  \"chān,xiān,càn,shǎn\": \"掺\",\n  \"dǎn,shàn\": \"掸\",\n  \"fēi,fěi\": \"菲\",\n  \"qián,gān\": \"乾\",\n  \"shuò,shí\": \"硕\",\n  \"luō,luó,luo\": \"啰\",\n  \"hǔ,xià\": \"唬\",\n  \"dāng,chēng\": \"铛\",\n  \"xiǎn,xǐ\": \"铣\",\n  \"jiǎo,jiáo\": \"矫\",\n  \"kuǐ,guī\": \"傀\",\n  \"jì,zhài\": \"祭\",\n  \"tǎng,chǎng\": \"淌\",\n  \"chún,zhūn\": \"淳\",\n  \"wèi,yù\": \"尉\",\n  \"duò,huī\": \"堕\",\n  \"chuò,chāo\": \"绰\",\n  \"bēng,běng,bèng\": \"绷\",\n  \"zōng,zèng\": \"综\",\n  \"zhuó,zuó\": \"琢\",\n  \"chuǎi,chuài,chuāi,tuán,zhuī\": \"揣\",\n  \"péng,bāng\": \"彭\",\n  \"zhuī,chuí\": \"椎\",\n  \"léng,lēng,líng\": \"棱\",\n  \"qiào,qiáo\": \"翘\",\n  \"zhā,chā\": \"喳\",\n  \"há,gé\": \"蛤\",\n  \"qiàn,kàn\": \"嵌\",\n  \"yān,ā\": \"腌\",\n  \"dūn,duì\": \"敦\",\n  \"kuì,huì\": \"溃\",\n  \"sāo,sǎo\": \"骚\",\n  \"kǎi,jiē\": \"楷\",\n  \"pín,bīn\": \"频\",\n  \"liú,liù\": \"馏\",\n  \"nì,niào\": \"溺\",\n  \"jiǎo,chāo\": \"剿\",\n  \"áo,āo\": \"熬\",\n  \"màn,wàn\": \"蔓\",\n  \"chá,chā\": \"碴\",\n  \"xūn,xùn\": \"熏\",\n  \"da,dá\": \"瘩\",\n  \"tuì,tùn\": \"褪\",\n  \"liáo,liāo\": \"撩\",\n  \"cuō,zuǒ\": \"撮\",\n  \"cháo,zhāo\": \"嘲\",\n  \"hēi,mò\": \"嘿\",\n  \"zhuàng,chuáng\": \"幢\",\n  \"jī,qǐ\": \"稽\",\n  \"biě,biē\": \"瘪\",\n  \"liáo,lào,lǎo\": \"潦\",\n  \"chéng,dèng\": \"澄\",\n  \"lèi,léi\": \"擂\",\n  \"mò,má\": \"蟆\",\n  \"liáo,liǎo\": \"燎\",\n  \"liào,liǎo\": \"瞭\",\n  \"sào,sāo\": \"臊\",\n  \"mí,méi\": \"糜\",\n  \"huò,huō,huá\": \"豁\",\n  \"pù,bào\": \"瀑\",\n  \"zǎn,cuán\": \"攒\",\n  \"bò,bǒ\": \"簸\",\n  \"bó,bù\": \"簿\"\n};\n/*\nobject-assign\n(c) Sindre Sorhus\n@license MIT\n*/\n\n/* eslint-disable no-unused-vars */\n\nvar getOwnPropertySymbols = Object.getOwnPropertySymbols;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n\nfunction toObject(val) {\n  if (val === null || val === undefined) {\n    throw new TypeError('Object.assign cannot be called with null or undefined');\n  }\n\n  return Object(val);\n}\n\nfunction shouldUseNative() {\n  try {\n    if (!Object.assign) {\n      return false;\n    } // Detect buggy property enumeration order in older V8 versions.\n    // https://bugs.chromium.org/p/v8/issues/detail?id=4118\n\n\n    var test1 = new String('abc'); // eslint-disable-line no-new-wrappers\n\n    test1[5] = 'de';\n\n    if (Object.getOwnPropertyNames(test1)[0] === '5') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test2 = {};\n\n    for (var i = 0; i < 10; i++) {\n      test2['_' + String.fromCharCode(i)] = i;\n    }\n\n    var order2 = Object.getOwnPropertyNames(test2).map(function (n) {\n      return test2[n];\n    });\n\n    if (order2.join('') !== '0123456789') {\n      return false;\n    } // https://bugs.chromium.org/p/v8/issues/detail?id=3056\n\n\n    var test3 = {};\n    'abcdefghijklmnopqrst'.split('').forEach(function (letter) {\n      test3[letter] = letter;\n    });\n\n    if (Object.keys(Object.assign({}, test3)).join('') !== 'abcdefghijklmnopqrst') {\n      return false;\n    }\n\n    return true;\n  } catch (err) {\n    // We don't expect any of the above to throw, but better to be safe.\n    return false;\n  }\n}\n\nvar objectAssign = shouldUseNative() ? Object.assign : function (target, source) {\n  var from;\n  var to = toObject(target);\n  var symbols;\n\n  for (var s = 1; s < arguments.length; s++) {\n    from = Object(arguments[s]);\n\n    for (var key in from) {\n      if (hasOwnProperty.call(from, key)) {\n        to[key] = from[key];\n      }\n    }\n\n    if (getOwnPropertySymbols) {\n      symbols = getOwnPropertySymbols(from);\n\n      for (var i = 0; i < symbols.length; i++) {\n        if (propIsEnumerable.call(from, symbols[i])) {\n          to[symbols[i]] = from[symbols[i]];\n        }\n      }\n    }\n  }\n\n  return to;\n}; // 带声调字符。\n\nvar phoneticSymbol = {\n  \"ā\": \"a1\",\n  \"á\": \"a2\",\n  \"ǎ\": \"a3\",\n  \"à\": \"a4\",\n  \"ē\": \"e1\",\n  \"é\": \"e2\",\n  \"ě\": \"e3\",\n  \"è\": \"e4\",\n  \"ō\": \"o1\",\n  \"ó\": \"o2\",\n  \"ǒ\": \"o3\",\n  \"ò\": \"o4\",\n  \"ī\": \"i1\",\n  \"í\": \"i2\",\n  \"ǐ\": \"i3\",\n  \"ì\": \"i4\",\n  \"ū\": \"u1\",\n  \"ú\": \"u2\",\n  \"ǔ\": \"u3\",\n  \"ù\": \"u4\",\n  \"ü\": \"v0\",\n  \"ǘ\": \"v2\",\n  \"ǚ\": \"v3\",\n  \"ǜ\": \"v4\",\n  \"ń\": \"n2\",\n  \"ň\": \"n3\",\n  \"\": \"m2\"\n}; // XXX: Symbol when web support.\n\nconst PINYIN_STYLE = {\n  NORMAL: 0,\n  // 普通风格，不带声调。\n  TONE: 1,\n  // 标准风格，声调在韵母的第一个字母上。\n  TONE2: 2,\n  // 声调以数字形式在拼音之后，使用数字 0~4 标识。\n  TO3NE: 5,\n  // 声调以数字形式在声母之后，使用数字 0~4 标识。\n  INITIALS: 3,\n  // 仅需要声母部分。\n  FIRST_LETTER: 4 // 仅保留首字母。\n\n};\nconst DEFAULT_OPTIONS = {\n  style: PINYIN_STYLE.TONE,\n  // 风格\n  segment: false,\n  // 分词。\n  heteronym: false // 多音字\n\n}; // 声母表。\n\nconst INITIALS = \"b,p,m,f,d,t,n,l,g,k,h,j,q,x,r,zh,ch,sh,z,c,s\".split(\",\"); // 韵母表。\n//const FINALS = \"ang,eng,ing,ong,an,en,in,un,er,ai,ei,ui,ao,ou,iu,ie,ve,a,o,e,i,u,v\".split(\",\");\n// 带声调字符。\n\nconst RE_PHONETIC_SYMBOL = new RegExp(\"([\" + Object.keys(phoneticSymbol).join(\"\") + \"])\", \"g\");\nconst RE_TONE2 = /([aeoiuvnm])([0-4])$/;\n/*\n * 格式化拼音为声母（Initials）形式。\n * @param {String}\n * @return {String}\n */\n\nfunction initials(pinyin) {\n  for (let i = 0, l = INITIALS.length; i < l; i++) {\n    if (pinyin.indexOf(INITIALS[i]) === 0) {\n      return INITIALS[i];\n    }\n  }\n\n  return \"\";\n}\n\nclass Pinyin {\n  constructor(dict) {\n    this._dict = dict;\n  } // @param {String} hans 要转为拼音的目标字符串（汉字）。\n  // @param {Object} options, 可选，用于指定拼音风格，是否启用多音字。\n  // @return {Array} 返回的拼音列表。\n\n\n  convert(hans, options) {\n    if (typeof hans !== \"string\") {\n      return [];\n    }\n\n    options = objectAssign({}, DEFAULT_OPTIONS, options);\n    let pys = [];\n    let nohans = \"\";\n\n    for (let i = 0, firstCharCode, words, l = hans.length; i < l; i++) {\n      words = hans[i];\n      firstCharCode = words.charCodeAt(0);\n\n      if (this._dict[firstCharCode]) {\n        // ends of non-chinese words.\n        if (nohans.length > 0) {\n          pys.push([nohans]);\n          nohans = \"\"; // reset non-chinese words.\n        }\n\n        pys.push(this.single_pinyin(words, options));\n      } else {\n        nohans += words;\n      }\n    } // 清理最后的非中文字符串。\n\n\n    if (nohans.length > 0) {\n      pys.push([nohans]);\n      nohans = \"\"; // reset non-chinese words.\n    }\n\n    return pys;\n  } // 单字拼音转换。\n  // @param {String} han, 单个汉字\n  // @return {Array} 返回拼音列表，多音字会有多个拼音项。\n\n\n  single_pinyin(han, options) {\n    if (typeof han !== \"string\") {\n      return [];\n    }\n\n    if (han.length !== 1) {\n      return this.single_pinyin(han.charAt(0), options);\n    }\n\n    let hanCode = han.charCodeAt(0);\n\n    if (!this._dict[hanCode]) {\n      return [han];\n    }\n\n    let pys = this._dict[hanCode].split(\",\");\n\n    if (!options.heteronym) {\n      return [Pinyin.toFixed(pys[0], options.style)];\n    } // 临时存储已存在的拼音，避免多音字拼音转换为非注音风格出现重复。\n\n\n    let py_cached = {};\n    let pinyins = [];\n\n    for (let i = 0, py, l = pys.length; i < l; i++) {\n      py = Pinyin.toFixed(pys[i], options.style);\n\n      if (py_cached.hasOwnProperty(py)) {\n        continue;\n      }\n\n      py_cached[py] = py;\n      pinyins.push(py);\n    }\n\n    return pinyins;\n  }\n  /**\n   * 格式化拼音风格。\n   *\n   * @param {String} pinyin TONE 风格的拼音。\n   * @param {ENUM} style 目标转换的拼音风格。\n   * @return {String} 转换后的拼音。\n   */\n\n\n  static toFixed(pinyin, style) {\n    let tone = \"\"; // 声调。\n\n    let first_letter;\n    let py;\n\n    switch (style) {\n      case PINYIN_STYLE.INITIALS:\n        return initials(pinyin);\n\n      case PINYIN_STYLE.FIRST_LETTER:\n        first_letter = pinyin.charAt(0);\n\n        if (phoneticSymbol.hasOwnProperty(first_letter)) {\n          first_letter = phoneticSymbol[first_letter].charAt(0);\n        }\n\n        return first_letter;\n\n      case PINYIN_STYLE.NORMAL:\n        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {\n          return phoneticSymbol[$1_phonetic].replace(RE_TONE2, \"$1\");\n        });\n\n      case PINYIN_STYLE.TO3NE:\n        return pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1_phonetic) {\n          return phoneticSymbol[$1_phonetic];\n        });\n\n      case PINYIN_STYLE.TONE2:\n        py = pinyin.replace(RE_PHONETIC_SYMBOL, function ($0, $1) {\n          // 声调数值。\n          tone = phoneticSymbol[$1].replace(RE_TONE2, \"$2\");\n          return phoneticSymbol[$1].replace(RE_TONE2, \"$1\");\n        });\n        return py + tone;\n\n      case PINYIN_STYLE.TONE:\n      default:\n        return pinyin;\n    }\n  }\n  /**\n   * 比较两个汉字转成拼音后的排序顺序，可以用作默认的拼音排序算法。\n   *\n   * @param {String} hanA 汉字字符串 A。\n   * @return {String} hanB 汉字字符串 B。\n   * @return {Number} 返回 -1，0，或 1。\n   */\n\n\n  compare(hanA, hanB) {\n    const pinyinA = this.convert(hanA, DEFAULT_OPTIONS);\n    const pinyinB = this.convert(hanB, DEFAULT_OPTIONS);\n    return String(pinyinA).localeCompare(String(pinyinB));\n  }\n\n  static get STYLE_NORMAL() {\n    return PINYIN_STYLE.NORMAL;\n  }\n\n  static get STYLE_TONE() {\n    return PINYIN_STYLE.TONE;\n  }\n\n  static get STYLE_TONE2() {\n    return PINYIN_STYLE.TONE2;\n  }\n\n  static get STYLE_TO3NE() {\n    return PINYIN_STYLE.TO3NE;\n  }\n\n  static get STYLE_INITIALS() {\n    return PINYIN_STYLE.INITIALS;\n  }\n\n  static get STYLE_FIRST_LETTER() {\n    return PINYIN_STYLE.FIRST_LETTER;\n  }\n\n  static get DEFAULT_OPTIONS() {\n    return DEFAULT_OPTIONS;\n  }\n\n}\n\nvar pinyin$1 = Pinyin; // 解压拼音库。\n// @param {Object} dict_combo, 压缩的拼音库。\n// @param {Object} 解压的拼音库。\n\nfunction buildPinyinCache(dict_combo) {\n  let hans;\n  let uncomboed = {};\n\n  for (let py in dict_combo) {\n    hans = dict_combo[py];\n\n    for (let i = 0, han, l = hans.length; i < l; i++) {\n      han = hans.charCodeAt(i);\n\n      if (!uncomboed.hasOwnProperty(han)) {\n        uncomboed[han] = py;\n      } else {\n        uncomboed[han] += \",\" + py;\n      }\n    }\n  }\n\n  return uncomboed;\n}\n\nconst PINYIN_DICT = buildPinyinCache(dictZiWeb);\nconst pinyin = new pinyin$1(PINYIN_DICT);\nvar webPinyin = pinyin.convert.bind(pinyin);\nvar compare = pinyin.compare.bind(pinyin);\nvar STYLE_NORMAL = pinyin$1.STYLE_NORMAL;\nvar STYLE_TONE = pinyin$1.STYLE_TONE;\nvar STYLE_TONE2 = pinyin$1.STYLE_TONE2;\nvar STYLE_TO3NE = pinyin$1.STYLE_TO3NE;\nvar STYLE_INITIALS = pinyin$1.STYLE_INITIALS;\nvar STYLE_FIRST_LETTER = pinyin$1.STYLE_FIRST_LETTER;\nwebPinyin.compare = compare;\nwebPinyin.STYLE_NORMAL = STYLE_NORMAL;\nwebPinyin.STYLE_TONE = STYLE_TONE;\nwebPinyin.STYLE_TONE2 = STYLE_TONE2;\nwebPinyin.STYLE_TO3NE = STYLE_TO3NE;\nwebPinyin.STYLE_INITIALS = STYLE_INITIALS;\nwebPinyin.STYLE_FIRST_LETTER = STYLE_FIRST_LETTER;\n/** Regex equivalent to \\p{Han} in other programming languages. */\n\nconst HAN_REGEX = /[\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9]/;\n/**\n * Returns true if the `text` contains at least one Chinese characters;\n * false otherwise.\n * @param {string} text - The text to be checked for Chinese.\n * @returns {boolean}\n */\n\nfunction containsChinese(text) {\n  // Empty strings don't contain Chinese.\n  if (text === null || text === undefined || text === '') {\n    return false;\n  } // Check for any match using regex; cast boolean\n\n\n  return !!text.match(HAN_REGEX);\n}\n\n$tw.utils.containsChinese = containsChinese;\n\nfunction translatePinyin(item) {\n  if (!containsChinese(item)) {\n    return item;\n  }\n\n  const pinyinVersionOfItem = webPinyin(item, {\n    style: webPinyin.STYLE_NORMAL\n  }).join('');\n  return `${pinyinVersionOfItem} ${item}`;\n}\n\nfunction hasPinyinMatchOrFuseMatch(items, input, keys = [], options = {}) {\n  const {\n    threshold = 0.3,\n    distance = 60,\n    minMatchCharLength = 1,\n    searchTiddlerByTitle = false\n  } = options;\n  const fuse = new Fuse(items, {\n    getFn: (object, keyPath) => {\n      var _a, _b;\n\n      if (!keyPath) return ''; // general usage\n\n      let value;\n      let realKeyPath;\n\n      if (Array.isArray(keyPath)) {\n        realKeyPath = keyPath[0];\n      } else {\n        realKeyPath = keyPath;\n      }\n\n      value = object[realKeyPath]; // tiddler search usage, should provide { title: string } to work\n\n      if (searchTiddlerByTitle) {\n        const title = object['title'];\n        const fieldName = realKeyPath;\n        const tiddler = (_a = $tw.wiki.getTiddler(title)) === null || _a === void 0 ? void 0 : _a.fields;\n        if (!tiddler) return '';\n        const fieldValue = typeof tiddler[fieldName] === 'string' ? tiddler[fieldName] : String((_b = tiddler[fieldName]) !== null && _b !== void 0 ? _b : ''); // parse pinyin for long text is time consuming\n        // if use chinese to search chinese, no need for pinyin\n\n        if (fieldName === 'text' || containsChinese(input)) {\n          return fieldValue;\n        }\n\n        return translatePinyin(fieldValue);\n      }\n\n      return translatePinyin(value);\n    },\n    keys: keys,\n    ignoreLocation: false,\n    includeScore: true,\n    includeMatches: true,\n    shouldSort: true,\n    minMatchCharLength,\n    threshold,\n    distance\n  });\n  const result = fuse.search(input);\n  return result.reverse();\n}\n\n$tw.utils.pinyinfuse = hasPinyinMatchOrFuseMatch;\n/**\nReturn an array of tiddler titles that match a search string\n@param searchText The text string to search for\n@param options see below\n\nOptions available:\n- source: an iterator function for the source tiddlers, called source(iterator), where iterator is called as iterator(tiddler,title)\n- exclude: An array of tiddler titles to exclude from the search\n- invert: If true returns tiddlers that do not contain the specified string\n- caseSensitive: If true forces a case sensitive search\n- field: If specified, restricts the search to the specified field, or an array of field names\n- anchored: If true, forces all but regexp searches to be anchored to the start of text\n- excludeField: If true, the field options are inverted to specify the fields that are not to be searched\n\nThe search mode is determined by the first of these boolean flags to be true:\n- literal: searches for literal string\n- whitespace: same as literal except runs of whitespace are treated as a single space\n- regexp: treats the search term as a regular expression\n- words: (default) treats search string as a list of tokens, and matches if all tokens are found, regardless of adjacency or ordering\n\n*/\n\nfunction fuzzySearchWiki(searchText, options = {}) {\n  const {\n    exclude\n  } = options; // Accumulate the array of fields to be searched or excluded from the search\n\n  let fields = [];\n\n  if (options.field) {\n    if (Array.isArray(options.field)) {\n      options.field.forEach(fieldName => {\n        if (fieldName) {\n          fields.push(fieldName);\n        }\n      });\n    } else {\n      fields.push(options.field);\n    }\n  } // Use default fields if none specified and we're not excluding fields (excluding fields with an empty field array is the same as searching all fields)\n\n\n  if (fields.length === 0 && !options.excludeField) {\n    fields.push('title');\n    fields.push('tags');\n    fields.push('text');\n  } // get tiddler list to search\n\n\n  let tiddlerTitlesToSearch = [];\n\n  if (typeof options.source === 'function') {\n    options.source((tiddler, title) => {\n      tiddlerTitlesToSearch.push(title);\n    });\n  } else {\n    tiddlerTitlesToSearch = $tw.wiki.getTiddlers();\n  } // 开始搜索\n  // 首先进行精确匹配，快速搜索，需要空格隔开的各个部分都命中，顺序不重要\n\n\n  const inputKeywords = searchText.toLowerCase().split(' ').filter(item => item);\n  const exactMatches = tiddlerTitlesToSearch.filter(title => {\n    const lowerCaseTitle = title.toLowerCase();\n    return inputKeywords.every(keyword => lowerCaseTitle.includes(keyword));\n  });\n\n  if (exactMatches.length > 0) {\n    return exactMatches;\n  } // 没有发现完全匹配的，首先模糊拼音搜索兜底\n  // seems getFn is not working here if it searches string[] , so we have to make items { title: string } first, and turn it back later\n\n\n  const results = hasPinyinMatchOrFuseMatch(tiddlerTitlesToSearch.map(title => ({\n    title\n  })), searchText, fields, {\n    searchTiddlerByTitle: true\n  }).map(item => item.item.title); // Remove any of the results we have to exclude\n\n  if (exclude) {\n    for (let excludeIndex = 0; excludeIndex < exclude.length; excludeIndex += 1) {\n      let p = results.findIndex(item => item.includes(exclude[excludeIndex]));\n\n      if (p !== -1) {\n        results.splice(p, 1);\n      }\n    }\n  }\n\n  return results.filter(item => item);\n}\n/**\n *\n * @example [pinyinfuse]\n * @param source\n * @param operator\n * @param options\n * @returns\n */\n\n\nconst pinyinfuse = (source, operator, options) => {\n  const invert = operator.prefix === '!';\n\n  if (operator.suffixes) {\n    let hasFlag = function (flag) {\n      var _a, _b;\n\n      return ((_b = (_a = operator.suffixes) === null || _a === void 0 ? void 0 : _a[1]) !== null && _b !== void 0 ? _b : []).indexOf(flag) !== -1;\n    };\n\n    let excludeFields = false;\n    let fieldList = operator.suffixes[0] || [];\n    let firstField = fieldList[0] || '';\n    let firstChar = firstField.charAt(0);\n    let fields;\n\n    if (firstChar === '-') {\n      fields = [firstField.slice(1)].concat(fieldList.slice(1));\n      excludeFields = true;\n    } else if (fieldList[0] === '*') {\n      fields = [];\n      excludeFields = true;\n    } else {\n      fields = fieldList.slice(0);\n    }\n\n    return fuzzySearchWiki(operator.operand, {\n      source: source,\n      invert: invert,\n      field: fields,\n      excludeField: excludeFields,\n      caseSensitive: hasFlag('casesensitive'),\n      literal: hasFlag('literal'),\n      whitespace: hasFlag('whitespace'),\n      anchored: hasFlag('anchored'),\n      words: hasFlag('words')\n    });\n  } else {\n    return fuzzySearchWiki(operator.operand, {\n      source: source,\n      invert: invert\n    });\n  }\n};\n\nexports.fuzzySearchWiki = fuzzySearchWiki;\nexports.hasPinyinMatchOrFuseMatch = hasPinyinMatchOrFuseMatch;\nexports.pinyinfuse = pinyinfuse;\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicGlueWluLWZ1enp5LXNlYXJjaC5qcyIsInNvdXJjZXMiOltdLCJzb3VyY2VzQ29udGVudCI6W10sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiIifQ==\n","creator":"LinOnetwo","type":"application/javascript","module-type":"filteroperator"},"/home/runner/work/tiddlywiki-plugins/tiddlywiki-plugins/dist/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.ts":{"title":"/home/runner/work/tiddlywiki-plugins/tiddlywiki-plugins/dist/plugins/linonetwo/pinyin-fuzzy-search/pinyin-fuzzy-search.ts","text":"import Fuse from 'fuse.js';\nimport pinyin from 'pinyin';\nimport type { ISearchOptions, SourceIterator, IFilterOperatorParamOperator } from 'tiddlywiki';\n\nexport interface IFilterOperatorOptions {\n  /** The `$tw.Wiki` object; */\n  wiki: Object;\n  /** (optional) a widget node. */\n  widget: Object;\n}\n\n/** Regex equivalent to \\p{Han} in other programming languages. */\nconst HAN_REGEX = /[\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u3005\\u3007\\u3021-\\u3029\\u3038-\\u303B\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uF900-\\uFA6D\\uFA70-\\uFAD9]/;\n\n/**\n * Returns true if the `text` contains at least one Chinese characters;\n * false otherwise.\n * @param {string} text - The text to be checked for Chinese.\n * @returns {boolean}\n */\nfunction containsChinese(text: string) {\n  // Empty strings don't contain Chinese.\n  if (text === null || text === undefined || text === '') {\n    return false;\n  }\n  // Check for any match using regex; cast boolean\n  return !!text.match(HAN_REGEX);\n}\n$tw.utils.containsChinese = containsChinese;\n\nfunction translatePinyin(item: string): string {\n  if (!containsChinese(item)) {\n    return item;\n  }\n  const pinyinVersionOfItem = pinyin(item, { style: pinyin.STYLE_NORMAL }).join('');\n  return `${pinyinVersionOfItem} ${item}`;\n}\n\nexport function hasPinyinMatchOrFuseMatch<T extends Record<string, string>, Ks extends keyof T>(\n  items: T[],\n  input: string,\n  keys: Ks[] = [],\n  options: { threshold?: number; distance?: number; minMatchCharLength?: number; searchTiddlerByTitle?: boolean } = {},\n): Fuse.FuseResult<T>[] {\n  const { threshold = 0.3, distance = 60, minMatchCharLength = 1, searchTiddlerByTitle = false } = options;\n  const fuse = new Fuse<T>(items, {\n    getFn: (object: T, keyPath: string | string[]): string => {\n      if (!keyPath) return '';\n      // general usage\n      let value: string;\n      let realKeyPath: string;\n      if (Array.isArray(keyPath)) {\n        realKeyPath = keyPath[0] as 'any';\n      } else {\n        realKeyPath = keyPath as 'any';\n      }\n      value = object[realKeyPath];\n      // tiddler search usage, should provide { title: string } to work\n      if (searchTiddlerByTitle) {\n        const title = object['title'];\n        const fieldName = realKeyPath;\n        const tiddler = $tw.wiki.getTiddler(title)?.fields;\n        if (!tiddler) return '';\n        const fieldValue = typeof tiddler[fieldName] === 'string' ? tiddler[fieldName] : String(tiddler[fieldName] ?? '');\n        // parse pinyin for long text is time consuming\n        // if use chinese to search chinese, no need for pinyin\n        if (fieldName === 'text' || containsChinese(input)) {\n          return fieldValue;\n        }\n        return translatePinyin(fieldValue);\n      }\n\n      return translatePinyin(value);\n    },\n    keys: keys as string[],\n    ignoreLocation: false,\n    includeScore: true,\n    includeMatches: true,\n    shouldSort: true,\n    minMatchCharLength,\n    threshold,\n    distance,\n  });\n  const result = fuse.search(input);\n  return result.reverse();\n}\n\n$tw.utils.pinyinfuse = hasPinyinMatchOrFuseMatch;\n\n/**\nReturn an array of tiddler titles that match a search string\n@param searchText The text string to search for\n@param options see below\n\nOptions available:\n- source: an iterator function for the source tiddlers, called source(iterator), where iterator is called as iterator(tiddler,title)\n- exclude: An array of tiddler titles to exclude from the search\n- invert: If true returns tiddlers that do not contain the specified string\n- caseSensitive: If true forces a case sensitive search\n- field: If specified, restricts the search to the specified field, or an array of field names\n- anchored: If true, forces all but regexp searches to be anchored to the start of text\n- excludeField: If true, the field options are inverted to specify the fields that are not to be searched\n\nThe search mode is determined by the first of these boolean flags to be true:\n- literal: searches for literal string\n- whitespace: same as literal except runs of whitespace are treated as a single space\n- regexp: treats the search term as a regular expression\n- words: (default) treats search string as a list of tokens, and matches if all tokens are found, regardless of adjacency or ordering\n\n*/\nexport function fuzzySearchWiki(searchText: string, options: ISearchOptions = {}): string[] {\n  const { exclude } = options;\n  // Accumulate the array of fields to be searched or excluded from the search\n  let fields: string[] = [];\n  if (options.field) {\n    if (Array.isArray(options.field)) {\n      options.field.forEach((fieldName) => {\n        if (fieldName) {\n          fields.push(fieldName);\n        }\n      });\n    } else {\n      fields.push(options.field);\n    }\n  }\n  // Use default fields if none specified and we're not excluding fields (excluding fields with an empty field array is the same as searching all fields)\n  if (fields.length === 0 && !options.excludeField) {\n    fields.push('title');\n    fields.push('tags');\n    fields.push('text');\n  }\n\n  // get tiddler list to search\n  let tiddlerTitlesToSearch: string[] = [];\n  if (typeof options.source === 'function') {\n    options.source((tiddler, title) => {\n      tiddlerTitlesToSearch.push(title);\n    });\n  } else {\n    tiddlerTitlesToSearch = $tw.wiki.getTiddlers();\n  }\n\n  // 开始搜索\n\n  // 首先进行精确匹配，快速搜索，需要空格隔开的各个部分都命中，顺序不重要\n  const inputKeywords: string[] = searchText\n    .toLowerCase()\n    .split(' ')\n    .filter((item) => item);\n  const exactMatches = tiddlerTitlesToSearch.filter((title) => {\n    const lowerCaseTitle = title.toLowerCase();\n    return inputKeywords.every((keyword) => lowerCaseTitle.includes(keyword));\n  });\n  if (exactMatches.length > 0) {\n    return exactMatches;\n  }\n\n  // 没有发现完全匹配的，首先模糊拼音搜索兜底\n  // seems getFn is not working here if it searches string[] , so we have to make items { title: string } first, and turn it back later\n  const results = hasPinyinMatchOrFuseMatch<any, any>(\n    tiddlerTitlesToSearch.map((title) => ({ title })),\n    searchText,\n    fields,\n    { searchTiddlerByTitle: true },\n  ).map((item) => item.item.title);\n  // Remove any of the results we have to exclude\n  if (exclude) {\n    for (let excludeIndex = 0; excludeIndex < exclude.length; excludeIndex += 1) {\n      let p = results.findIndex((item) => item.includes(exclude[excludeIndex]));\n      if (p !== -1) {\n        results.splice(p, 1);\n      }\n    }\n  }\n  return results.filter((item) => item);\n}\n\n/**\n *\n * @example [pinyinfuse]\n * @param source\n * @param operator\n * @param options\n * @returns\n */\nexport const pinyinfuse = (source: (iter: SourceIterator) => void, operator: IFilterOperatorParamOperator, options: IFilterOperatorOptions) => {\n  const invert = operator.prefix === '!';\n  if (operator.suffixes) {\n    let hasFlag = function (flag: string) {\n      return (operator.suffixes?.[1] ?? []).indexOf(flag) !== -1;\n    };\n    let excludeFields = false;\n    let fieldList = operator.suffixes[0] || [];\n    let firstField = fieldList[0] || '';\n    let firstChar = firstField.charAt(0);\n    let fields: string[];\n    if (firstChar === '-') {\n      fields = [firstField.slice(1)].concat(fieldList.slice(1));\n      excludeFields = true;\n    } else if (fieldList[0] === '*') {\n      fields = [];\n      excludeFields = true;\n    } else {\n      fields = fieldList.slice(0);\n    }\n    return fuzzySearchWiki(operator.operand, {\n      source: source,\n      invert: invert,\n      field: fields,\n      excludeField: excludeFields,\n      caseSensitive: hasFlag('casesensitive'),\n      literal: hasFlag('literal'),\n      whitespace: hasFlag('whitespace'),\n      anchored: hasFlag('anchored'),\n      words: hasFlag('words'),\n    });\n  } else {\n    return fuzzySearchWiki(operator.operand, {\n      source: source,\n      invert: invert,\n    });\n  }\n};\n","type":".ts"},"$:/plugins/linonetwo/pinyin-fuzzy-search/readme":{"title":"$:/plugins/linonetwo/pinyin-fuzzy-search/readme","creator":"LinOnetwo","type":"text/vnd.tiddlywiki","text":""}}}