{"tiddlers":{"$:/plugins/linonetwo/source-control-management/PageControlButton":{"title":"$:/plugins/linonetwo/source-control-management/PageControlButton","tags":"$:/tags/PageControls","type":"text/vnd.tiddlywiki","caption":"{{$:/plugins/linonetwo/source-control-management/icons/git-sync.svg}} 备份本地Git","description":"显示本地笔记是否同步备份到Github，点击可同步","text":"<$nodejs-tiddlygit-git-sync />\n"},"$:/plugins/linonetwo/source-control-management/SideBarSCMTab":{"title":"$:/plugins/linonetwo/source-control-management/SideBarSCMTab","tags":"$:/tags/SideBar","type":"text/vnd.tiddlywiki","caption":"SCM","description":"Source Control Management","text":"<$git-sync-scm-tab />\n"},"$:/plugins/linonetwo/source-control-management/button.js":{"title":"$:/plugins/linonetwo/source-control-management/button.js","text":"/*\\\nShow local git state and sync to git on click.\nRequires you are using TiddlyGit, and have install the \"Inject JS\" API with access to NodeJS and Electron API).\n\n\\*/\n(function () {\n  /*jslint node: true, browser: true */\n  /*global $tw: true */\n  'use strict';\n\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\n\n  class NodeJSGitSyncWidget extends Widget {\n    /**\n     * Lifecycle method: call this.initialise and super\n     */\n    constructor(parseTreeNode, options) {\n      super(parseTreeNode, options);\n      this.initialise(parseTreeNode, options);\n      this.state = {\n        needSetUp: false, // need to setup api, or just API missing\n        interval: 1000, // check interval\n        count: 0, // things need to commit\n        unsync: false, // need to push to github\n        syncing: false, // a sync is in progress\n      };\n      this.checkInLoop();\n    }\n\n    async getWorkspaces() {\n      const workspaces = await window.service.workspace.getWorkspacesAsList();\n      const activeWorkspace = await window.service.workspace.getActiveWorkspace();\n      if (activeWorkspace) {\n        return workspaces.filter((workspace) => workspace.id === activeWorkspace.id || (workspace.isSubWiki && workspace.mainWikiID === activeWorkspace.id));\n      }\n      return [];\n    }\n\n    /**\n     * Lifecycle method: Render this widget into the DOM\n     */\n    render(parent, nextSibling) {\n      // boilerplate\n      this.parentDomNode = parent;\n      this.computeAttributes();\n\n      // DOM\n      const importButton = this.document.createElement('button');\n      importButton.className = 'tc-btn-invisible tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync ';\n      importButton.onclick = this.onSyncButtonClick.bind(this);\n\n      // set icon\n      if (this.state.needSetUp) {\n        // all commit and sync to cloud\n        importButton.className += 'git-sync';\n        // tooltip\n        const label = '需要配置TiddlyGit';\n        importButton.title = label;\n        importButton['aria-label'] = label;\n        // icon\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\n      } else if (this.state.syncing) {\n        // all commit and sync to cloud\n        importButton.className += 'git-sync syncing';\n        // tooltip\n        const label = '正在同步到云端';\n        importButton.title = label;\n        importButton['aria-label'] = label;\n        // icon\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\n      } else if (this.state.count === 0 && !this.state.unsync) {\n        // all commit and sync to cloud\n        importButton.className += 'git-sync';\n        // tooltip\n        const label = '已完全同步到云端';\n        importButton.title = label;\n        importButton['aria-label'] = label;\n        // icon\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-sync.svg');\n      } else if (this.state.count === 0 && this.state.unsync) {\n        // some commit need to sync to the cloud\n        importButton.className += 'git-pull-request';\n        // tooltip\n        const label = '待推送到云端';\n        importButton.title = label;\n        importButton['aria-label'] = label;\n        // icon\n        importButton.innerHTML = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg');\n      } else {\n        // some need to commit, and not sync to cloud yet\n        importButton.className += 'git-pull-request';\n        // tooltip\n        const label = `${this.state.count} 个文件待提交和推送`;\n        importButton.title = label;\n        importButton['aria-label'] = label;\n        // icon\n        const iconSVG = $tw.wiki.getTiddlerText('$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg');\n        // add count indicator badge\n        const countIndicator = `<span class=\"tiddlygit-scm-count tiddlygit-scm-count-small\">${this.state.count}</span>`;\n        importButton.innerHTML = `<span>${iconSVG}${countIndicator}</span>`;\n      }\n\n      // boilerplate\n      parent.insertBefore(importButton, nextSibling);\n      this.domNodes.push(importButton);\n    }\n\n    /**\n     * Event listener of button\n     */\n    async onSyncButtonClick() {\n      if (!this.state.syncing && this.state.unsync) {\n        this.state.syncing = true;\n        this.refreshSelf();\n        try {\n          const workspaces = await this.getWorkspaces();\n          const tasks = workspaces.map(async ({ wikiFolderLocation, gitUrl, storageService }) => {\n            const userInfo = await this.authService.getStorageServiceUserInfo(storageService);\n            window.service.git.commitAndSync(workspaces, gitUrl, userInfo);\n          });\n          await Promise.all(tasks);\n        } catch (error) {\n          console.error('NodeJSGitSyncWidget: Error syncing', error);\n        }\n        this.state.syncing = false;\n        this.refreshSelf();\n      }\n    }\n\n    /**\n     * Check state every a few time\n     */\n    async checkInLoop() {\n      // check if API from TiddlyGit is available, first time it is Server Side Rendening so window.xxx from the electron ContextBridge will be missing\n      if (\n        !window.service.git ||\n        typeof window.service.git.commitAndSync !== 'function' ||\n        typeof window.service.git.getModifiedFileList !== 'function' ||\n        typeof window.service.workspace.getWorkspacesAsList !== 'function'\n      ) {\n        this.state.needSetUp = true;\n      } else {\n        this.state.needSetUp = false;\n        this.checkGitState();\n      }\n      setTimeout(() => {\n        this.checkInLoop();\n      }, this.state.interval);\n    }\n\n    /**\n     *  Check repo git sync state and count of uncommit things\n     */\n    async checkGitState() {\n      const workspaces = await this.getWorkspaces();\n      const repoStatuses = [];\n      for (const workspace of workspaces) {\n        const modifiedListString = $tw.wiki.getTiddlerText(`$:/state/scm-modified-file-list/${workspace.wikiFolderLocation}`);\n        if (modifiedListString !== undefined) {\n          const modifiedListJSON = JSON.parse(modifiedListString);\n          repoStatuses.push(modifiedListJSON);\n        }\n      }\n\n      this.state.count = 0;\n      this.state.unsync = false;\n      for (const repoStatus of repoStatuses) {\n        if (repoStatus.length) {\n          this.state.count += repoStatus.length;\n          this.state.unsync = true;\n        }\n      }\n\n      return this.refreshSelf(); // method from super class, this is like React forceUpdate, we use it because it is not fully reactive on this.state change\n    }\n  }\n\n  exports['nodejs-tiddlygit-git-sync'] = NodeJSGitSyncWidget;\n})();\n","type":"application/javascript","module-type":"widget"},"$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg":{"title":"$:/plugins/linonetwo/source-control-management/icons/git-pull-request.svg","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tc-image-button\" width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n  <circle cx=\"6\" cy=\"18\" r=\"2\"/>\n  <circle cx=\"6\" cy=\"6\" r=\"2\"/>\n  <circle cx=\"18\" cy=\"18\" r=\"2\"/>\n  <line x1=\"6\" y1=\"8\" x2=\"6\" y2=\"16\"/>\n  <path d=\"M11 6h5a2 2 0 0 1 2 2v8\"/>\n  <polyline points=\"14 9 11 6 14 3\"/>\n</svg>","type":"text/vnd.tiddlywiki"},"$:/plugins/linonetwo/source-control-management/icons/git-sync.svg":{"title":"$:/plugins/linonetwo/source-control-management/icons/git-sync.svg","text":"<svg xmlns=\"http://www.w3.org/2000/svg\" class=\"tc-image-button\" width=\"22\" height=\"22\" viewBox=\"0 0 22 22\" stroke-width=\"2\" stroke=\"currentColor\" fill=\"none\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n  <path stroke=\"none\" d=\"M0 0h24v24H0z\"/>\n  <circle cx=\"6\" cy=\"6\" r=\"2\"/>\n  <circle cx=\"18\" cy=\"18\" r=\"2\"/>\n  <path d=\"M11 6h5a2 2 0 0 1 2 2v8\"/>\n  <polyline points=\"14 9 11 6 14 3\"/>\n  <path d=\"M13 18h-5a2 2 0 0 1 -2 -2v-8\"/>\n  <polyline points=\"10 15 13 18 10 21\"/>\n</svg>","type":"text/vnd.tiddlywiki"},"$:/plugins/linonetwo/source-control-management/readme":{"title":"$:/plugins/linonetwo/source-control-management/readme","type":"text/vnd.tiddlywiki","text":"!! 功能\n\n[[WebCatalog|https://webcatalogapp.com/]] 除了[[能将 TiddlyWiki 包装成桌面应用|https://onetwo.ren/%E7%94%A8tiddlywiki%E6%9B%BF%E4%BB%A3notion%E5%92%8Cevernote%E7%AE%A1%E7%90%86%E7%9F%A5%E8%AF%86/]]以外，还提供了自定义 API 并暴露给网页的功能，让我们可以在 Wiki 网页里使用一些高级功能。\n\n本插件利用暴露的自定义 API 实现：\n\n# 查看本地 NodeJS 版 TiddlyWiki 是否完全与 Github 备份云同步了\n# 一键同步本地和云端\n\n!! 用法\n\n当点开 SCM 标签页的时候，会进行一次 git 环境检查，因为使用的 git 库 dugite 比较卡，所以只进行一次检查，如果需要刷新，需要来回切换一下 tab。\n"},"$:/plugins/linonetwo/source-control-management/style.css":{"title":"$:/plugins/linonetwo/source-control-management/style.css","text":"button.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.git-sync {\n  cursor: not-allowed;\n}\nspan.tiddlygit-scm-count {\n  position: relative;\n  background: dimgrey;\n  color: white;\n  border-radius: 9999px;\n  opacity: 0.5;\n  min-width: 1.2em;\n  margin-left: 0.5em;\n  padding-left: 0.5em;\n  padding-top: 0.1em;\n  padding-right: 0.5em;\n  width: fit-content;\n}\nspan.tiddlygit-scm-count-small {\n  font-size: 0.6em;\n  padding-left: 0.2em;\n  padding-right: 0.2em;\n  line-height: 1.3em;\n  margin-left: -1em;\n}\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > span > svg,\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > svg {\n  fill: none;\n  color: #aaa;\n}\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > span > svg:hover,\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync > svg:hover {\n  fill: none;\n  color: #444;\n}\n\n@keyframes rotation {\n  from {\n    transform: rotate(0deg);\n  }\n  to {\n    transform: rotate(359deg);\n  }\n}\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.syncing > span > svg,\nbutton.tc-btn-invisible.tc-btn-plugins-linonetwo-nodejs-tiddlygit-git-sync.syncing > svg {\n  animation: rotation 2s infinite linear;\n}\n\ndiv.file-info {\n  margin-bottom: 5px;\n}\nspan.file-changed-type {\n  margin-right: 5px;\n}\nspan.file-name {\n  color: #333;\n}\n","tags":"$:/tags/Stylesheet","type":"text/css"},"$:/plugins/linonetwo/source-control-management/tab.js":{"title":"$:/plugins/linonetwo/source-control-management/tab.js","text":"/*\\\nShow local git state and sync to git on click.\nRequires you are using TiddlyGit, and have install the \"Inject JS\" API with access to NodeJS and Electron API).\n\n\\*/\n(function () {\n  /*jslint node: true, browser: true */\n  /*global $tw: true */\n  'use strict';\n\n  const Widget = require('$:/core/modules/widgets/widget.js').widget;\n\n  class NodeJSGitSyncSCMTabWidget extends Widget {\n    /**\n     * Lifecycle method: call this.initialise and super\n     */\n    constructor(parseTreeNode, options) {\n      super(parseTreeNode, options);\n      this.initialise(parseTreeNode, options);\n      this.state = {\n        needSetUp: false, // need to setup api, or just API missing\n\n        /**\n         * {\n         *   [folderName: string]: {\n         *      type: string,\n         *      fileRelativePath: string,\n         *      filePath: string,\n         *   }[]\n         * }\n         */\n        repoInfo: {},\n      };\n      this.checkInLoop();\n    }\n\n    async getWorkspaces() {\n      const workspaces = await window.service.workspace.getWorkspacesAsList();\n      const activeWorkspace = await window.service.workspace.getActiveWorkspace();\n      if (activeWorkspace) {\n        return workspaces.filter((workspace) => workspace.id === activeWorkspace.id || (workspace.isSubWiki && workspace.mainWikiID === activeWorkspace.id));\n      }\n      return [];\n    }\n\n    /**\n     * Lifecycle method: Render this widget into the DOM\n     */\n    render(parent, nextSibling) {\n      // boilerplate\n      this.parentDomNode = parent;\n      this.computeAttributes();\n\n      // DOM\n      const container = this.document.createElement('div');\n      container.className = '';\n\n      // workspaces\n      for (const workspaceFullPath of Object.keys(this.state.repoInfo).sort((a, b) => a.length - b.length)) {\n        const changedFileInfoList = this.state.repoInfo[workspaceFullPath];\n\n        const workspaceInfoContainer = this.document.createElement('div');\n        const workspaceTitle = this.document.createElement('h4');\n        const workspaceTitleChangedCount = this.document.createElement('span');\n        workspaceTitleChangedCount.className = 'tiddlygit-scm-count';\n        workspaceTitleChangedCount.innerText = changedFileInfoList.length;\n\n        const workspaceName = workspaceFullPath.split('/').pop();\n        workspaceTitle.innerText = workspaceName;\n        workspaceTitle.appendChild(workspaceTitleChangedCount);\n        workspaceInfoContainer.appendChild(workspaceTitle);\n\n        // changed files\n        for (const changedFileInfo of changedFileInfoList) {\n          const fileInfoContainer = this.document.createElement('div');\n          fileInfoContainer.className = 'file-info';\n          const fileChangedTypeElement = this.document.createElement('span');\n          fileChangedTypeElement.className = 'file-changed-type';\n          fileChangedTypeElement.innerText = this.mapChangeTypeToText(changedFileInfo.type);\n\n          const fileNameElement = this.document.createElement('a');\n          fileNameElement.className = 'file-name tc-tiddlylink tc-tiddlylink-resolves tc-popup-handle tc-popup-absolute';\n          const correctPath = this.getPathByTitle(changedFileInfo.fileRelativePath);\n          fileNameElement.innerText = correctPath;\n          fileNameElement.href = `#${correctPath}`;\n\n          fileInfoContainer.appendChild(fileChangedTypeElement);\n          fileInfoContainer.appendChild(fileNameElement);\n          workspaceInfoContainer.appendChild(fileInfoContainer);\n        }\n\n        container.appendChild(workspaceInfoContainer);\n      }\n\n      parent.insertBefore(container, nextSibling);\n      this.domNodes.push(container);\n    }\n\n    getPathByTitle(fileRelativePath) {\n      if (fileRelativePath.startsWith('plugins')) {\n        return `$:/${fileRelativePath}`;\n      } else if (fileRelativePath.startsWith('tiddlers/')) {\n        return fileRelativePath.replace('tiddlers/', '').replace(/\\.tid$/, '');\n      }\n      return fileRelativePath;\n    }\n\n    async getFolderInfo() {\n      const workspaces = await this.getWorkspaces();\n      return workspaces.map(({ wikiFolderLocation: wikiPath, gitUrl }) => ({ wikiPath, gitUrl }));\n    }\n\n    mapChangeTypeToText(changedType) {\n      switch (changedType) {\n        case '??':\n          return '+';\n\n        default:\n          return changedType;\n      }\n    }\n\n    /**\n     * Check state every a few time\n     */\n    async checkInLoop() {\n      // check if API from TiddlyGit is available, first time it is Server Side Rendening so window.xxx from the electron ContextBridge will be missing\n      if (\n        !window.service.git ||\n        typeof window.service.git.commitAndSync !== 'function' ||\n        typeof window.service.git.getModifiedFileList !== 'function' ||\n        typeof window.service.workspace.getWorkspacesAsList !== 'function'\n      ) {\n        this.state.needSetUp = true;\n      } else {\n        this.state.needSetUp = false;\n        this.checkGitState();\n      }\n      // TODO: only check when tab is just opened, wait for https://github.com/Jermolene/TiddlyWiki5/discussions/5945\n      // setTimeout(() => {\n      //   this.checkInLoop();\n      // }, this.state.interval);\n    }\n\n    /**\n     *  Check repo git sync state and count of uncommit things\n     */\n    async checkGitState() {\n      this.state.count = 0;\n      this.state.unsync = false;\n      this.state.repoInfo = {};\n\n      const folderInfo = await this.getFolderInfo();\n      await Promise.all(\n        folderInfo.map(async ({ wikiPath }) => {\n          const modifiedList = await window.service.git.getModifiedFileList(wikiPath);\n          modifiedList.sort((changedFileInfoA, changedFileInfoB) => changedFileInfoA.fileRelativePath > changedFileInfoB.fileRelativePath);\n          $tw.wiki.addTiddler({\n            title: `$:/state/scm-modified-file-list/${wikiPath}`,\n            text: JSON.stringify(modifiedList),\n          });\n          this.state.repoInfo[wikiPath] = modifiedList;\n        }),\n      );\n\n      return this.refreshSelf(); // method from super class, this is like React forceUpdate, we use it because it is not fully reactive on this.state change\n    }\n  }\n\n  exports['git-sync-scm-tab'] = NodeJSGitSyncSCMTabWidget;\n})();\n","type":"application/javascript","module-type":"widget"}}}